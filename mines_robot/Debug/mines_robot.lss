
mines_robot.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003cd4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001c  00800060  00003cd4  00003d68  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001e  0080007c  0080007c  00003d84  2**0
                  ALLOC
  3 .stab         00003630  00000000  00000000  00003d84  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001ac9  00000000  00000000  000073b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00008e7d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00008fbd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000912d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000ad76  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000bc61  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000ca10  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000cb70  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000cdfd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000d5cb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 17 0a 	jmp	0x142e	; 0x142e <__vector_1>
       8:	0c 94 4a 0a 	jmp	0x1494	; 0x1494 <__vector_2>
       c:	0c 94 7d 0a 	jmp	0x14fa	; 0x14fa <__vector_3>
      10:	0c 94 a0 0d 	jmp	0x1b40	; 0x1b40 <__vector_4>
      14:	0c 94 6d 0d 	jmp	0x1ada	; 0x1ada <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 07 0d 	jmp	0x1a0e	; 0x1a0e <__vector_7>
      20:	0c 94 3a 0d 	jmp	0x1a74	; 0x1a74 <__vector_8>
      24:	0c 94 d4 0c 	jmp	0x19a8	; 0x19a8 <__vector_9>
      28:	0c 94 a1 0c 	jmp	0x1942	; 0x1942 <__vector_10>
      2c:	0c 94 6e 0c 	jmp	0x18dc	; 0x18dc <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 ed       	ldi	r30, 0xD4	; 212
      68:	fc e3       	ldi	r31, 0x3C	; 60
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 37       	cpi	r26, 0x7C	; 124
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ac e7       	ldi	r26, 0x7C	; 124
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 39       	cpi	r26, 0x9A	; 154
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 2e 1a 	call	0x345c	; 0x345c <main>
      8a:	0c 94 68 1e 	jmp	0x3cd0	; 0x3cd0 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 31 1e 	jmp	0x3c62	; 0x3c62 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 4d 1e 	jmp	0x3c9a	; 0x3c9a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 3d 1e 	jmp	0x3c7a	; 0x3c7a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 59 1e 	jmp	0x3cb2	; 0x3cb2 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 3d 1e 	jmp	0x3c7a	; 0x3c7a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 59 1e 	jmp	0x3cb2	; 0x3cb2 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 31 1e 	jmp	0x3c62	; 0x3c62 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 4d 1e 	jmp	0x3c9a	; 0x3c9a <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 3d 1e 	jmp	0x3c7a	; 0x3c7a <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 59 1e 	jmp	0x3cb2	; 0x3cb2 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 3d 1e 	jmp	0x3c7a	; 0x3c7a <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 59 1e 	jmp	0x3cb2	; 0x3cb2 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 3d 1e 	jmp	0x3c7a	; 0x3c7a <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 59 1e 	jmp	0x3cb2	; 0x3cb2 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 41 1e 	jmp	0x3c82	; 0x3c82 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 5d 1e 	jmp	0x3cba	; 0x3cba <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <Dio_SetPinMode>:
#include "Registers.h"
#include "Dio.h"


StdReturnType Dio_SetPinMode (Dio_PortType port, Dio_PinType pin, Dio_ModeType mode)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	2e 97       	sbiw	r28, 0x0e	; 14
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
     b5a:	8a 83       	std	Y+2, r24	; 0x02
     b5c:	6b 83       	std	Y+3, r22	; 0x03
     b5e:	4c 83       	std	Y+4, r20	; 0x04
    StdReturnType retVal = E_OK;
     b60:	19 82       	std	Y+1, r1	; 0x01
    if (pin > DIO_PIN7)
     b62:	8b 81       	ldd	r24, Y+3	; 0x03
     b64:	88 30       	cpi	r24, 0x08	; 8
     b66:	18 f0       	brcs	.+6      	; 0xb6e <Dio_SetPinMode+0x28>
    {
        retVal = E_NOT_OK;
     b68:	81 e0       	ldi	r24, 0x01	; 1
     b6a:	89 83       	std	Y+1, r24	; 0x01
     b6c:	10 c2       	rjmp	.+1056   	; 0xf8e <Dio_SetPinMode+0x448>
    }
    else
    {
        switch (port)
     b6e:	8a 81       	ldd	r24, Y+2	; 0x02
     b70:	28 2f       	mov	r18, r24
     b72:	30 e0       	ldi	r19, 0x00	; 0
     b74:	3e 87       	std	Y+14, r19	; 0x0e
     b76:	2d 87       	std	Y+13, r18	; 0x0d
     b78:	8d 85       	ldd	r24, Y+13	; 0x0d
     b7a:	9e 85       	ldd	r25, Y+14	; 0x0e
     b7c:	81 30       	cpi	r24, 0x01	; 1
     b7e:	91 05       	cpc	r25, r1
     b80:	09 f4       	brne	.+2      	; 0xb84 <Dio_SetPinMode+0x3e>
     b82:	92 c0       	rjmp	.+292    	; 0xca8 <Dio_SetPinMode+0x162>
     b84:	2d 85       	ldd	r18, Y+13	; 0x0d
     b86:	3e 85       	ldd	r19, Y+14	; 0x0e
     b88:	22 30       	cpi	r18, 0x02	; 2
     b8a:	31 05       	cpc	r19, r1
     b8c:	2c f4       	brge	.+10     	; 0xb98 <Dio_SetPinMode+0x52>
     b8e:	8d 85       	ldd	r24, Y+13	; 0x0d
     b90:	9e 85       	ldd	r25, Y+14	; 0x0e
     b92:	00 97       	sbiw	r24, 0x00	; 0
     b94:	71 f0       	breq	.+28     	; 0xbb2 <Dio_SetPinMode+0x6c>
     b96:	f9 c1       	rjmp	.+1010   	; 0xf8a <Dio_SetPinMode+0x444>
     b98:	2d 85       	ldd	r18, Y+13	; 0x0d
     b9a:	3e 85       	ldd	r19, Y+14	; 0x0e
     b9c:	22 30       	cpi	r18, 0x02	; 2
     b9e:	31 05       	cpc	r19, r1
     ba0:	09 f4       	brne	.+2      	; 0xba4 <Dio_SetPinMode+0x5e>
     ba2:	fd c0       	rjmp	.+506    	; 0xd9e <Dio_SetPinMode+0x258>
     ba4:	8d 85       	ldd	r24, Y+13	; 0x0d
     ba6:	9e 85       	ldd	r25, Y+14	; 0x0e
     ba8:	83 30       	cpi	r24, 0x03	; 3
     baa:	91 05       	cpc	r25, r1
     bac:	09 f4       	brne	.+2      	; 0xbb0 <Dio_SetPinMode+0x6a>
     bae:	72 c1       	rjmp	.+740    	; 0xe94 <Dio_SetPinMode+0x34e>
     bb0:	ec c1       	rjmp	.+984    	; 0xf8a <Dio_SetPinMode+0x444>
        {
        case DIO_PORTA:
            switch (mode)
     bb2:	8c 81       	ldd	r24, Y+4	; 0x04
     bb4:	28 2f       	mov	r18, r24
     bb6:	30 e0       	ldi	r19, 0x00	; 0
     bb8:	3c 87       	std	Y+12, r19	; 0x0c
     bba:	2b 87       	std	Y+11, r18	; 0x0b
     bbc:	8b 85       	ldd	r24, Y+11	; 0x0b
     bbe:	9c 85       	ldd	r25, Y+12	; 0x0c
     bc0:	81 30       	cpi	r24, 0x01	; 1
     bc2:	91 05       	cpc	r25, r1
     bc4:	f9 f0       	breq	.+62     	; 0xc04 <Dio_SetPinMode+0xbe>
     bc6:	2b 85       	ldd	r18, Y+11	; 0x0b
     bc8:	3c 85       	ldd	r19, Y+12	; 0x0c
     bca:	22 30       	cpi	r18, 0x02	; 2
     bcc:	31 05       	cpc	r19, r1
     bce:	09 f4       	brne	.+2      	; 0xbd2 <Dio_SetPinMode+0x8c>
     bd0:	41 c0       	rjmp	.+130    	; 0xc54 <Dio_SetPinMode+0x10e>
     bd2:	8b 85       	ldd	r24, Y+11	; 0x0b
     bd4:	9c 85       	ldd	r25, Y+12	; 0x0c
     bd6:	00 97       	sbiw	r24, 0x00	; 0
     bd8:	09 f0       	breq	.+2      	; 0xbdc <Dio_SetPinMode+0x96>
     bda:	63 c0       	rjmp	.+198    	; 0xca2 <Dio_SetPinMode+0x15c>
            {
            case DIO_MODE_OUTPUT:
                SET_BIT(DDRA, pin);
     bdc:	aa e3       	ldi	r26, 0x3A	; 58
     bde:	b0 e0       	ldi	r27, 0x00	; 0
     be0:	ea e3       	ldi	r30, 0x3A	; 58
     be2:	f0 e0       	ldi	r31, 0x00	; 0
     be4:	80 81       	ld	r24, Z
     be6:	48 2f       	mov	r20, r24
     be8:	8b 81       	ldd	r24, Y+3	; 0x03
     bea:	28 2f       	mov	r18, r24
     bec:	30 e0       	ldi	r19, 0x00	; 0
     bee:	81 e0       	ldi	r24, 0x01	; 1
     bf0:	90 e0       	ldi	r25, 0x00	; 0
     bf2:	02 2e       	mov	r0, r18
     bf4:	02 c0       	rjmp	.+4      	; 0xbfa <Dio_SetPinMode+0xb4>
     bf6:	88 0f       	add	r24, r24
     bf8:	99 1f       	adc	r25, r25
     bfa:	0a 94       	dec	r0
     bfc:	e2 f7       	brpl	.-8      	; 0xbf6 <Dio_SetPinMode+0xb0>
     bfe:	84 2b       	or	r24, r20
     c00:	8c 93       	st	X, r24
     c02:	c5 c1       	rjmp	.+906    	; 0xf8e <Dio_SetPinMode+0x448>
                break;
            case DIO_MODE_INPUT_FLOATING:
                CLR_BIT(DDRA, pin);
     c04:	aa e3       	ldi	r26, 0x3A	; 58
     c06:	b0 e0       	ldi	r27, 0x00	; 0
     c08:	ea e3       	ldi	r30, 0x3A	; 58
     c0a:	f0 e0       	ldi	r31, 0x00	; 0
     c0c:	80 81       	ld	r24, Z
     c0e:	48 2f       	mov	r20, r24
     c10:	8b 81       	ldd	r24, Y+3	; 0x03
     c12:	28 2f       	mov	r18, r24
     c14:	30 e0       	ldi	r19, 0x00	; 0
     c16:	81 e0       	ldi	r24, 0x01	; 1
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	02 c0       	rjmp	.+4      	; 0xc20 <Dio_SetPinMode+0xda>
     c1c:	88 0f       	add	r24, r24
     c1e:	99 1f       	adc	r25, r25
     c20:	2a 95       	dec	r18
     c22:	e2 f7       	brpl	.-8      	; 0xc1c <Dio_SetPinMode+0xd6>
     c24:	80 95       	com	r24
     c26:	84 23       	and	r24, r20
     c28:	8c 93       	st	X, r24
                CLR_BIT(PORTA, pin);
     c2a:	ab e3       	ldi	r26, 0x3B	; 59
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	eb e3       	ldi	r30, 0x3B	; 59
     c30:	f0 e0       	ldi	r31, 0x00	; 0
     c32:	80 81       	ld	r24, Z
     c34:	48 2f       	mov	r20, r24
     c36:	8b 81       	ldd	r24, Y+3	; 0x03
     c38:	28 2f       	mov	r18, r24
     c3a:	30 e0       	ldi	r19, 0x00	; 0
     c3c:	81 e0       	ldi	r24, 0x01	; 1
     c3e:	90 e0       	ldi	r25, 0x00	; 0
     c40:	02 2e       	mov	r0, r18
     c42:	02 c0       	rjmp	.+4      	; 0xc48 <Dio_SetPinMode+0x102>
     c44:	88 0f       	add	r24, r24
     c46:	99 1f       	adc	r25, r25
     c48:	0a 94       	dec	r0
     c4a:	e2 f7       	brpl	.-8      	; 0xc44 <Dio_SetPinMode+0xfe>
     c4c:	80 95       	com	r24
     c4e:	84 23       	and	r24, r20
     c50:	8c 93       	st	X, r24
     c52:	9d c1       	rjmp	.+826    	; 0xf8e <Dio_SetPinMode+0x448>
                break;
            case DIO_MODE_INPUT_PULLUP:
                CLR_BIT(DDRA, pin);
     c54:	aa e3       	ldi	r26, 0x3A	; 58
     c56:	b0 e0       	ldi	r27, 0x00	; 0
     c58:	ea e3       	ldi	r30, 0x3A	; 58
     c5a:	f0 e0       	ldi	r31, 0x00	; 0
     c5c:	80 81       	ld	r24, Z
     c5e:	48 2f       	mov	r20, r24
     c60:	8b 81       	ldd	r24, Y+3	; 0x03
     c62:	28 2f       	mov	r18, r24
     c64:	30 e0       	ldi	r19, 0x00	; 0
     c66:	81 e0       	ldi	r24, 0x01	; 1
     c68:	90 e0       	ldi	r25, 0x00	; 0
     c6a:	02 c0       	rjmp	.+4      	; 0xc70 <Dio_SetPinMode+0x12a>
     c6c:	88 0f       	add	r24, r24
     c6e:	99 1f       	adc	r25, r25
     c70:	2a 95       	dec	r18
     c72:	e2 f7       	brpl	.-8      	; 0xc6c <Dio_SetPinMode+0x126>
     c74:	80 95       	com	r24
     c76:	84 23       	and	r24, r20
     c78:	8c 93       	st	X, r24
                SET_BIT(PORTA, pin);
     c7a:	ab e3       	ldi	r26, 0x3B	; 59
     c7c:	b0 e0       	ldi	r27, 0x00	; 0
     c7e:	eb e3       	ldi	r30, 0x3B	; 59
     c80:	f0 e0       	ldi	r31, 0x00	; 0
     c82:	80 81       	ld	r24, Z
     c84:	48 2f       	mov	r20, r24
     c86:	8b 81       	ldd	r24, Y+3	; 0x03
     c88:	28 2f       	mov	r18, r24
     c8a:	30 e0       	ldi	r19, 0x00	; 0
     c8c:	81 e0       	ldi	r24, 0x01	; 1
     c8e:	90 e0       	ldi	r25, 0x00	; 0
     c90:	02 2e       	mov	r0, r18
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <Dio_SetPinMode+0x152>
     c94:	88 0f       	add	r24, r24
     c96:	99 1f       	adc	r25, r25
     c98:	0a 94       	dec	r0
     c9a:	e2 f7       	brpl	.-8      	; 0xc94 <Dio_SetPinMode+0x14e>
     c9c:	84 2b       	or	r24, r20
     c9e:	8c 93       	st	X, r24
     ca0:	76 c1       	rjmp	.+748    	; 0xf8e <Dio_SetPinMode+0x448>
                break;
            default:
                retVal = E_NOT_OK;
     ca2:	81 e0       	ldi	r24, 0x01	; 1
     ca4:	89 83       	std	Y+1, r24	; 0x01
     ca6:	73 c1       	rjmp	.+742    	; 0xf8e <Dio_SetPinMode+0x448>
                break;
            }
            break;
        case DIO_PORTB:
            switch (mode)
     ca8:	8c 81       	ldd	r24, Y+4	; 0x04
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	3a 87       	std	Y+10, r19	; 0x0a
     cb0:	29 87       	std	Y+9, r18	; 0x09
     cb2:	89 85       	ldd	r24, Y+9	; 0x09
     cb4:	9a 85       	ldd	r25, Y+10	; 0x0a
     cb6:	81 30       	cpi	r24, 0x01	; 1
     cb8:	91 05       	cpc	r25, r1
     cba:	f9 f0       	breq	.+62     	; 0xcfa <Dio_SetPinMode+0x1b4>
     cbc:	29 85       	ldd	r18, Y+9	; 0x09
     cbe:	3a 85       	ldd	r19, Y+10	; 0x0a
     cc0:	22 30       	cpi	r18, 0x02	; 2
     cc2:	31 05       	cpc	r19, r1
     cc4:	09 f4       	brne	.+2      	; 0xcc8 <Dio_SetPinMode+0x182>
     cc6:	41 c0       	rjmp	.+130    	; 0xd4a <Dio_SetPinMode+0x204>
     cc8:	89 85       	ldd	r24, Y+9	; 0x09
     cca:	9a 85       	ldd	r25, Y+10	; 0x0a
     ccc:	00 97       	sbiw	r24, 0x00	; 0
     cce:	09 f0       	breq	.+2      	; 0xcd2 <Dio_SetPinMode+0x18c>
     cd0:	63 c0       	rjmp	.+198    	; 0xd98 <Dio_SetPinMode+0x252>
            {
            case DIO_MODE_OUTPUT:
                SET_BIT(DDRB, pin);
     cd2:	a7 e3       	ldi	r26, 0x37	; 55
     cd4:	b0 e0       	ldi	r27, 0x00	; 0
     cd6:	e7 e3       	ldi	r30, 0x37	; 55
     cd8:	f0 e0       	ldi	r31, 0x00	; 0
     cda:	80 81       	ld	r24, Z
     cdc:	48 2f       	mov	r20, r24
     cde:	8b 81       	ldd	r24, Y+3	; 0x03
     ce0:	28 2f       	mov	r18, r24
     ce2:	30 e0       	ldi	r19, 0x00	; 0
     ce4:	81 e0       	ldi	r24, 0x01	; 1
     ce6:	90 e0       	ldi	r25, 0x00	; 0
     ce8:	02 2e       	mov	r0, r18
     cea:	02 c0       	rjmp	.+4      	; 0xcf0 <Dio_SetPinMode+0x1aa>
     cec:	88 0f       	add	r24, r24
     cee:	99 1f       	adc	r25, r25
     cf0:	0a 94       	dec	r0
     cf2:	e2 f7       	brpl	.-8      	; 0xcec <Dio_SetPinMode+0x1a6>
     cf4:	84 2b       	or	r24, r20
     cf6:	8c 93       	st	X, r24
     cf8:	4a c1       	rjmp	.+660    	; 0xf8e <Dio_SetPinMode+0x448>
                break;
            case DIO_MODE_INPUT_FLOATING:
                CLR_BIT(DDRB, pin);
     cfa:	a7 e3       	ldi	r26, 0x37	; 55
     cfc:	b0 e0       	ldi	r27, 0x00	; 0
     cfe:	e7 e3       	ldi	r30, 0x37	; 55
     d00:	f0 e0       	ldi	r31, 0x00	; 0
     d02:	80 81       	ld	r24, Z
     d04:	48 2f       	mov	r20, r24
     d06:	8b 81       	ldd	r24, Y+3	; 0x03
     d08:	28 2f       	mov	r18, r24
     d0a:	30 e0       	ldi	r19, 0x00	; 0
     d0c:	81 e0       	ldi	r24, 0x01	; 1
     d0e:	90 e0       	ldi	r25, 0x00	; 0
     d10:	02 c0       	rjmp	.+4      	; 0xd16 <Dio_SetPinMode+0x1d0>
     d12:	88 0f       	add	r24, r24
     d14:	99 1f       	adc	r25, r25
     d16:	2a 95       	dec	r18
     d18:	e2 f7       	brpl	.-8      	; 0xd12 <Dio_SetPinMode+0x1cc>
     d1a:	80 95       	com	r24
     d1c:	84 23       	and	r24, r20
     d1e:	8c 93       	st	X, r24
                CLR_BIT(PORTB, pin);
     d20:	a8 e3       	ldi	r26, 0x38	; 56
     d22:	b0 e0       	ldi	r27, 0x00	; 0
     d24:	e8 e3       	ldi	r30, 0x38	; 56
     d26:	f0 e0       	ldi	r31, 0x00	; 0
     d28:	80 81       	ld	r24, Z
     d2a:	48 2f       	mov	r20, r24
     d2c:	8b 81       	ldd	r24, Y+3	; 0x03
     d2e:	28 2f       	mov	r18, r24
     d30:	30 e0       	ldi	r19, 0x00	; 0
     d32:	81 e0       	ldi	r24, 0x01	; 1
     d34:	90 e0       	ldi	r25, 0x00	; 0
     d36:	02 2e       	mov	r0, r18
     d38:	02 c0       	rjmp	.+4      	; 0xd3e <Dio_SetPinMode+0x1f8>
     d3a:	88 0f       	add	r24, r24
     d3c:	99 1f       	adc	r25, r25
     d3e:	0a 94       	dec	r0
     d40:	e2 f7       	brpl	.-8      	; 0xd3a <Dio_SetPinMode+0x1f4>
     d42:	80 95       	com	r24
     d44:	84 23       	and	r24, r20
     d46:	8c 93       	st	X, r24
     d48:	22 c1       	rjmp	.+580    	; 0xf8e <Dio_SetPinMode+0x448>
                break;
            case DIO_MODE_INPUT_PULLUP:
                CLR_BIT(DDRB, pin);
     d4a:	a7 e3       	ldi	r26, 0x37	; 55
     d4c:	b0 e0       	ldi	r27, 0x00	; 0
     d4e:	e7 e3       	ldi	r30, 0x37	; 55
     d50:	f0 e0       	ldi	r31, 0x00	; 0
     d52:	80 81       	ld	r24, Z
     d54:	48 2f       	mov	r20, r24
     d56:	8b 81       	ldd	r24, Y+3	; 0x03
     d58:	28 2f       	mov	r18, r24
     d5a:	30 e0       	ldi	r19, 0x00	; 0
     d5c:	81 e0       	ldi	r24, 0x01	; 1
     d5e:	90 e0       	ldi	r25, 0x00	; 0
     d60:	02 c0       	rjmp	.+4      	; 0xd66 <Dio_SetPinMode+0x220>
     d62:	88 0f       	add	r24, r24
     d64:	99 1f       	adc	r25, r25
     d66:	2a 95       	dec	r18
     d68:	e2 f7       	brpl	.-8      	; 0xd62 <Dio_SetPinMode+0x21c>
     d6a:	80 95       	com	r24
     d6c:	84 23       	and	r24, r20
     d6e:	8c 93       	st	X, r24
                SET_BIT(PORTB, pin);
     d70:	a8 e3       	ldi	r26, 0x38	; 56
     d72:	b0 e0       	ldi	r27, 0x00	; 0
     d74:	e8 e3       	ldi	r30, 0x38	; 56
     d76:	f0 e0       	ldi	r31, 0x00	; 0
     d78:	80 81       	ld	r24, Z
     d7a:	48 2f       	mov	r20, r24
     d7c:	8b 81       	ldd	r24, Y+3	; 0x03
     d7e:	28 2f       	mov	r18, r24
     d80:	30 e0       	ldi	r19, 0x00	; 0
     d82:	81 e0       	ldi	r24, 0x01	; 1
     d84:	90 e0       	ldi	r25, 0x00	; 0
     d86:	02 2e       	mov	r0, r18
     d88:	02 c0       	rjmp	.+4      	; 0xd8e <Dio_SetPinMode+0x248>
     d8a:	88 0f       	add	r24, r24
     d8c:	99 1f       	adc	r25, r25
     d8e:	0a 94       	dec	r0
     d90:	e2 f7       	brpl	.-8      	; 0xd8a <Dio_SetPinMode+0x244>
     d92:	84 2b       	or	r24, r20
     d94:	8c 93       	st	X, r24
     d96:	fb c0       	rjmp	.+502    	; 0xf8e <Dio_SetPinMode+0x448>
                break;
            default:
                retVal = E_NOT_OK;
     d98:	81 e0       	ldi	r24, 0x01	; 1
     d9a:	89 83       	std	Y+1, r24	; 0x01
     d9c:	f8 c0       	rjmp	.+496    	; 0xf8e <Dio_SetPinMode+0x448>
                break;
            }
            break;
        case DIO_PORTC:
            switch (mode)
     d9e:	8c 81       	ldd	r24, Y+4	; 0x04
     da0:	28 2f       	mov	r18, r24
     da2:	30 e0       	ldi	r19, 0x00	; 0
     da4:	38 87       	std	Y+8, r19	; 0x08
     da6:	2f 83       	std	Y+7, r18	; 0x07
     da8:	8f 81       	ldd	r24, Y+7	; 0x07
     daa:	98 85       	ldd	r25, Y+8	; 0x08
     dac:	81 30       	cpi	r24, 0x01	; 1
     dae:	91 05       	cpc	r25, r1
     db0:	f9 f0       	breq	.+62     	; 0xdf0 <Dio_SetPinMode+0x2aa>
     db2:	2f 81       	ldd	r18, Y+7	; 0x07
     db4:	38 85       	ldd	r19, Y+8	; 0x08
     db6:	22 30       	cpi	r18, 0x02	; 2
     db8:	31 05       	cpc	r19, r1
     dba:	09 f4       	brne	.+2      	; 0xdbe <Dio_SetPinMode+0x278>
     dbc:	41 c0       	rjmp	.+130    	; 0xe40 <Dio_SetPinMode+0x2fa>
     dbe:	8f 81       	ldd	r24, Y+7	; 0x07
     dc0:	98 85       	ldd	r25, Y+8	; 0x08
     dc2:	00 97       	sbiw	r24, 0x00	; 0
     dc4:	09 f0       	breq	.+2      	; 0xdc8 <Dio_SetPinMode+0x282>
     dc6:	63 c0       	rjmp	.+198    	; 0xe8e <Dio_SetPinMode+0x348>
            {
            case DIO_MODE_OUTPUT:
                SET_BIT(DDRC, pin);
     dc8:	a4 e3       	ldi	r26, 0x34	; 52
     dca:	b0 e0       	ldi	r27, 0x00	; 0
     dcc:	e4 e3       	ldi	r30, 0x34	; 52
     dce:	f0 e0       	ldi	r31, 0x00	; 0
     dd0:	80 81       	ld	r24, Z
     dd2:	48 2f       	mov	r20, r24
     dd4:	8b 81       	ldd	r24, Y+3	; 0x03
     dd6:	28 2f       	mov	r18, r24
     dd8:	30 e0       	ldi	r19, 0x00	; 0
     dda:	81 e0       	ldi	r24, 0x01	; 1
     ddc:	90 e0       	ldi	r25, 0x00	; 0
     dde:	02 2e       	mov	r0, r18
     de0:	02 c0       	rjmp	.+4      	; 0xde6 <Dio_SetPinMode+0x2a0>
     de2:	88 0f       	add	r24, r24
     de4:	99 1f       	adc	r25, r25
     de6:	0a 94       	dec	r0
     de8:	e2 f7       	brpl	.-8      	; 0xde2 <Dio_SetPinMode+0x29c>
     dea:	84 2b       	or	r24, r20
     dec:	8c 93       	st	X, r24
     dee:	cf c0       	rjmp	.+414    	; 0xf8e <Dio_SetPinMode+0x448>
                break;
            case DIO_MODE_INPUT_FLOATING:
                CLR_BIT(DDRC, pin);
     df0:	a4 e3       	ldi	r26, 0x34	; 52
     df2:	b0 e0       	ldi	r27, 0x00	; 0
     df4:	e4 e3       	ldi	r30, 0x34	; 52
     df6:	f0 e0       	ldi	r31, 0x00	; 0
     df8:	80 81       	ld	r24, Z
     dfa:	48 2f       	mov	r20, r24
     dfc:	8b 81       	ldd	r24, Y+3	; 0x03
     dfe:	28 2f       	mov	r18, r24
     e00:	30 e0       	ldi	r19, 0x00	; 0
     e02:	81 e0       	ldi	r24, 0x01	; 1
     e04:	90 e0       	ldi	r25, 0x00	; 0
     e06:	02 c0       	rjmp	.+4      	; 0xe0c <Dio_SetPinMode+0x2c6>
     e08:	88 0f       	add	r24, r24
     e0a:	99 1f       	adc	r25, r25
     e0c:	2a 95       	dec	r18
     e0e:	e2 f7       	brpl	.-8      	; 0xe08 <Dio_SetPinMode+0x2c2>
     e10:	80 95       	com	r24
     e12:	84 23       	and	r24, r20
     e14:	8c 93       	st	X, r24
                CLR_BIT(PORTC, pin);
     e16:	a5 e3       	ldi	r26, 0x35	; 53
     e18:	b0 e0       	ldi	r27, 0x00	; 0
     e1a:	e5 e3       	ldi	r30, 0x35	; 53
     e1c:	f0 e0       	ldi	r31, 0x00	; 0
     e1e:	80 81       	ld	r24, Z
     e20:	48 2f       	mov	r20, r24
     e22:	8b 81       	ldd	r24, Y+3	; 0x03
     e24:	28 2f       	mov	r18, r24
     e26:	30 e0       	ldi	r19, 0x00	; 0
     e28:	81 e0       	ldi	r24, 0x01	; 1
     e2a:	90 e0       	ldi	r25, 0x00	; 0
     e2c:	02 2e       	mov	r0, r18
     e2e:	02 c0       	rjmp	.+4      	; 0xe34 <Dio_SetPinMode+0x2ee>
     e30:	88 0f       	add	r24, r24
     e32:	99 1f       	adc	r25, r25
     e34:	0a 94       	dec	r0
     e36:	e2 f7       	brpl	.-8      	; 0xe30 <Dio_SetPinMode+0x2ea>
     e38:	80 95       	com	r24
     e3a:	84 23       	and	r24, r20
     e3c:	8c 93       	st	X, r24
     e3e:	a7 c0       	rjmp	.+334    	; 0xf8e <Dio_SetPinMode+0x448>
                break;
            case DIO_MODE_INPUT_PULLUP:
                CLR_BIT(DDRC, pin);
     e40:	a4 e3       	ldi	r26, 0x34	; 52
     e42:	b0 e0       	ldi	r27, 0x00	; 0
     e44:	e4 e3       	ldi	r30, 0x34	; 52
     e46:	f0 e0       	ldi	r31, 0x00	; 0
     e48:	80 81       	ld	r24, Z
     e4a:	48 2f       	mov	r20, r24
     e4c:	8b 81       	ldd	r24, Y+3	; 0x03
     e4e:	28 2f       	mov	r18, r24
     e50:	30 e0       	ldi	r19, 0x00	; 0
     e52:	81 e0       	ldi	r24, 0x01	; 1
     e54:	90 e0       	ldi	r25, 0x00	; 0
     e56:	02 c0       	rjmp	.+4      	; 0xe5c <Dio_SetPinMode+0x316>
     e58:	88 0f       	add	r24, r24
     e5a:	99 1f       	adc	r25, r25
     e5c:	2a 95       	dec	r18
     e5e:	e2 f7       	brpl	.-8      	; 0xe58 <Dio_SetPinMode+0x312>
     e60:	80 95       	com	r24
     e62:	84 23       	and	r24, r20
     e64:	8c 93       	st	X, r24
                SET_BIT(PORTC, pin);
     e66:	a5 e3       	ldi	r26, 0x35	; 53
     e68:	b0 e0       	ldi	r27, 0x00	; 0
     e6a:	e5 e3       	ldi	r30, 0x35	; 53
     e6c:	f0 e0       	ldi	r31, 0x00	; 0
     e6e:	80 81       	ld	r24, Z
     e70:	48 2f       	mov	r20, r24
     e72:	8b 81       	ldd	r24, Y+3	; 0x03
     e74:	28 2f       	mov	r18, r24
     e76:	30 e0       	ldi	r19, 0x00	; 0
     e78:	81 e0       	ldi	r24, 0x01	; 1
     e7a:	90 e0       	ldi	r25, 0x00	; 0
     e7c:	02 2e       	mov	r0, r18
     e7e:	02 c0       	rjmp	.+4      	; 0xe84 <Dio_SetPinMode+0x33e>
     e80:	88 0f       	add	r24, r24
     e82:	99 1f       	adc	r25, r25
     e84:	0a 94       	dec	r0
     e86:	e2 f7       	brpl	.-8      	; 0xe80 <Dio_SetPinMode+0x33a>
     e88:	84 2b       	or	r24, r20
     e8a:	8c 93       	st	X, r24
     e8c:	80 c0       	rjmp	.+256    	; 0xf8e <Dio_SetPinMode+0x448>
                break;
            default:
                retVal = E_NOT_OK;
     e8e:	81 e0       	ldi	r24, 0x01	; 1
     e90:	89 83       	std	Y+1, r24	; 0x01
     e92:	7d c0       	rjmp	.+250    	; 0xf8e <Dio_SetPinMode+0x448>
                break;
            }
            break;
        case DIO_PORTD:
            switch (mode)
     e94:	8c 81       	ldd	r24, Y+4	; 0x04
     e96:	28 2f       	mov	r18, r24
     e98:	30 e0       	ldi	r19, 0x00	; 0
     e9a:	3e 83       	std	Y+6, r19	; 0x06
     e9c:	2d 83       	std	Y+5, r18	; 0x05
     e9e:	8d 81       	ldd	r24, Y+5	; 0x05
     ea0:	9e 81       	ldd	r25, Y+6	; 0x06
     ea2:	81 30       	cpi	r24, 0x01	; 1
     ea4:	91 05       	cpc	r25, r1
     ea6:	f9 f0       	breq	.+62     	; 0xee6 <Dio_SetPinMode+0x3a0>
     ea8:	2d 81       	ldd	r18, Y+5	; 0x05
     eaa:	3e 81       	ldd	r19, Y+6	; 0x06
     eac:	22 30       	cpi	r18, 0x02	; 2
     eae:	31 05       	cpc	r19, r1
     eb0:	09 f4       	brne	.+2      	; 0xeb4 <Dio_SetPinMode+0x36e>
     eb2:	41 c0       	rjmp	.+130    	; 0xf36 <Dio_SetPinMode+0x3f0>
     eb4:	8d 81       	ldd	r24, Y+5	; 0x05
     eb6:	9e 81       	ldd	r25, Y+6	; 0x06
     eb8:	00 97       	sbiw	r24, 0x00	; 0
     eba:	09 f0       	breq	.+2      	; 0xebe <Dio_SetPinMode+0x378>
     ebc:	63 c0       	rjmp	.+198    	; 0xf84 <Dio_SetPinMode+0x43e>
            {
            case DIO_MODE_OUTPUT:
                SET_BIT(DDRD, pin);
     ebe:	a1 e3       	ldi	r26, 0x31	; 49
     ec0:	b0 e0       	ldi	r27, 0x00	; 0
     ec2:	e1 e3       	ldi	r30, 0x31	; 49
     ec4:	f0 e0       	ldi	r31, 0x00	; 0
     ec6:	80 81       	ld	r24, Z
     ec8:	48 2f       	mov	r20, r24
     eca:	8b 81       	ldd	r24, Y+3	; 0x03
     ecc:	28 2f       	mov	r18, r24
     ece:	30 e0       	ldi	r19, 0x00	; 0
     ed0:	81 e0       	ldi	r24, 0x01	; 1
     ed2:	90 e0       	ldi	r25, 0x00	; 0
     ed4:	02 2e       	mov	r0, r18
     ed6:	02 c0       	rjmp	.+4      	; 0xedc <Dio_SetPinMode+0x396>
     ed8:	88 0f       	add	r24, r24
     eda:	99 1f       	adc	r25, r25
     edc:	0a 94       	dec	r0
     ede:	e2 f7       	brpl	.-8      	; 0xed8 <Dio_SetPinMode+0x392>
     ee0:	84 2b       	or	r24, r20
     ee2:	8c 93       	st	X, r24
     ee4:	54 c0       	rjmp	.+168    	; 0xf8e <Dio_SetPinMode+0x448>
                break;
            case DIO_MODE_INPUT_FLOATING:
                CLR_BIT(DDRD, pin);
     ee6:	a1 e3       	ldi	r26, 0x31	; 49
     ee8:	b0 e0       	ldi	r27, 0x00	; 0
     eea:	e1 e3       	ldi	r30, 0x31	; 49
     eec:	f0 e0       	ldi	r31, 0x00	; 0
     eee:	80 81       	ld	r24, Z
     ef0:	48 2f       	mov	r20, r24
     ef2:	8b 81       	ldd	r24, Y+3	; 0x03
     ef4:	28 2f       	mov	r18, r24
     ef6:	30 e0       	ldi	r19, 0x00	; 0
     ef8:	81 e0       	ldi	r24, 0x01	; 1
     efa:	90 e0       	ldi	r25, 0x00	; 0
     efc:	02 c0       	rjmp	.+4      	; 0xf02 <Dio_SetPinMode+0x3bc>
     efe:	88 0f       	add	r24, r24
     f00:	99 1f       	adc	r25, r25
     f02:	2a 95       	dec	r18
     f04:	e2 f7       	brpl	.-8      	; 0xefe <Dio_SetPinMode+0x3b8>
     f06:	80 95       	com	r24
     f08:	84 23       	and	r24, r20
     f0a:	8c 93       	st	X, r24
                CLR_BIT(PORTD, pin);
     f0c:	a2 e3       	ldi	r26, 0x32	; 50
     f0e:	b0 e0       	ldi	r27, 0x00	; 0
     f10:	e2 e3       	ldi	r30, 0x32	; 50
     f12:	f0 e0       	ldi	r31, 0x00	; 0
     f14:	80 81       	ld	r24, Z
     f16:	48 2f       	mov	r20, r24
     f18:	8b 81       	ldd	r24, Y+3	; 0x03
     f1a:	28 2f       	mov	r18, r24
     f1c:	30 e0       	ldi	r19, 0x00	; 0
     f1e:	81 e0       	ldi	r24, 0x01	; 1
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	02 2e       	mov	r0, r18
     f24:	02 c0       	rjmp	.+4      	; 0xf2a <Dio_SetPinMode+0x3e4>
     f26:	88 0f       	add	r24, r24
     f28:	99 1f       	adc	r25, r25
     f2a:	0a 94       	dec	r0
     f2c:	e2 f7       	brpl	.-8      	; 0xf26 <Dio_SetPinMode+0x3e0>
     f2e:	80 95       	com	r24
     f30:	84 23       	and	r24, r20
     f32:	8c 93       	st	X, r24
     f34:	2c c0       	rjmp	.+88     	; 0xf8e <Dio_SetPinMode+0x448>
                break;
            case DIO_MODE_INPUT_PULLUP:
                CLR_BIT(DDRD, pin);
     f36:	a1 e3       	ldi	r26, 0x31	; 49
     f38:	b0 e0       	ldi	r27, 0x00	; 0
     f3a:	e1 e3       	ldi	r30, 0x31	; 49
     f3c:	f0 e0       	ldi	r31, 0x00	; 0
     f3e:	80 81       	ld	r24, Z
     f40:	48 2f       	mov	r20, r24
     f42:	8b 81       	ldd	r24, Y+3	; 0x03
     f44:	28 2f       	mov	r18, r24
     f46:	30 e0       	ldi	r19, 0x00	; 0
     f48:	81 e0       	ldi	r24, 0x01	; 1
     f4a:	90 e0       	ldi	r25, 0x00	; 0
     f4c:	02 c0       	rjmp	.+4      	; 0xf52 <Dio_SetPinMode+0x40c>
     f4e:	88 0f       	add	r24, r24
     f50:	99 1f       	adc	r25, r25
     f52:	2a 95       	dec	r18
     f54:	e2 f7       	brpl	.-8      	; 0xf4e <Dio_SetPinMode+0x408>
     f56:	80 95       	com	r24
     f58:	84 23       	and	r24, r20
     f5a:	8c 93       	st	X, r24
                SET_BIT(PORTD, pin);
     f5c:	a2 e3       	ldi	r26, 0x32	; 50
     f5e:	b0 e0       	ldi	r27, 0x00	; 0
     f60:	e2 e3       	ldi	r30, 0x32	; 50
     f62:	f0 e0       	ldi	r31, 0x00	; 0
     f64:	80 81       	ld	r24, Z
     f66:	48 2f       	mov	r20, r24
     f68:	8b 81       	ldd	r24, Y+3	; 0x03
     f6a:	28 2f       	mov	r18, r24
     f6c:	30 e0       	ldi	r19, 0x00	; 0
     f6e:	81 e0       	ldi	r24, 0x01	; 1
     f70:	90 e0       	ldi	r25, 0x00	; 0
     f72:	02 2e       	mov	r0, r18
     f74:	02 c0       	rjmp	.+4      	; 0xf7a <Dio_SetPinMode+0x434>
     f76:	88 0f       	add	r24, r24
     f78:	99 1f       	adc	r25, r25
     f7a:	0a 94       	dec	r0
     f7c:	e2 f7       	brpl	.-8      	; 0xf76 <Dio_SetPinMode+0x430>
     f7e:	84 2b       	or	r24, r20
     f80:	8c 93       	st	X, r24
     f82:	05 c0       	rjmp	.+10     	; 0xf8e <Dio_SetPinMode+0x448>
                break;
            default:
                retVal = E_NOT_OK;
     f84:	81 e0       	ldi	r24, 0x01	; 1
     f86:	89 83       	std	Y+1, r24	; 0x01
     f88:	02 c0       	rjmp	.+4      	; 0xf8e <Dio_SetPinMode+0x448>
                break;
            }
            break;
        default:
            retVal = E_NOT_OK;
     f8a:	81 e0       	ldi	r24, 0x01	; 1
     f8c:	89 83       	std	Y+1, r24	; 0x01
            break;
        }
    }
    return retVal;
     f8e:	89 81       	ldd	r24, Y+1	; 0x01
}
     f90:	2e 96       	adiw	r28, 0x0e	; 14
     f92:	0f b6       	in	r0, 0x3f	; 63
     f94:	f8 94       	cli
     f96:	de bf       	out	0x3e, r29	; 62
     f98:	0f be       	out	0x3f, r0	; 63
     f9a:	cd bf       	out	0x3d, r28	; 61
     f9c:	cf 91       	pop	r28
     f9e:	df 91       	pop	r29
     fa0:	08 95       	ret

00000fa2 <Dio_SetPinLevel>:

StdReturnType Dio_SetPinLevel(Dio_PortType port, Dio_PinType pin, Dio_LevelType level)
{
     fa2:	df 93       	push	r29
     fa4:	cf 93       	push	r28
     fa6:	00 d0       	rcall	.+0      	; 0xfa8 <Dio_SetPinLevel+0x6>
     fa8:	00 d0       	rcall	.+0      	; 0xfaa <Dio_SetPinLevel+0x8>
     faa:	00 d0       	rcall	.+0      	; 0xfac <Dio_SetPinLevel+0xa>
     fac:	cd b7       	in	r28, 0x3d	; 61
     fae:	de b7       	in	r29, 0x3e	; 62
     fb0:	8a 83       	std	Y+2, r24	; 0x02
     fb2:	6b 83       	std	Y+3, r22	; 0x03
     fb4:	4c 83       	std	Y+4, r20	; 0x04
    StdReturnType retVal = E_OK;
     fb6:	19 82       	std	Y+1, r1	; 0x01
    if (pin > DIO_PIN7)
     fb8:	8b 81       	ldd	r24, Y+3	; 0x03
     fba:	88 30       	cpi	r24, 0x08	; 8
     fbc:	18 f0       	brcs	.+6      	; 0xfc4 <Dio_SetPinLevel+0x22>
    {
        retVal = E_NOT_OK;
     fbe:	81 e0       	ldi	r24, 0x01	; 1
     fc0:	89 83       	std	Y+1, r24	; 0x01
     fc2:	ec c0       	rjmp	.+472    	; 0x119c <Dio_SetPinLevel+0x1fa>
    }
    else
    {
        switch (port)
     fc4:	8a 81       	ldd	r24, Y+2	; 0x02
     fc6:	28 2f       	mov	r18, r24
     fc8:	30 e0       	ldi	r19, 0x00	; 0
     fca:	3e 83       	std	Y+6, r19	; 0x06
     fcc:	2d 83       	std	Y+5, r18	; 0x05
     fce:	8d 81       	ldd	r24, Y+5	; 0x05
     fd0:	9e 81       	ldd	r25, Y+6	; 0x06
     fd2:	81 30       	cpi	r24, 0x01	; 1
     fd4:	91 05       	cpc	r25, r1
     fd6:	09 f4       	brne	.+2      	; 0xfda <Dio_SetPinLevel+0x38>
     fd8:	49 c0       	rjmp	.+146    	; 0x106c <Dio_SetPinLevel+0xca>
     fda:	2d 81       	ldd	r18, Y+5	; 0x05
     fdc:	3e 81       	ldd	r19, Y+6	; 0x06
     fde:	22 30       	cpi	r18, 0x02	; 2
     fe0:	31 05       	cpc	r19, r1
     fe2:	2c f4       	brge	.+10     	; 0xfee <Dio_SetPinLevel+0x4c>
     fe4:	8d 81       	ldd	r24, Y+5	; 0x05
     fe6:	9e 81       	ldd	r25, Y+6	; 0x06
     fe8:	00 97       	sbiw	r24, 0x00	; 0
     fea:	71 f0       	breq	.+28     	; 0x1008 <Dio_SetPinLevel+0x66>
     fec:	d5 c0       	rjmp	.+426    	; 0x1198 <Dio_SetPinLevel+0x1f6>
     fee:	2d 81       	ldd	r18, Y+5	; 0x05
     ff0:	3e 81       	ldd	r19, Y+6	; 0x06
     ff2:	22 30       	cpi	r18, 0x02	; 2
     ff4:	31 05       	cpc	r19, r1
     ff6:	09 f4       	brne	.+2      	; 0xffa <Dio_SetPinLevel+0x58>
     ff8:	6b c0       	rjmp	.+214    	; 0x10d0 <Dio_SetPinLevel+0x12e>
     ffa:	8d 81       	ldd	r24, Y+5	; 0x05
     ffc:	9e 81       	ldd	r25, Y+6	; 0x06
     ffe:	83 30       	cpi	r24, 0x03	; 3
    1000:	91 05       	cpc	r25, r1
    1002:	09 f4       	brne	.+2      	; 0x1006 <Dio_SetPinLevel+0x64>
    1004:	97 c0       	rjmp	.+302    	; 0x1134 <Dio_SetPinLevel+0x192>
    1006:	c8 c0       	rjmp	.+400    	; 0x1198 <Dio_SetPinLevel+0x1f6>
        {
        case DIO_PORTA:
            if (DIO_HIGH == level) 
    1008:	8c 81       	ldd	r24, Y+4	; 0x04
    100a:	81 30       	cpi	r24, 0x01	; 1
    100c:	a1 f4       	brne	.+40     	; 0x1036 <Dio_SetPinLevel+0x94>
            {
                SET_BIT(PORTA, pin);
    100e:	ab e3       	ldi	r26, 0x3B	; 59
    1010:	b0 e0       	ldi	r27, 0x00	; 0
    1012:	eb e3       	ldi	r30, 0x3B	; 59
    1014:	f0 e0       	ldi	r31, 0x00	; 0
    1016:	80 81       	ld	r24, Z
    1018:	48 2f       	mov	r20, r24
    101a:	8b 81       	ldd	r24, Y+3	; 0x03
    101c:	28 2f       	mov	r18, r24
    101e:	30 e0       	ldi	r19, 0x00	; 0
    1020:	81 e0       	ldi	r24, 0x01	; 1
    1022:	90 e0       	ldi	r25, 0x00	; 0
    1024:	02 2e       	mov	r0, r18
    1026:	02 c0       	rjmp	.+4      	; 0x102c <Dio_SetPinLevel+0x8a>
    1028:	88 0f       	add	r24, r24
    102a:	99 1f       	adc	r25, r25
    102c:	0a 94       	dec	r0
    102e:	e2 f7       	brpl	.-8      	; 0x1028 <Dio_SetPinLevel+0x86>
    1030:	84 2b       	or	r24, r20
    1032:	8c 93       	st	X, r24
    1034:	b3 c0       	rjmp	.+358    	; 0x119c <Dio_SetPinLevel+0x1fa>
            }
            else if (DIO_LOW == level)
    1036:	8c 81       	ldd	r24, Y+4	; 0x04
    1038:	88 23       	and	r24, r24
    103a:	a9 f4       	brne	.+42     	; 0x1066 <Dio_SetPinLevel+0xc4>
            {
                CLR_BIT(PORTA, pin);
    103c:	ab e3       	ldi	r26, 0x3B	; 59
    103e:	b0 e0       	ldi	r27, 0x00	; 0
    1040:	eb e3       	ldi	r30, 0x3B	; 59
    1042:	f0 e0       	ldi	r31, 0x00	; 0
    1044:	80 81       	ld	r24, Z
    1046:	48 2f       	mov	r20, r24
    1048:	8b 81       	ldd	r24, Y+3	; 0x03
    104a:	28 2f       	mov	r18, r24
    104c:	30 e0       	ldi	r19, 0x00	; 0
    104e:	81 e0       	ldi	r24, 0x01	; 1
    1050:	90 e0       	ldi	r25, 0x00	; 0
    1052:	02 2e       	mov	r0, r18
    1054:	02 c0       	rjmp	.+4      	; 0x105a <Dio_SetPinLevel+0xb8>
    1056:	88 0f       	add	r24, r24
    1058:	99 1f       	adc	r25, r25
    105a:	0a 94       	dec	r0
    105c:	e2 f7       	brpl	.-8      	; 0x1056 <Dio_SetPinLevel+0xb4>
    105e:	80 95       	com	r24
    1060:	84 23       	and	r24, r20
    1062:	8c 93       	st	X, r24
    1064:	9b c0       	rjmp	.+310    	; 0x119c <Dio_SetPinLevel+0x1fa>
            }
            else
            {
                retVal = E_NOT_OK;
    1066:	81 e0       	ldi	r24, 0x01	; 1
    1068:	89 83       	std	Y+1, r24	; 0x01
    106a:	98 c0       	rjmp	.+304    	; 0x119c <Dio_SetPinLevel+0x1fa>
            }
            break;
        case DIO_PORTB:
            if (DIO_HIGH == level) 
    106c:	8c 81       	ldd	r24, Y+4	; 0x04
    106e:	81 30       	cpi	r24, 0x01	; 1
    1070:	a1 f4       	brne	.+40     	; 0x109a <Dio_SetPinLevel+0xf8>
            {
                SET_BIT(PORTB, pin);
    1072:	a8 e3       	ldi	r26, 0x38	; 56
    1074:	b0 e0       	ldi	r27, 0x00	; 0
    1076:	e8 e3       	ldi	r30, 0x38	; 56
    1078:	f0 e0       	ldi	r31, 0x00	; 0
    107a:	80 81       	ld	r24, Z
    107c:	48 2f       	mov	r20, r24
    107e:	8b 81       	ldd	r24, Y+3	; 0x03
    1080:	28 2f       	mov	r18, r24
    1082:	30 e0       	ldi	r19, 0x00	; 0
    1084:	81 e0       	ldi	r24, 0x01	; 1
    1086:	90 e0       	ldi	r25, 0x00	; 0
    1088:	02 2e       	mov	r0, r18
    108a:	02 c0       	rjmp	.+4      	; 0x1090 <Dio_SetPinLevel+0xee>
    108c:	88 0f       	add	r24, r24
    108e:	99 1f       	adc	r25, r25
    1090:	0a 94       	dec	r0
    1092:	e2 f7       	brpl	.-8      	; 0x108c <Dio_SetPinLevel+0xea>
    1094:	84 2b       	or	r24, r20
    1096:	8c 93       	st	X, r24
    1098:	81 c0       	rjmp	.+258    	; 0x119c <Dio_SetPinLevel+0x1fa>
            }
            else if (DIO_LOW == level)
    109a:	8c 81       	ldd	r24, Y+4	; 0x04
    109c:	88 23       	and	r24, r24
    109e:	a9 f4       	brne	.+42     	; 0x10ca <Dio_SetPinLevel+0x128>
            {
                CLR_BIT(PORTB, pin);
    10a0:	a8 e3       	ldi	r26, 0x38	; 56
    10a2:	b0 e0       	ldi	r27, 0x00	; 0
    10a4:	e8 e3       	ldi	r30, 0x38	; 56
    10a6:	f0 e0       	ldi	r31, 0x00	; 0
    10a8:	80 81       	ld	r24, Z
    10aa:	48 2f       	mov	r20, r24
    10ac:	8b 81       	ldd	r24, Y+3	; 0x03
    10ae:	28 2f       	mov	r18, r24
    10b0:	30 e0       	ldi	r19, 0x00	; 0
    10b2:	81 e0       	ldi	r24, 0x01	; 1
    10b4:	90 e0       	ldi	r25, 0x00	; 0
    10b6:	02 2e       	mov	r0, r18
    10b8:	02 c0       	rjmp	.+4      	; 0x10be <Dio_SetPinLevel+0x11c>
    10ba:	88 0f       	add	r24, r24
    10bc:	99 1f       	adc	r25, r25
    10be:	0a 94       	dec	r0
    10c0:	e2 f7       	brpl	.-8      	; 0x10ba <Dio_SetPinLevel+0x118>
    10c2:	80 95       	com	r24
    10c4:	84 23       	and	r24, r20
    10c6:	8c 93       	st	X, r24
    10c8:	69 c0       	rjmp	.+210    	; 0x119c <Dio_SetPinLevel+0x1fa>
            }
            else
            {
                retVal = E_NOT_OK;
    10ca:	81 e0       	ldi	r24, 0x01	; 1
    10cc:	89 83       	std	Y+1, r24	; 0x01
    10ce:	66 c0       	rjmp	.+204    	; 0x119c <Dio_SetPinLevel+0x1fa>
            }
            break;
        case DIO_PORTC:
            if (DIO_HIGH == level) 
    10d0:	8c 81       	ldd	r24, Y+4	; 0x04
    10d2:	81 30       	cpi	r24, 0x01	; 1
    10d4:	a1 f4       	brne	.+40     	; 0x10fe <Dio_SetPinLevel+0x15c>
            {
                SET_BIT(PORTC, pin);
    10d6:	a5 e3       	ldi	r26, 0x35	; 53
    10d8:	b0 e0       	ldi	r27, 0x00	; 0
    10da:	e5 e3       	ldi	r30, 0x35	; 53
    10dc:	f0 e0       	ldi	r31, 0x00	; 0
    10de:	80 81       	ld	r24, Z
    10e0:	48 2f       	mov	r20, r24
    10e2:	8b 81       	ldd	r24, Y+3	; 0x03
    10e4:	28 2f       	mov	r18, r24
    10e6:	30 e0       	ldi	r19, 0x00	; 0
    10e8:	81 e0       	ldi	r24, 0x01	; 1
    10ea:	90 e0       	ldi	r25, 0x00	; 0
    10ec:	02 2e       	mov	r0, r18
    10ee:	02 c0       	rjmp	.+4      	; 0x10f4 <Dio_SetPinLevel+0x152>
    10f0:	88 0f       	add	r24, r24
    10f2:	99 1f       	adc	r25, r25
    10f4:	0a 94       	dec	r0
    10f6:	e2 f7       	brpl	.-8      	; 0x10f0 <Dio_SetPinLevel+0x14e>
    10f8:	84 2b       	or	r24, r20
    10fa:	8c 93       	st	X, r24
    10fc:	4f c0       	rjmp	.+158    	; 0x119c <Dio_SetPinLevel+0x1fa>
            }
            else if (DIO_LOW == level)
    10fe:	8c 81       	ldd	r24, Y+4	; 0x04
    1100:	88 23       	and	r24, r24
    1102:	a9 f4       	brne	.+42     	; 0x112e <Dio_SetPinLevel+0x18c>
            {
                CLR_BIT(PORTC, pin);
    1104:	a5 e3       	ldi	r26, 0x35	; 53
    1106:	b0 e0       	ldi	r27, 0x00	; 0
    1108:	e5 e3       	ldi	r30, 0x35	; 53
    110a:	f0 e0       	ldi	r31, 0x00	; 0
    110c:	80 81       	ld	r24, Z
    110e:	48 2f       	mov	r20, r24
    1110:	8b 81       	ldd	r24, Y+3	; 0x03
    1112:	28 2f       	mov	r18, r24
    1114:	30 e0       	ldi	r19, 0x00	; 0
    1116:	81 e0       	ldi	r24, 0x01	; 1
    1118:	90 e0       	ldi	r25, 0x00	; 0
    111a:	02 2e       	mov	r0, r18
    111c:	02 c0       	rjmp	.+4      	; 0x1122 <Dio_SetPinLevel+0x180>
    111e:	88 0f       	add	r24, r24
    1120:	99 1f       	adc	r25, r25
    1122:	0a 94       	dec	r0
    1124:	e2 f7       	brpl	.-8      	; 0x111e <Dio_SetPinLevel+0x17c>
    1126:	80 95       	com	r24
    1128:	84 23       	and	r24, r20
    112a:	8c 93       	st	X, r24
    112c:	37 c0       	rjmp	.+110    	; 0x119c <Dio_SetPinLevel+0x1fa>
            }
            else
            {
                retVal = E_NOT_OK;
    112e:	81 e0       	ldi	r24, 0x01	; 1
    1130:	89 83       	std	Y+1, r24	; 0x01
    1132:	34 c0       	rjmp	.+104    	; 0x119c <Dio_SetPinLevel+0x1fa>
            }
            break;
        case DIO_PORTD:
            if (DIO_HIGH == level) 
    1134:	8c 81       	ldd	r24, Y+4	; 0x04
    1136:	81 30       	cpi	r24, 0x01	; 1
    1138:	a1 f4       	brne	.+40     	; 0x1162 <Dio_SetPinLevel+0x1c0>
            {
                SET_BIT(PORTD, pin);
    113a:	a2 e3       	ldi	r26, 0x32	; 50
    113c:	b0 e0       	ldi	r27, 0x00	; 0
    113e:	e2 e3       	ldi	r30, 0x32	; 50
    1140:	f0 e0       	ldi	r31, 0x00	; 0
    1142:	80 81       	ld	r24, Z
    1144:	48 2f       	mov	r20, r24
    1146:	8b 81       	ldd	r24, Y+3	; 0x03
    1148:	28 2f       	mov	r18, r24
    114a:	30 e0       	ldi	r19, 0x00	; 0
    114c:	81 e0       	ldi	r24, 0x01	; 1
    114e:	90 e0       	ldi	r25, 0x00	; 0
    1150:	02 2e       	mov	r0, r18
    1152:	02 c0       	rjmp	.+4      	; 0x1158 <Dio_SetPinLevel+0x1b6>
    1154:	88 0f       	add	r24, r24
    1156:	99 1f       	adc	r25, r25
    1158:	0a 94       	dec	r0
    115a:	e2 f7       	brpl	.-8      	; 0x1154 <Dio_SetPinLevel+0x1b2>
    115c:	84 2b       	or	r24, r20
    115e:	8c 93       	st	X, r24
    1160:	1d c0       	rjmp	.+58     	; 0x119c <Dio_SetPinLevel+0x1fa>
            }
            else if (DIO_LOW == level)
    1162:	8c 81       	ldd	r24, Y+4	; 0x04
    1164:	88 23       	and	r24, r24
    1166:	a9 f4       	brne	.+42     	; 0x1192 <Dio_SetPinLevel+0x1f0>
            {
                CLR_BIT(PORTD, pin);
    1168:	a2 e3       	ldi	r26, 0x32	; 50
    116a:	b0 e0       	ldi	r27, 0x00	; 0
    116c:	e2 e3       	ldi	r30, 0x32	; 50
    116e:	f0 e0       	ldi	r31, 0x00	; 0
    1170:	80 81       	ld	r24, Z
    1172:	48 2f       	mov	r20, r24
    1174:	8b 81       	ldd	r24, Y+3	; 0x03
    1176:	28 2f       	mov	r18, r24
    1178:	30 e0       	ldi	r19, 0x00	; 0
    117a:	81 e0       	ldi	r24, 0x01	; 1
    117c:	90 e0       	ldi	r25, 0x00	; 0
    117e:	02 2e       	mov	r0, r18
    1180:	02 c0       	rjmp	.+4      	; 0x1186 <Dio_SetPinLevel+0x1e4>
    1182:	88 0f       	add	r24, r24
    1184:	99 1f       	adc	r25, r25
    1186:	0a 94       	dec	r0
    1188:	e2 f7       	brpl	.-8      	; 0x1182 <Dio_SetPinLevel+0x1e0>
    118a:	80 95       	com	r24
    118c:	84 23       	and	r24, r20
    118e:	8c 93       	st	X, r24
    1190:	05 c0       	rjmp	.+10     	; 0x119c <Dio_SetPinLevel+0x1fa>
            }
            else
            {
                retVal = E_NOT_OK;
    1192:	81 e0       	ldi	r24, 0x01	; 1
    1194:	89 83       	std	Y+1, r24	; 0x01
    1196:	02 c0       	rjmp	.+4      	; 0x119c <Dio_SetPinLevel+0x1fa>
            }
            break;
        default:
            retVal = E_NOT_OK;
    1198:	81 e0       	ldi	r24, 0x01	; 1
    119a:	89 83       	std	Y+1, r24	; 0x01
            break;
        }
    }
    return retVal;
    119c:	89 81       	ldd	r24, Y+1	; 0x01
}
    119e:	26 96       	adiw	r28, 0x06	; 6
    11a0:	0f b6       	in	r0, 0x3f	; 63
    11a2:	f8 94       	cli
    11a4:	de bf       	out	0x3e, r29	; 62
    11a6:	0f be       	out	0x3f, r0	; 63
    11a8:	cd bf       	out	0x3d, r28	; 61
    11aa:	cf 91       	pop	r28
    11ac:	df 91       	pop	r29
    11ae:	08 95       	ret

000011b0 <Dio_FlipPinLevel>:

Dio_LevelType Dio_FlipPinLevel(Dio_PortType port, Dio_PinType pin)
{
    11b0:	df 93       	push	r29
    11b2:	cf 93       	push	r28
    11b4:	00 d0       	rcall	.+0      	; 0x11b6 <Dio_FlipPinLevel+0x6>
    11b6:	00 d0       	rcall	.+0      	; 0x11b8 <Dio_FlipPinLevel+0x8>
    11b8:	0f 92       	push	r0
    11ba:	cd b7       	in	r28, 0x3d	; 61
    11bc:	de b7       	in	r29, 0x3e	; 62
    11be:	8a 83       	std	Y+2, r24	; 0x02
    11c0:	6b 83       	std	Y+3, r22	; 0x03
    Dio_LevelType level = DIO_LOW;
    11c2:	19 82       	std	Y+1, r1	; 0x01
    switch (port)
    11c4:	8a 81       	ldd	r24, Y+2	; 0x02
    11c6:	28 2f       	mov	r18, r24
    11c8:	30 e0       	ldi	r19, 0x00	; 0
    11ca:	3d 83       	std	Y+5, r19	; 0x05
    11cc:	2c 83       	std	Y+4, r18	; 0x04
    11ce:	4c 81       	ldd	r20, Y+4	; 0x04
    11d0:	5d 81       	ldd	r21, Y+5	; 0x05
    11d2:	41 30       	cpi	r20, 0x01	; 1
    11d4:	51 05       	cpc	r21, r1
    11d6:	09 f4       	brne	.+2      	; 0x11da <Dio_FlipPinLevel+0x2a>
    11d8:	3c c0       	rjmp	.+120    	; 0x1252 <Dio_FlipPinLevel+0xa2>
    11da:	8c 81       	ldd	r24, Y+4	; 0x04
    11dc:	9d 81       	ldd	r25, Y+5	; 0x05
    11de:	82 30       	cpi	r24, 0x02	; 2
    11e0:	91 05       	cpc	r25, r1
    11e2:	34 f4       	brge	.+12     	; 0x11f0 <Dio_FlipPinLevel+0x40>
    11e4:	2c 81       	ldd	r18, Y+4	; 0x04
    11e6:	3d 81       	ldd	r19, Y+5	; 0x05
    11e8:	21 15       	cp	r18, r1
    11ea:	31 05       	cpc	r19, r1
    11ec:	71 f0       	breq	.+28     	; 0x120a <Dio_FlipPinLevel+0x5a>
    11ee:	9c c0       	rjmp	.+312    	; 0x1328 <Dio_FlipPinLevel+0x178>
    11f0:	4c 81       	ldd	r20, Y+4	; 0x04
    11f2:	5d 81       	ldd	r21, Y+5	; 0x05
    11f4:	42 30       	cpi	r20, 0x02	; 2
    11f6:	51 05       	cpc	r21, r1
    11f8:	09 f4       	brne	.+2      	; 0x11fc <Dio_FlipPinLevel+0x4c>
    11fa:	4f c0       	rjmp	.+158    	; 0x129a <Dio_FlipPinLevel+0xea>
    11fc:	8c 81       	ldd	r24, Y+4	; 0x04
    11fe:	9d 81       	ldd	r25, Y+5	; 0x05
    1200:	83 30       	cpi	r24, 0x03	; 3
    1202:	91 05       	cpc	r25, r1
    1204:	09 f4       	brne	.+2      	; 0x1208 <Dio_FlipPinLevel+0x58>
    1206:	6d c0       	rjmp	.+218    	; 0x12e2 <Dio_FlipPinLevel+0x132>
    1208:	8f c0       	rjmp	.+286    	; 0x1328 <Dio_FlipPinLevel+0x178>
    {
    case DIO_PORTA:
        TOG_BIT(PORTA, pin);
    120a:	ab e3       	ldi	r26, 0x3B	; 59
    120c:	b0 e0       	ldi	r27, 0x00	; 0
    120e:	eb e3       	ldi	r30, 0x3B	; 59
    1210:	f0 e0       	ldi	r31, 0x00	; 0
    1212:	80 81       	ld	r24, Z
    1214:	48 2f       	mov	r20, r24
    1216:	8b 81       	ldd	r24, Y+3	; 0x03
    1218:	28 2f       	mov	r18, r24
    121a:	30 e0       	ldi	r19, 0x00	; 0
    121c:	81 e0       	ldi	r24, 0x01	; 1
    121e:	90 e0       	ldi	r25, 0x00	; 0
    1220:	02 c0       	rjmp	.+4      	; 0x1226 <Dio_FlipPinLevel+0x76>
    1222:	88 0f       	add	r24, r24
    1224:	99 1f       	adc	r25, r25
    1226:	2a 95       	dec	r18
    1228:	e2 f7       	brpl	.-8      	; 0x1222 <Dio_FlipPinLevel+0x72>
    122a:	84 27       	eor	r24, r20
    122c:	8c 93       	st	X, r24
        level = GET_BIT(PINA, pin);
    122e:	e9 e3       	ldi	r30, 0x39	; 57
    1230:	f0 e0       	ldi	r31, 0x00	; 0
    1232:	80 81       	ld	r24, Z
    1234:	28 2f       	mov	r18, r24
    1236:	30 e0       	ldi	r19, 0x00	; 0
    1238:	8b 81       	ldd	r24, Y+3	; 0x03
    123a:	88 2f       	mov	r24, r24
    123c:	90 e0       	ldi	r25, 0x00	; 0
    123e:	a9 01       	movw	r20, r18
    1240:	02 c0       	rjmp	.+4      	; 0x1246 <Dio_FlipPinLevel+0x96>
    1242:	55 95       	asr	r21
    1244:	47 95       	ror	r20
    1246:	8a 95       	dec	r24
    1248:	e2 f7       	brpl	.-8      	; 0x1242 <Dio_FlipPinLevel+0x92>
    124a:	ca 01       	movw	r24, r20
    124c:	81 70       	andi	r24, 0x01	; 1
    124e:	89 83       	std	Y+1, r24	; 0x01
    1250:	6b c0       	rjmp	.+214    	; 0x1328 <Dio_FlipPinLevel+0x178>
        break;
    case DIO_PORTB:
        TOG_BIT(PORTB, pin);
    1252:	a8 e3       	ldi	r26, 0x38	; 56
    1254:	b0 e0       	ldi	r27, 0x00	; 0
    1256:	e8 e3       	ldi	r30, 0x38	; 56
    1258:	f0 e0       	ldi	r31, 0x00	; 0
    125a:	80 81       	ld	r24, Z
    125c:	48 2f       	mov	r20, r24
    125e:	8b 81       	ldd	r24, Y+3	; 0x03
    1260:	28 2f       	mov	r18, r24
    1262:	30 e0       	ldi	r19, 0x00	; 0
    1264:	81 e0       	ldi	r24, 0x01	; 1
    1266:	90 e0       	ldi	r25, 0x00	; 0
    1268:	02 c0       	rjmp	.+4      	; 0x126e <Dio_FlipPinLevel+0xbe>
    126a:	88 0f       	add	r24, r24
    126c:	99 1f       	adc	r25, r25
    126e:	2a 95       	dec	r18
    1270:	e2 f7       	brpl	.-8      	; 0x126a <Dio_FlipPinLevel+0xba>
    1272:	84 27       	eor	r24, r20
    1274:	8c 93       	st	X, r24
        level = GET_BIT(PINB, pin);
    1276:	e6 e3       	ldi	r30, 0x36	; 54
    1278:	f0 e0       	ldi	r31, 0x00	; 0
    127a:	80 81       	ld	r24, Z
    127c:	28 2f       	mov	r18, r24
    127e:	30 e0       	ldi	r19, 0x00	; 0
    1280:	8b 81       	ldd	r24, Y+3	; 0x03
    1282:	88 2f       	mov	r24, r24
    1284:	90 e0       	ldi	r25, 0x00	; 0
    1286:	a9 01       	movw	r20, r18
    1288:	02 c0       	rjmp	.+4      	; 0x128e <Dio_FlipPinLevel+0xde>
    128a:	55 95       	asr	r21
    128c:	47 95       	ror	r20
    128e:	8a 95       	dec	r24
    1290:	e2 f7       	brpl	.-8      	; 0x128a <Dio_FlipPinLevel+0xda>
    1292:	ca 01       	movw	r24, r20
    1294:	81 70       	andi	r24, 0x01	; 1
    1296:	89 83       	std	Y+1, r24	; 0x01
    1298:	47 c0       	rjmp	.+142    	; 0x1328 <Dio_FlipPinLevel+0x178>
        break;
    case DIO_PORTC:
        TOG_BIT(PORTC, pin);
    129a:	a5 e3       	ldi	r26, 0x35	; 53
    129c:	b0 e0       	ldi	r27, 0x00	; 0
    129e:	e5 e3       	ldi	r30, 0x35	; 53
    12a0:	f0 e0       	ldi	r31, 0x00	; 0
    12a2:	80 81       	ld	r24, Z
    12a4:	48 2f       	mov	r20, r24
    12a6:	8b 81       	ldd	r24, Y+3	; 0x03
    12a8:	28 2f       	mov	r18, r24
    12aa:	30 e0       	ldi	r19, 0x00	; 0
    12ac:	81 e0       	ldi	r24, 0x01	; 1
    12ae:	90 e0       	ldi	r25, 0x00	; 0
    12b0:	02 c0       	rjmp	.+4      	; 0x12b6 <Dio_FlipPinLevel+0x106>
    12b2:	88 0f       	add	r24, r24
    12b4:	99 1f       	adc	r25, r25
    12b6:	2a 95       	dec	r18
    12b8:	e2 f7       	brpl	.-8      	; 0x12b2 <Dio_FlipPinLevel+0x102>
    12ba:	84 27       	eor	r24, r20
    12bc:	8c 93       	st	X, r24
        level = GET_BIT(PINC, pin);
    12be:	e3 e3       	ldi	r30, 0x33	; 51
    12c0:	f0 e0       	ldi	r31, 0x00	; 0
    12c2:	80 81       	ld	r24, Z
    12c4:	28 2f       	mov	r18, r24
    12c6:	30 e0       	ldi	r19, 0x00	; 0
    12c8:	8b 81       	ldd	r24, Y+3	; 0x03
    12ca:	88 2f       	mov	r24, r24
    12cc:	90 e0       	ldi	r25, 0x00	; 0
    12ce:	a9 01       	movw	r20, r18
    12d0:	02 c0       	rjmp	.+4      	; 0x12d6 <Dio_FlipPinLevel+0x126>
    12d2:	55 95       	asr	r21
    12d4:	47 95       	ror	r20
    12d6:	8a 95       	dec	r24
    12d8:	e2 f7       	brpl	.-8      	; 0x12d2 <Dio_FlipPinLevel+0x122>
    12da:	ca 01       	movw	r24, r20
    12dc:	81 70       	andi	r24, 0x01	; 1
    12de:	89 83       	std	Y+1, r24	; 0x01
    12e0:	23 c0       	rjmp	.+70     	; 0x1328 <Dio_FlipPinLevel+0x178>
        break;
    case DIO_PORTD:
        TOG_BIT(PORTD, pin);
    12e2:	a2 e3       	ldi	r26, 0x32	; 50
    12e4:	b0 e0       	ldi	r27, 0x00	; 0
    12e6:	e2 e3       	ldi	r30, 0x32	; 50
    12e8:	f0 e0       	ldi	r31, 0x00	; 0
    12ea:	80 81       	ld	r24, Z
    12ec:	48 2f       	mov	r20, r24
    12ee:	8b 81       	ldd	r24, Y+3	; 0x03
    12f0:	28 2f       	mov	r18, r24
    12f2:	30 e0       	ldi	r19, 0x00	; 0
    12f4:	81 e0       	ldi	r24, 0x01	; 1
    12f6:	90 e0       	ldi	r25, 0x00	; 0
    12f8:	02 c0       	rjmp	.+4      	; 0x12fe <Dio_FlipPinLevel+0x14e>
    12fa:	88 0f       	add	r24, r24
    12fc:	99 1f       	adc	r25, r25
    12fe:	2a 95       	dec	r18
    1300:	e2 f7       	brpl	.-8      	; 0x12fa <Dio_FlipPinLevel+0x14a>
    1302:	84 27       	eor	r24, r20
    1304:	8c 93       	st	X, r24
        level = GET_BIT(PIND, pin);
    1306:	e0 e3       	ldi	r30, 0x30	; 48
    1308:	f0 e0       	ldi	r31, 0x00	; 0
    130a:	80 81       	ld	r24, Z
    130c:	28 2f       	mov	r18, r24
    130e:	30 e0       	ldi	r19, 0x00	; 0
    1310:	8b 81       	ldd	r24, Y+3	; 0x03
    1312:	88 2f       	mov	r24, r24
    1314:	90 e0       	ldi	r25, 0x00	; 0
    1316:	a9 01       	movw	r20, r18
    1318:	02 c0       	rjmp	.+4      	; 0x131e <Dio_FlipPinLevel+0x16e>
    131a:	55 95       	asr	r21
    131c:	47 95       	ror	r20
    131e:	8a 95       	dec	r24
    1320:	e2 f7       	brpl	.-8      	; 0x131a <Dio_FlipPinLevel+0x16a>
    1322:	ca 01       	movw	r24, r20
    1324:	81 70       	andi	r24, 0x01	; 1
    1326:	89 83       	std	Y+1, r24	; 0x01
        break;
    default:
        break;
    }
    return level;
    1328:	89 81       	ldd	r24, Y+1	; 0x01
}
    132a:	0f 90       	pop	r0
    132c:	0f 90       	pop	r0
    132e:	0f 90       	pop	r0
    1330:	0f 90       	pop	r0
    1332:	0f 90       	pop	r0
    1334:	cf 91       	pop	r28
    1336:	df 91       	pop	r29
    1338:	08 95       	ret

0000133a <Dio_ReadPinLevel>:

Dio_LevelType Dio_ReadPinLevel(Dio_PortType port, Dio_PinType pin)
{
    133a:	df 93       	push	r29
    133c:	cf 93       	push	r28
    133e:	00 d0       	rcall	.+0      	; 0x1340 <Dio_ReadPinLevel+0x6>
    1340:	00 d0       	rcall	.+0      	; 0x1342 <Dio_ReadPinLevel+0x8>
    1342:	0f 92       	push	r0
    1344:	cd b7       	in	r28, 0x3d	; 61
    1346:	de b7       	in	r29, 0x3e	; 62
    1348:	8a 83       	std	Y+2, r24	; 0x02
    134a:	6b 83       	std	Y+3, r22	; 0x03
    Dio_LevelType level = DIO_LOW;
    134c:	19 82       	std	Y+1, r1	; 0x01
    switch (port)
    134e:	8a 81       	ldd	r24, Y+2	; 0x02
    1350:	28 2f       	mov	r18, r24
    1352:	30 e0       	ldi	r19, 0x00	; 0
    1354:	3d 83       	std	Y+5, r19	; 0x05
    1356:	2c 83       	std	Y+4, r18	; 0x04
    1358:	4c 81       	ldd	r20, Y+4	; 0x04
    135a:	5d 81       	ldd	r21, Y+5	; 0x05
    135c:	41 30       	cpi	r20, 0x01	; 1
    135e:	51 05       	cpc	r21, r1
    1360:	41 f1       	breq	.+80     	; 0x13b2 <Dio_ReadPinLevel+0x78>
    1362:	8c 81       	ldd	r24, Y+4	; 0x04
    1364:	9d 81       	ldd	r25, Y+5	; 0x05
    1366:	82 30       	cpi	r24, 0x02	; 2
    1368:	91 05       	cpc	r25, r1
    136a:	34 f4       	brge	.+12     	; 0x1378 <Dio_ReadPinLevel+0x3e>
    136c:	2c 81       	ldd	r18, Y+4	; 0x04
    136e:	3d 81       	ldd	r19, Y+5	; 0x05
    1370:	21 15       	cp	r18, r1
    1372:	31 05       	cpc	r19, r1
    1374:	61 f0       	breq	.+24     	; 0x138e <Dio_ReadPinLevel+0x54>
    1376:	52 c0       	rjmp	.+164    	; 0x141c <Dio_ReadPinLevel+0xe2>
    1378:	4c 81       	ldd	r20, Y+4	; 0x04
    137a:	5d 81       	ldd	r21, Y+5	; 0x05
    137c:	42 30       	cpi	r20, 0x02	; 2
    137e:	51 05       	cpc	r21, r1
    1380:	51 f1       	breq	.+84     	; 0x13d6 <Dio_ReadPinLevel+0x9c>
    1382:	8c 81       	ldd	r24, Y+4	; 0x04
    1384:	9d 81       	ldd	r25, Y+5	; 0x05
    1386:	83 30       	cpi	r24, 0x03	; 3
    1388:	91 05       	cpc	r25, r1
    138a:	b9 f1       	breq	.+110    	; 0x13fa <Dio_ReadPinLevel+0xc0>
    138c:	47 c0       	rjmp	.+142    	; 0x141c <Dio_ReadPinLevel+0xe2>
    {
    case DIO_PORTA:
        level = GET_BIT(PINA, pin);
    138e:	e9 e3       	ldi	r30, 0x39	; 57
    1390:	f0 e0       	ldi	r31, 0x00	; 0
    1392:	80 81       	ld	r24, Z
    1394:	28 2f       	mov	r18, r24
    1396:	30 e0       	ldi	r19, 0x00	; 0
    1398:	8b 81       	ldd	r24, Y+3	; 0x03
    139a:	88 2f       	mov	r24, r24
    139c:	90 e0       	ldi	r25, 0x00	; 0
    139e:	a9 01       	movw	r20, r18
    13a0:	02 c0       	rjmp	.+4      	; 0x13a6 <Dio_ReadPinLevel+0x6c>
    13a2:	55 95       	asr	r21
    13a4:	47 95       	ror	r20
    13a6:	8a 95       	dec	r24
    13a8:	e2 f7       	brpl	.-8      	; 0x13a2 <Dio_ReadPinLevel+0x68>
    13aa:	ca 01       	movw	r24, r20
    13ac:	81 70       	andi	r24, 0x01	; 1
    13ae:	89 83       	std	Y+1, r24	; 0x01
    13b0:	35 c0       	rjmp	.+106    	; 0x141c <Dio_ReadPinLevel+0xe2>
        break;
    case DIO_PORTB:
        level = GET_BIT(PINB, pin);
    13b2:	e6 e3       	ldi	r30, 0x36	; 54
    13b4:	f0 e0       	ldi	r31, 0x00	; 0
    13b6:	80 81       	ld	r24, Z
    13b8:	28 2f       	mov	r18, r24
    13ba:	30 e0       	ldi	r19, 0x00	; 0
    13bc:	8b 81       	ldd	r24, Y+3	; 0x03
    13be:	88 2f       	mov	r24, r24
    13c0:	90 e0       	ldi	r25, 0x00	; 0
    13c2:	a9 01       	movw	r20, r18
    13c4:	02 c0       	rjmp	.+4      	; 0x13ca <Dio_ReadPinLevel+0x90>
    13c6:	55 95       	asr	r21
    13c8:	47 95       	ror	r20
    13ca:	8a 95       	dec	r24
    13cc:	e2 f7       	brpl	.-8      	; 0x13c6 <Dio_ReadPinLevel+0x8c>
    13ce:	ca 01       	movw	r24, r20
    13d0:	81 70       	andi	r24, 0x01	; 1
    13d2:	89 83       	std	Y+1, r24	; 0x01
    13d4:	23 c0       	rjmp	.+70     	; 0x141c <Dio_ReadPinLevel+0xe2>
        break;
    case DIO_PORTC:
        level = GET_BIT(PINC, pin);
    13d6:	e3 e3       	ldi	r30, 0x33	; 51
    13d8:	f0 e0       	ldi	r31, 0x00	; 0
    13da:	80 81       	ld	r24, Z
    13dc:	28 2f       	mov	r18, r24
    13de:	30 e0       	ldi	r19, 0x00	; 0
    13e0:	8b 81       	ldd	r24, Y+3	; 0x03
    13e2:	88 2f       	mov	r24, r24
    13e4:	90 e0       	ldi	r25, 0x00	; 0
    13e6:	a9 01       	movw	r20, r18
    13e8:	02 c0       	rjmp	.+4      	; 0x13ee <Dio_ReadPinLevel+0xb4>
    13ea:	55 95       	asr	r21
    13ec:	47 95       	ror	r20
    13ee:	8a 95       	dec	r24
    13f0:	e2 f7       	brpl	.-8      	; 0x13ea <Dio_ReadPinLevel+0xb0>
    13f2:	ca 01       	movw	r24, r20
    13f4:	81 70       	andi	r24, 0x01	; 1
    13f6:	89 83       	std	Y+1, r24	; 0x01
    13f8:	11 c0       	rjmp	.+34     	; 0x141c <Dio_ReadPinLevel+0xe2>
        break;
    case DIO_PORTD:
        level = GET_BIT(PIND, pin);
    13fa:	e0 e3       	ldi	r30, 0x30	; 48
    13fc:	f0 e0       	ldi	r31, 0x00	; 0
    13fe:	80 81       	ld	r24, Z
    1400:	28 2f       	mov	r18, r24
    1402:	30 e0       	ldi	r19, 0x00	; 0
    1404:	8b 81       	ldd	r24, Y+3	; 0x03
    1406:	88 2f       	mov	r24, r24
    1408:	90 e0       	ldi	r25, 0x00	; 0
    140a:	a9 01       	movw	r20, r18
    140c:	02 c0       	rjmp	.+4      	; 0x1412 <Dio_ReadPinLevel+0xd8>
    140e:	55 95       	asr	r21
    1410:	47 95       	ror	r20
    1412:	8a 95       	dec	r24
    1414:	e2 f7       	brpl	.-8      	; 0x140e <Dio_ReadPinLevel+0xd4>
    1416:	ca 01       	movw	r24, r20
    1418:	81 70       	andi	r24, 0x01	; 1
    141a:	89 83       	std	Y+1, r24	; 0x01
        break;
    default:
        break;
    }
    return level;
    141c:	89 81       	ldd	r24, Y+1	; 0x01
}
    141e:	0f 90       	pop	r0
    1420:	0f 90       	pop	r0
    1422:	0f 90       	pop	r0
    1424:	0f 90       	pop	r0
    1426:	0f 90       	pop	r0
    1428:	cf 91       	pop	r28
    142a:	df 91       	pop	r29
    142c:	08 95       	ret

0000142e <__vector_1>:
static void (*Callbck_Int0) (void) = NULL_PTR;
static void (*Callbck_Int1) (void) = NULL_PTR;
static void (*Callbck_Int2) (void) = NULL_PTR;

ISR(VECTOR_INT0)
{
    142e:	1f 92       	push	r1
    1430:	0f 92       	push	r0
    1432:	0f b6       	in	r0, 0x3f	; 63
    1434:	0f 92       	push	r0
    1436:	11 24       	eor	r1, r1
    1438:	2f 93       	push	r18
    143a:	3f 93       	push	r19
    143c:	4f 93       	push	r20
    143e:	5f 93       	push	r21
    1440:	6f 93       	push	r22
    1442:	7f 93       	push	r23
    1444:	8f 93       	push	r24
    1446:	9f 93       	push	r25
    1448:	af 93       	push	r26
    144a:	bf 93       	push	r27
    144c:	ef 93       	push	r30
    144e:	ff 93       	push	r31
    1450:	df 93       	push	r29
    1452:	cf 93       	push	r28
    1454:	cd b7       	in	r28, 0x3d	; 61
    1456:	de b7       	in	r29, 0x3e	; 62
    if(NULL_PTR != Callbck_Int0)
    1458:	80 91 7c 00 	lds	r24, 0x007C
    145c:	90 91 7d 00 	lds	r25, 0x007D
    1460:	00 97       	sbiw	r24, 0x00	; 0
    1462:	29 f0       	breq	.+10     	; 0x146e <__vector_1+0x40>
    {
        Callbck_Int0();
    1464:	e0 91 7c 00 	lds	r30, 0x007C
    1468:	f0 91 7d 00 	lds	r31, 0x007D
    146c:	09 95       	icall
    }
}
    146e:	cf 91       	pop	r28
    1470:	df 91       	pop	r29
    1472:	ff 91       	pop	r31
    1474:	ef 91       	pop	r30
    1476:	bf 91       	pop	r27
    1478:	af 91       	pop	r26
    147a:	9f 91       	pop	r25
    147c:	8f 91       	pop	r24
    147e:	7f 91       	pop	r23
    1480:	6f 91       	pop	r22
    1482:	5f 91       	pop	r21
    1484:	4f 91       	pop	r20
    1486:	3f 91       	pop	r19
    1488:	2f 91       	pop	r18
    148a:	0f 90       	pop	r0
    148c:	0f be       	out	0x3f, r0	; 63
    148e:	0f 90       	pop	r0
    1490:	1f 90       	pop	r1
    1492:	18 95       	reti

00001494 <__vector_2>:

ISR(VECTOR_INT1)
{
    1494:	1f 92       	push	r1
    1496:	0f 92       	push	r0
    1498:	0f b6       	in	r0, 0x3f	; 63
    149a:	0f 92       	push	r0
    149c:	11 24       	eor	r1, r1
    149e:	2f 93       	push	r18
    14a0:	3f 93       	push	r19
    14a2:	4f 93       	push	r20
    14a4:	5f 93       	push	r21
    14a6:	6f 93       	push	r22
    14a8:	7f 93       	push	r23
    14aa:	8f 93       	push	r24
    14ac:	9f 93       	push	r25
    14ae:	af 93       	push	r26
    14b0:	bf 93       	push	r27
    14b2:	ef 93       	push	r30
    14b4:	ff 93       	push	r31
    14b6:	df 93       	push	r29
    14b8:	cf 93       	push	r28
    14ba:	cd b7       	in	r28, 0x3d	; 61
    14bc:	de b7       	in	r29, 0x3e	; 62
    if(NULL_PTR != Callbck_Int1)
    14be:	80 91 7e 00 	lds	r24, 0x007E
    14c2:	90 91 7f 00 	lds	r25, 0x007F
    14c6:	00 97       	sbiw	r24, 0x00	; 0
    14c8:	29 f0       	breq	.+10     	; 0x14d4 <__vector_2+0x40>
    {
        Callbck_Int1();
    14ca:	e0 91 7e 00 	lds	r30, 0x007E
    14ce:	f0 91 7f 00 	lds	r31, 0x007F
    14d2:	09 95       	icall
    }
}
    14d4:	cf 91       	pop	r28
    14d6:	df 91       	pop	r29
    14d8:	ff 91       	pop	r31
    14da:	ef 91       	pop	r30
    14dc:	bf 91       	pop	r27
    14de:	af 91       	pop	r26
    14e0:	9f 91       	pop	r25
    14e2:	8f 91       	pop	r24
    14e4:	7f 91       	pop	r23
    14e6:	6f 91       	pop	r22
    14e8:	5f 91       	pop	r21
    14ea:	4f 91       	pop	r20
    14ec:	3f 91       	pop	r19
    14ee:	2f 91       	pop	r18
    14f0:	0f 90       	pop	r0
    14f2:	0f be       	out	0x3f, r0	; 63
    14f4:	0f 90       	pop	r0
    14f6:	1f 90       	pop	r1
    14f8:	18 95       	reti

000014fa <__vector_3>:

ISR(VECTOR_INT2)
{
    14fa:	1f 92       	push	r1
    14fc:	0f 92       	push	r0
    14fe:	0f b6       	in	r0, 0x3f	; 63
    1500:	0f 92       	push	r0
    1502:	11 24       	eor	r1, r1
    1504:	2f 93       	push	r18
    1506:	3f 93       	push	r19
    1508:	4f 93       	push	r20
    150a:	5f 93       	push	r21
    150c:	6f 93       	push	r22
    150e:	7f 93       	push	r23
    1510:	8f 93       	push	r24
    1512:	9f 93       	push	r25
    1514:	af 93       	push	r26
    1516:	bf 93       	push	r27
    1518:	ef 93       	push	r30
    151a:	ff 93       	push	r31
    151c:	df 93       	push	r29
    151e:	cf 93       	push	r28
    1520:	cd b7       	in	r28, 0x3d	; 61
    1522:	de b7       	in	r29, 0x3e	; 62
    if(NULL_PTR != Callbck_Int2)
    1524:	80 91 80 00 	lds	r24, 0x0080
    1528:	90 91 81 00 	lds	r25, 0x0081
    152c:	00 97       	sbiw	r24, 0x00	; 0
    152e:	29 f0       	breq	.+10     	; 0x153a <__vector_3+0x40>
    {
        Callbck_Int2();
    1530:	e0 91 80 00 	lds	r30, 0x0080
    1534:	f0 91 81 00 	lds	r31, 0x0081
    1538:	09 95       	icall
    }
}
    153a:	cf 91       	pop	r28
    153c:	df 91       	pop	r29
    153e:	ff 91       	pop	r31
    1540:	ef 91       	pop	r30
    1542:	bf 91       	pop	r27
    1544:	af 91       	pop	r26
    1546:	9f 91       	pop	r25
    1548:	8f 91       	pop	r24
    154a:	7f 91       	pop	r23
    154c:	6f 91       	pop	r22
    154e:	5f 91       	pop	r21
    1550:	4f 91       	pop	r20
    1552:	3f 91       	pop	r19
    1554:	2f 91       	pop	r18
    1556:	0f 90       	pop	r0
    1558:	0f be       	out	0x3f, r0	; 63
    155a:	0f 90       	pop	r0
    155c:	1f 90       	pop	r1
    155e:	18 95       	reti

00001560 <ExtInt_SetSenseControl>:

StdReturnType ExtInt_SetSenseControl (ExtInt_SourceType source, ExtInt_SenseType sense)
{
    1560:	df 93       	push	r29
    1562:	cf 93       	push	r28
    1564:	cd b7       	in	r28, 0x3d	; 61
    1566:	de b7       	in	r29, 0x3e	; 62
    1568:	29 97       	sbiw	r28, 0x09	; 9
    156a:	0f b6       	in	r0, 0x3f	; 63
    156c:	f8 94       	cli
    156e:	de bf       	out	0x3e, r29	; 62
    1570:	0f be       	out	0x3f, r0	; 63
    1572:	cd bf       	out	0x3d, r28	; 61
    1574:	8a 83       	std	Y+2, r24	; 0x02
    1576:	6b 83       	std	Y+3, r22	; 0x03
    StdReturnType retVal = E_OK;
    1578:	19 82       	std	Y+1, r1	; 0x01
    if (EXTINT_SOURCE_INT0 == source)
    157a:	8a 81       	ldd	r24, Y+2	; 0x02
    157c:	88 23       	and	r24, r24
    157e:	09 f0       	breq	.+2      	; 0x1582 <ExtInt_SetSenseControl+0x22>
    1580:	5e c0       	rjmp	.+188    	; 0x163e <ExtInt_SetSenseControl+0xde>
    {
        switch (sense)
    1582:	8b 81       	ldd	r24, Y+3	; 0x03
    1584:	28 2f       	mov	r18, r24
    1586:	30 e0       	ldi	r19, 0x00	; 0
    1588:	39 87       	std	Y+9, r19	; 0x09
    158a:	28 87       	std	Y+8, r18	; 0x08
    158c:	88 85       	ldd	r24, Y+8	; 0x08
    158e:	99 85       	ldd	r25, Y+9	; 0x09
    1590:	81 30       	cpi	r24, 0x01	; 1
    1592:	91 05       	cpc	r25, r1
    1594:	21 f1       	breq	.+72     	; 0x15de <ExtInt_SetSenseControl+0x7e>
    1596:	28 85       	ldd	r18, Y+8	; 0x08
    1598:	39 85       	ldd	r19, Y+9	; 0x09
    159a:	22 30       	cpi	r18, 0x02	; 2
    159c:	31 05       	cpc	r19, r1
    159e:	2c f4       	brge	.+10     	; 0x15aa <ExtInt_SetSenseControl+0x4a>
    15a0:	88 85       	ldd	r24, Y+8	; 0x08
    15a2:	99 85       	ldd	r25, Y+9	; 0x09
    15a4:	00 97       	sbiw	r24, 0x00	; 0
    15a6:	61 f0       	breq	.+24     	; 0x15c0 <ExtInt_SetSenseControl+0x60>
    15a8:	47 c0       	rjmp	.+142    	; 0x1638 <ExtInt_SetSenseControl+0xd8>
    15aa:	28 85       	ldd	r18, Y+8	; 0x08
    15ac:	39 85       	ldd	r19, Y+9	; 0x09
    15ae:	22 30       	cpi	r18, 0x02	; 2
    15b0:	31 05       	cpc	r19, r1
    15b2:	21 f1       	breq	.+72     	; 0x15fc <ExtInt_SetSenseControl+0x9c>
    15b4:	88 85       	ldd	r24, Y+8	; 0x08
    15b6:	99 85       	ldd	r25, Y+9	; 0x09
    15b8:	83 30       	cpi	r24, 0x03	; 3
    15ba:	91 05       	cpc	r25, r1
    15bc:	71 f1       	breq	.+92     	; 0x161a <ExtInt_SetSenseControl+0xba>
    15be:	3c c0       	rjmp	.+120    	; 0x1638 <ExtInt_SetSenseControl+0xd8>
        {
        case EXTINT_SENSE_LOW_LEVEL:
            CLR_BIT(MCUCR, 0);
    15c0:	a5 e5       	ldi	r26, 0x55	; 85
    15c2:	b0 e0       	ldi	r27, 0x00	; 0
    15c4:	e5 e5       	ldi	r30, 0x55	; 85
    15c6:	f0 e0       	ldi	r31, 0x00	; 0
    15c8:	80 81       	ld	r24, Z
    15ca:	8e 7f       	andi	r24, 0xFE	; 254
    15cc:	8c 93       	st	X, r24
            CLR_BIT(MCUCR, 1);
    15ce:	a5 e5       	ldi	r26, 0x55	; 85
    15d0:	b0 e0       	ldi	r27, 0x00	; 0
    15d2:	e5 e5       	ldi	r30, 0x55	; 85
    15d4:	f0 e0       	ldi	r31, 0x00	; 0
    15d6:	80 81       	ld	r24, Z
    15d8:	8d 7f       	andi	r24, 0xFD	; 253
    15da:	8c 93       	st	X, r24
    15dc:	ba c0       	rjmp	.+372    	; 0x1752 <ExtInt_SetSenseControl+0x1f2>
            break;
        case EXTINT_SENSE_ON_CHANGE:
            SET_BIT(MCUCR, 0);
    15de:	a5 e5       	ldi	r26, 0x55	; 85
    15e0:	b0 e0       	ldi	r27, 0x00	; 0
    15e2:	e5 e5       	ldi	r30, 0x55	; 85
    15e4:	f0 e0       	ldi	r31, 0x00	; 0
    15e6:	80 81       	ld	r24, Z
    15e8:	81 60       	ori	r24, 0x01	; 1
    15ea:	8c 93       	st	X, r24
            CLR_BIT(MCUCR, 1);
    15ec:	a5 e5       	ldi	r26, 0x55	; 85
    15ee:	b0 e0       	ldi	r27, 0x00	; 0
    15f0:	e5 e5       	ldi	r30, 0x55	; 85
    15f2:	f0 e0       	ldi	r31, 0x00	; 0
    15f4:	80 81       	ld	r24, Z
    15f6:	8d 7f       	andi	r24, 0xFD	; 253
    15f8:	8c 93       	st	X, r24
    15fa:	ab c0       	rjmp	.+342    	; 0x1752 <ExtInt_SetSenseControl+0x1f2>
            break;
        case EXTINT_SENSE_FALLING_EDGE:
            CLR_BIT(MCUCR, 0);
    15fc:	a5 e5       	ldi	r26, 0x55	; 85
    15fe:	b0 e0       	ldi	r27, 0x00	; 0
    1600:	e5 e5       	ldi	r30, 0x55	; 85
    1602:	f0 e0       	ldi	r31, 0x00	; 0
    1604:	80 81       	ld	r24, Z
    1606:	8e 7f       	andi	r24, 0xFE	; 254
    1608:	8c 93       	st	X, r24
            SET_BIT(MCUCR, 1);
    160a:	a5 e5       	ldi	r26, 0x55	; 85
    160c:	b0 e0       	ldi	r27, 0x00	; 0
    160e:	e5 e5       	ldi	r30, 0x55	; 85
    1610:	f0 e0       	ldi	r31, 0x00	; 0
    1612:	80 81       	ld	r24, Z
    1614:	82 60       	ori	r24, 0x02	; 2
    1616:	8c 93       	st	X, r24
    1618:	9c c0       	rjmp	.+312    	; 0x1752 <ExtInt_SetSenseControl+0x1f2>
            break;
        case EXTINT_SENSE_RISING_EDGE:
            SET_BIT(MCUCR, 0);
    161a:	a5 e5       	ldi	r26, 0x55	; 85
    161c:	b0 e0       	ldi	r27, 0x00	; 0
    161e:	e5 e5       	ldi	r30, 0x55	; 85
    1620:	f0 e0       	ldi	r31, 0x00	; 0
    1622:	80 81       	ld	r24, Z
    1624:	81 60       	ori	r24, 0x01	; 1
    1626:	8c 93       	st	X, r24
            SET_BIT(MCUCR, 1);
    1628:	a5 e5       	ldi	r26, 0x55	; 85
    162a:	b0 e0       	ldi	r27, 0x00	; 0
    162c:	e5 e5       	ldi	r30, 0x55	; 85
    162e:	f0 e0       	ldi	r31, 0x00	; 0
    1630:	80 81       	ld	r24, Z
    1632:	82 60       	ori	r24, 0x02	; 2
    1634:	8c 93       	st	X, r24
    1636:	8d c0       	rjmp	.+282    	; 0x1752 <ExtInt_SetSenseControl+0x1f2>
            break;
        default:
            retVal = E_NOT_OK;
    1638:	81 e0       	ldi	r24, 0x01	; 1
    163a:	89 83       	std	Y+1, r24	; 0x01
    163c:	8a c0       	rjmp	.+276    	; 0x1752 <ExtInt_SetSenseControl+0x1f2>
            break;
        }
    }
    else if (EXTINT_SOURCE_INT1 == source)
    163e:	8a 81       	ldd	r24, Y+2	; 0x02
    1640:	81 30       	cpi	r24, 0x01	; 1
    1642:	09 f0       	breq	.+2      	; 0x1646 <ExtInt_SetSenseControl+0xe6>
    1644:	5e c0       	rjmp	.+188    	; 0x1702 <ExtInt_SetSenseControl+0x1a2>
    {
        switch (sense)
    1646:	8b 81       	ldd	r24, Y+3	; 0x03
    1648:	28 2f       	mov	r18, r24
    164a:	30 e0       	ldi	r19, 0x00	; 0
    164c:	3f 83       	std	Y+7, r19	; 0x07
    164e:	2e 83       	std	Y+6, r18	; 0x06
    1650:	8e 81       	ldd	r24, Y+6	; 0x06
    1652:	9f 81       	ldd	r25, Y+7	; 0x07
    1654:	81 30       	cpi	r24, 0x01	; 1
    1656:	91 05       	cpc	r25, r1
    1658:	21 f1       	breq	.+72     	; 0x16a2 <ExtInt_SetSenseControl+0x142>
    165a:	2e 81       	ldd	r18, Y+6	; 0x06
    165c:	3f 81       	ldd	r19, Y+7	; 0x07
    165e:	22 30       	cpi	r18, 0x02	; 2
    1660:	31 05       	cpc	r19, r1
    1662:	2c f4       	brge	.+10     	; 0x166e <ExtInt_SetSenseControl+0x10e>
    1664:	8e 81       	ldd	r24, Y+6	; 0x06
    1666:	9f 81       	ldd	r25, Y+7	; 0x07
    1668:	00 97       	sbiw	r24, 0x00	; 0
    166a:	61 f0       	breq	.+24     	; 0x1684 <ExtInt_SetSenseControl+0x124>
    166c:	47 c0       	rjmp	.+142    	; 0x16fc <ExtInt_SetSenseControl+0x19c>
    166e:	2e 81       	ldd	r18, Y+6	; 0x06
    1670:	3f 81       	ldd	r19, Y+7	; 0x07
    1672:	22 30       	cpi	r18, 0x02	; 2
    1674:	31 05       	cpc	r19, r1
    1676:	21 f1       	breq	.+72     	; 0x16c0 <ExtInt_SetSenseControl+0x160>
    1678:	8e 81       	ldd	r24, Y+6	; 0x06
    167a:	9f 81       	ldd	r25, Y+7	; 0x07
    167c:	83 30       	cpi	r24, 0x03	; 3
    167e:	91 05       	cpc	r25, r1
    1680:	71 f1       	breq	.+92     	; 0x16de <ExtInt_SetSenseControl+0x17e>
    1682:	3c c0       	rjmp	.+120    	; 0x16fc <ExtInt_SetSenseControl+0x19c>
        {
        case EXTINT_SENSE_LOW_LEVEL:
            CLR_BIT(MCUCR, 2);
    1684:	a5 e5       	ldi	r26, 0x55	; 85
    1686:	b0 e0       	ldi	r27, 0x00	; 0
    1688:	e5 e5       	ldi	r30, 0x55	; 85
    168a:	f0 e0       	ldi	r31, 0x00	; 0
    168c:	80 81       	ld	r24, Z
    168e:	8b 7f       	andi	r24, 0xFB	; 251
    1690:	8c 93       	st	X, r24
            CLR_BIT(MCUCR, 3);
    1692:	a5 e5       	ldi	r26, 0x55	; 85
    1694:	b0 e0       	ldi	r27, 0x00	; 0
    1696:	e5 e5       	ldi	r30, 0x55	; 85
    1698:	f0 e0       	ldi	r31, 0x00	; 0
    169a:	80 81       	ld	r24, Z
    169c:	87 7f       	andi	r24, 0xF7	; 247
    169e:	8c 93       	st	X, r24
    16a0:	58 c0       	rjmp	.+176    	; 0x1752 <ExtInt_SetSenseControl+0x1f2>
            break;
        case EXTINT_SENSE_ON_CHANGE:
            SET_BIT(MCUCR, 2);
    16a2:	a5 e5       	ldi	r26, 0x55	; 85
    16a4:	b0 e0       	ldi	r27, 0x00	; 0
    16a6:	e5 e5       	ldi	r30, 0x55	; 85
    16a8:	f0 e0       	ldi	r31, 0x00	; 0
    16aa:	80 81       	ld	r24, Z
    16ac:	84 60       	ori	r24, 0x04	; 4
    16ae:	8c 93       	st	X, r24
            CLR_BIT(MCUCR, 3);
    16b0:	a5 e5       	ldi	r26, 0x55	; 85
    16b2:	b0 e0       	ldi	r27, 0x00	; 0
    16b4:	e5 e5       	ldi	r30, 0x55	; 85
    16b6:	f0 e0       	ldi	r31, 0x00	; 0
    16b8:	80 81       	ld	r24, Z
    16ba:	87 7f       	andi	r24, 0xF7	; 247
    16bc:	8c 93       	st	X, r24
    16be:	49 c0       	rjmp	.+146    	; 0x1752 <ExtInt_SetSenseControl+0x1f2>
            break;
        case EXTINT_SENSE_FALLING_EDGE:
            CLR_BIT(MCUCR, 2);
    16c0:	a5 e5       	ldi	r26, 0x55	; 85
    16c2:	b0 e0       	ldi	r27, 0x00	; 0
    16c4:	e5 e5       	ldi	r30, 0x55	; 85
    16c6:	f0 e0       	ldi	r31, 0x00	; 0
    16c8:	80 81       	ld	r24, Z
    16ca:	8b 7f       	andi	r24, 0xFB	; 251
    16cc:	8c 93       	st	X, r24
            SET_BIT(MCUCR, 3);
    16ce:	a5 e5       	ldi	r26, 0x55	; 85
    16d0:	b0 e0       	ldi	r27, 0x00	; 0
    16d2:	e5 e5       	ldi	r30, 0x55	; 85
    16d4:	f0 e0       	ldi	r31, 0x00	; 0
    16d6:	80 81       	ld	r24, Z
    16d8:	88 60       	ori	r24, 0x08	; 8
    16da:	8c 93       	st	X, r24
    16dc:	3a c0       	rjmp	.+116    	; 0x1752 <ExtInt_SetSenseControl+0x1f2>
            break;
        case EXTINT_SENSE_RISING_EDGE:
            SET_BIT(MCUCR, 2);
    16de:	a5 e5       	ldi	r26, 0x55	; 85
    16e0:	b0 e0       	ldi	r27, 0x00	; 0
    16e2:	e5 e5       	ldi	r30, 0x55	; 85
    16e4:	f0 e0       	ldi	r31, 0x00	; 0
    16e6:	80 81       	ld	r24, Z
    16e8:	84 60       	ori	r24, 0x04	; 4
    16ea:	8c 93       	st	X, r24
            SET_BIT(MCUCR, 3);
    16ec:	a5 e5       	ldi	r26, 0x55	; 85
    16ee:	b0 e0       	ldi	r27, 0x00	; 0
    16f0:	e5 e5       	ldi	r30, 0x55	; 85
    16f2:	f0 e0       	ldi	r31, 0x00	; 0
    16f4:	80 81       	ld	r24, Z
    16f6:	88 60       	ori	r24, 0x08	; 8
    16f8:	8c 93       	st	X, r24
    16fa:	2b c0       	rjmp	.+86     	; 0x1752 <ExtInt_SetSenseControl+0x1f2>
            break;
        default:
            retVal = E_NOT_OK;
    16fc:	81 e0       	ldi	r24, 0x01	; 1
    16fe:	89 83       	std	Y+1, r24	; 0x01
    1700:	28 c0       	rjmp	.+80     	; 0x1752 <ExtInt_SetSenseControl+0x1f2>
            break;
        }
    }
    else if (EXTINT_SOURCE_INT2 == source)
    1702:	8a 81       	ldd	r24, Y+2	; 0x02
    1704:	82 30       	cpi	r24, 0x02	; 2
    1706:	19 f5       	brne	.+70     	; 0x174e <ExtInt_SetSenseControl+0x1ee>
    {
        switch (sense)
    1708:	8b 81       	ldd	r24, Y+3	; 0x03
    170a:	28 2f       	mov	r18, r24
    170c:	30 e0       	ldi	r19, 0x00	; 0
    170e:	3d 83       	std	Y+5, r19	; 0x05
    1710:	2c 83       	std	Y+4, r18	; 0x04
    1712:	8c 81       	ldd	r24, Y+4	; 0x04
    1714:	9d 81       	ldd	r25, Y+5	; 0x05
    1716:	82 30       	cpi	r24, 0x02	; 2
    1718:	91 05       	cpc	r25, r1
    171a:	31 f0       	breq	.+12     	; 0x1728 <ExtInt_SetSenseControl+0x1c8>
    171c:	2c 81       	ldd	r18, Y+4	; 0x04
    171e:	3d 81       	ldd	r19, Y+5	; 0x05
    1720:	23 30       	cpi	r18, 0x03	; 3
    1722:	31 05       	cpc	r19, r1
    1724:	49 f0       	breq	.+18     	; 0x1738 <ExtInt_SetSenseControl+0x1d8>
    1726:	10 c0       	rjmp	.+32     	; 0x1748 <ExtInt_SetSenseControl+0x1e8>
        {
        case EXTINT_SENSE_FALLING_EDGE:
            CLR_BIT(MCUCSR, 6);
    1728:	a4 e5       	ldi	r26, 0x54	; 84
    172a:	b0 e0       	ldi	r27, 0x00	; 0
    172c:	e4 e5       	ldi	r30, 0x54	; 84
    172e:	f0 e0       	ldi	r31, 0x00	; 0
    1730:	80 81       	ld	r24, Z
    1732:	8f 7b       	andi	r24, 0xBF	; 191
    1734:	8c 93       	st	X, r24
    1736:	0d c0       	rjmp	.+26     	; 0x1752 <ExtInt_SetSenseControl+0x1f2>
            break;
        case EXTINT_SENSE_RISING_EDGE:
            SET_BIT(MCUCSR, 6);
    1738:	a4 e5       	ldi	r26, 0x54	; 84
    173a:	b0 e0       	ldi	r27, 0x00	; 0
    173c:	e4 e5       	ldi	r30, 0x54	; 84
    173e:	f0 e0       	ldi	r31, 0x00	; 0
    1740:	80 81       	ld	r24, Z
    1742:	80 64       	ori	r24, 0x40	; 64
    1744:	8c 93       	st	X, r24
    1746:	05 c0       	rjmp	.+10     	; 0x1752 <ExtInt_SetSenseControl+0x1f2>
            break;
        default:
            retVal = E_NOT_OK;
    1748:	81 e0       	ldi	r24, 0x01	; 1
    174a:	89 83       	std	Y+1, r24	; 0x01
    174c:	02 c0       	rjmp	.+4      	; 0x1752 <ExtInt_SetSenseControl+0x1f2>
            break;
        }
    }
    else
    {
        retVal = E_NOT_OK;
    174e:	81 e0       	ldi	r24, 0x01	; 1
    1750:	89 83       	std	Y+1, r24	; 0x01
    }
    return retVal;
    1752:	89 81       	ldd	r24, Y+1	; 0x01
}
    1754:	29 96       	adiw	r28, 0x09	; 9
    1756:	0f b6       	in	r0, 0x3f	; 63
    1758:	f8 94       	cli
    175a:	de bf       	out	0x3e, r29	; 62
    175c:	0f be       	out	0x3f, r0	; 63
    175e:	cd bf       	out	0x3d, r28	; 61
    1760:	cf 91       	pop	r28
    1762:	df 91       	pop	r29
    1764:	08 95       	ret

00001766 <ExtInt_EnableInterrupt>:

StdReturnType ExtInt_EnableInterrupt (ExtInt_SourceType source)
{
    1766:	df 93       	push	r29
    1768:	cf 93       	push	r28
    176a:	00 d0       	rcall	.+0      	; 0x176c <ExtInt_EnableInterrupt+0x6>
    176c:	cd b7       	in	r28, 0x3d	; 61
    176e:	de b7       	in	r29, 0x3e	; 62
    1770:	8a 83       	std	Y+2, r24	; 0x02
    StdReturnType retVal = E_OK;
    1772:	19 82       	std	Y+1, r1	; 0x01
    if (EXTINT_SOURCE_INT0 == source)
    1774:	8a 81       	ldd	r24, Y+2	; 0x02
    1776:	88 23       	and	r24, r24
    1778:	41 f4       	brne	.+16     	; 0x178a <ExtInt_EnableInterrupt+0x24>
    {
        SET_BIT(GICR, 6);
    177a:	ab e5       	ldi	r26, 0x5B	; 91
    177c:	b0 e0       	ldi	r27, 0x00	; 0
    177e:	eb e5       	ldi	r30, 0x5B	; 91
    1780:	f0 e0       	ldi	r31, 0x00	; 0
    1782:	80 81       	ld	r24, Z
    1784:	80 64       	ori	r24, 0x40	; 64
    1786:	8c 93       	st	X, r24
    1788:	18 c0       	rjmp	.+48     	; 0x17ba <ExtInt_EnableInterrupt+0x54>
    }
    else if (EXTINT_SOURCE_INT1 == source)
    178a:	8a 81       	ldd	r24, Y+2	; 0x02
    178c:	81 30       	cpi	r24, 0x01	; 1
    178e:	41 f4       	brne	.+16     	; 0x17a0 <ExtInt_EnableInterrupt+0x3a>
    {
        SET_BIT(GICR, 7);
    1790:	ab e5       	ldi	r26, 0x5B	; 91
    1792:	b0 e0       	ldi	r27, 0x00	; 0
    1794:	eb e5       	ldi	r30, 0x5B	; 91
    1796:	f0 e0       	ldi	r31, 0x00	; 0
    1798:	80 81       	ld	r24, Z
    179a:	80 68       	ori	r24, 0x80	; 128
    179c:	8c 93       	st	X, r24
    179e:	0d c0       	rjmp	.+26     	; 0x17ba <ExtInt_EnableInterrupt+0x54>
    }
    else if (EXTINT_SOURCE_INT2 == source)
    17a0:	8a 81       	ldd	r24, Y+2	; 0x02
    17a2:	82 30       	cpi	r24, 0x02	; 2
    17a4:	41 f4       	brne	.+16     	; 0x17b6 <ExtInt_EnableInterrupt+0x50>
    {
        SET_BIT(GICR, 5);
    17a6:	ab e5       	ldi	r26, 0x5B	; 91
    17a8:	b0 e0       	ldi	r27, 0x00	; 0
    17aa:	eb e5       	ldi	r30, 0x5B	; 91
    17ac:	f0 e0       	ldi	r31, 0x00	; 0
    17ae:	80 81       	ld	r24, Z
    17b0:	80 62       	ori	r24, 0x20	; 32
    17b2:	8c 93       	st	X, r24
    17b4:	02 c0       	rjmp	.+4      	; 0x17ba <ExtInt_EnableInterrupt+0x54>
    }
    else 
    {
        retVal = E_NOT_OK;
    17b6:	81 e0       	ldi	r24, 0x01	; 1
    17b8:	89 83       	std	Y+1, r24	; 0x01
    }
    return retVal;
    17ba:	89 81       	ldd	r24, Y+1	; 0x01
}
    17bc:	0f 90       	pop	r0
    17be:	0f 90       	pop	r0
    17c0:	cf 91       	pop	r28
    17c2:	df 91       	pop	r29
    17c4:	08 95       	ret

000017c6 <ExtInt_DisableInterrupt>:

StdReturnType ExtInt_DisableInterrupt (ExtInt_SourceType source)
{
    17c6:	df 93       	push	r29
    17c8:	cf 93       	push	r28
    17ca:	00 d0       	rcall	.+0      	; 0x17cc <ExtInt_DisableInterrupt+0x6>
    17cc:	cd b7       	in	r28, 0x3d	; 61
    17ce:	de b7       	in	r29, 0x3e	; 62
    17d0:	8a 83       	std	Y+2, r24	; 0x02
    StdReturnType retVal = E_OK;
    17d2:	19 82       	std	Y+1, r1	; 0x01
    if (EXTINT_SOURCE_INT0 == source)
    17d4:	8a 81       	ldd	r24, Y+2	; 0x02
    17d6:	88 23       	and	r24, r24
    17d8:	41 f4       	brne	.+16     	; 0x17ea <ExtInt_DisableInterrupt+0x24>
    {
        CLR_BIT(GICR, 6);
    17da:	ab e5       	ldi	r26, 0x5B	; 91
    17dc:	b0 e0       	ldi	r27, 0x00	; 0
    17de:	eb e5       	ldi	r30, 0x5B	; 91
    17e0:	f0 e0       	ldi	r31, 0x00	; 0
    17e2:	80 81       	ld	r24, Z
    17e4:	8f 7b       	andi	r24, 0xBF	; 191
    17e6:	8c 93       	st	X, r24
    17e8:	18 c0       	rjmp	.+48     	; 0x181a <ExtInt_DisableInterrupt+0x54>
    }
    else if (EXTINT_SOURCE_INT1 == source)
    17ea:	8a 81       	ldd	r24, Y+2	; 0x02
    17ec:	81 30       	cpi	r24, 0x01	; 1
    17ee:	41 f4       	brne	.+16     	; 0x1800 <ExtInt_DisableInterrupt+0x3a>
    {
        CLR_BIT(GICR, 7);
    17f0:	ab e5       	ldi	r26, 0x5B	; 91
    17f2:	b0 e0       	ldi	r27, 0x00	; 0
    17f4:	eb e5       	ldi	r30, 0x5B	; 91
    17f6:	f0 e0       	ldi	r31, 0x00	; 0
    17f8:	80 81       	ld	r24, Z
    17fa:	8f 77       	andi	r24, 0x7F	; 127
    17fc:	8c 93       	st	X, r24
    17fe:	0d c0       	rjmp	.+26     	; 0x181a <ExtInt_DisableInterrupt+0x54>
    }
    else if (EXTINT_SOURCE_INT2 == source)
    1800:	8a 81       	ldd	r24, Y+2	; 0x02
    1802:	82 30       	cpi	r24, 0x02	; 2
    1804:	41 f4       	brne	.+16     	; 0x1816 <ExtInt_DisableInterrupt+0x50>
    {
        CLR_BIT(GICR, 5);
    1806:	ab e5       	ldi	r26, 0x5B	; 91
    1808:	b0 e0       	ldi	r27, 0x00	; 0
    180a:	eb e5       	ldi	r30, 0x5B	; 91
    180c:	f0 e0       	ldi	r31, 0x00	; 0
    180e:	80 81       	ld	r24, Z
    1810:	8f 7d       	andi	r24, 0xDF	; 223
    1812:	8c 93       	st	X, r24
    1814:	02 c0       	rjmp	.+4      	; 0x181a <ExtInt_DisableInterrupt+0x54>
    }
    else 
    {
        retVal = E_NOT_OK;
    1816:	81 e0       	ldi	r24, 0x01	; 1
    1818:	89 83       	std	Y+1, r24	; 0x01
    }
    return retVal;
    181a:	89 81       	ldd	r24, Y+1	; 0x01
}
    181c:	0f 90       	pop	r0
    181e:	0f 90       	pop	r0
    1820:	cf 91       	pop	r28
    1822:	df 91       	pop	r29
    1824:	08 95       	ret

00001826 <ExtInt_SetCallback>:


StdReturnType ExtInt_SetCallback (ExtInt_SourceType source, void (*callbackPtr) (void))
{
    1826:	df 93       	push	r29
    1828:	cf 93       	push	r28
    182a:	00 d0       	rcall	.+0      	; 0x182c <ExtInt_SetCallback+0x6>
    182c:	00 d0       	rcall	.+0      	; 0x182e <ExtInt_SetCallback+0x8>
    182e:	00 d0       	rcall	.+0      	; 0x1830 <ExtInt_SetCallback+0xa>
    1830:	cd b7       	in	r28, 0x3d	; 61
    1832:	de b7       	in	r29, 0x3e	; 62
    1834:	8a 83       	std	Y+2, r24	; 0x02
    1836:	7c 83       	std	Y+4, r23	; 0x04
    1838:	6b 83       	std	Y+3, r22	; 0x03
    StdReturnType retVal = E_OK;
    183a:	19 82       	std	Y+1, r1	; 0x01
    switch (source)
    183c:	8a 81       	ldd	r24, Y+2	; 0x02
    183e:	28 2f       	mov	r18, r24
    1840:	30 e0       	ldi	r19, 0x00	; 0
    1842:	3e 83       	std	Y+6, r19	; 0x06
    1844:	2d 83       	std	Y+5, r18	; 0x05
    1846:	8d 81       	ldd	r24, Y+5	; 0x05
    1848:	9e 81       	ldd	r25, Y+6	; 0x06
    184a:	81 30       	cpi	r24, 0x01	; 1
    184c:	91 05       	cpc	r25, r1
    184e:	81 f0       	breq	.+32     	; 0x1870 <ExtInt_SetCallback+0x4a>
    1850:	2d 81       	ldd	r18, Y+5	; 0x05
    1852:	3e 81       	ldd	r19, Y+6	; 0x06
    1854:	22 30       	cpi	r18, 0x02	; 2
    1856:	31 05       	cpc	r19, r1
    1858:	91 f0       	breq	.+36     	; 0x187e <ExtInt_SetCallback+0x58>
    185a:	8d 81       	ldd	r24, Y+5	; 0x05
    185c:	9e 81       	ldd	r25, Y+6	; 0x06
    185e:	00 97       	sbiw	r24, 0x00	; 0
    1860:	a9 f4       	brne	.+42     	; 0x188c <ExtInt_SetCallback+0x66>
    {
    case EXTINT_SOURCE_INT0:
        Callbck_Int0 = callbackPtr;
    1862:	8b 81       	ldd	r24, Y+3	; 0x03
    1864:	9c 81       	ldd	r25, Y+4	; 0x04
    1866:	90 93 7d 00 	sts	0x007D, r25
    186a:	80 93 7c 00 	sts	0x007C, r24
    186e:	10 c0       	rjmp	.+32     	; 0x1890 <ExtInt_SetCallback+0x6a>
        break;
    case EXTINT_SOURCE_INT1:
        Callbck_Int1 = callbackPtr;
    1870:	8b 81       	ldd	r24, Y+3	; 0x03
    1872:	9c 81       	ldd	r25, Y+4	; 0x04
    1874:	90 93 7f 00 	sts	0x007F, r25
    1878:	80 93 7e 00 	sts	0x007E, r24
    187c:	09 c0       	rjmp	.+18     	; 0x1890 <ExtInt_SetCallback+0x6a>
        break;
    case EXTINT_SOURCE_INT2:
        Callbck_Int2 = callbackPtr;
    187e:	8b 81       	ldd	r24, Y+3	; 0x03
    1880:	9c 81       	ldd	r25, Y+4	; 0x04
    1882:	90 93 81 00 	sts	0x0081, r25
    1886:	80 93 80 00 	sts	0x0080, r24
    188a:	02 c0       	rjmp	.+4      	; 0x1890 <ExtInt_SetCallback+0x6a>
        break;
    default:
        retVal = E_NOT_OK;
    188c:	81 e0       	ldi	r24, 0x01	; 1
    188e:	89 83       	std	Y+1, r24	; 0x01
        break;
    }
    return retVal;
    1890:	89 81       	ldd	r24, Y+1	; 0x01
}
    1892:	26 96       	adiw	r28, 0x06	; 6
    1894:	0f b6       	in	r0, 0x3f	; 63
    1896:	f8 94       	cli
    1898:	de bf       	out	0x3e, r29	; 62
    189a:	0f be       	out	0x3f, r0	; 63
    189c:	cd bf       	out	0x3d, r28	; 61
    189e:	cf 91       	pop	r28
    18a0:	df 91       	pop	r29
    18a2:	08 95       	ret

000018a4 <Gie_Enable>:
#include "Macros.h"
#include "Registers.h"
#include "Gie.h"

void Gie_Enable  (void)
{
    18a4:	df 93       	push	r29
    18a6:	cf 93       	push	r28
    18a8:	cd b7       	in	r28, 0x3d	; 61
    18aa:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(SREG, 7);
    18ac:	af e5       	ldi	r26, 0x5F	; 95
    18ae:	b0 e0       	ldi	r27, 0x00	; 0
    18b0:	ef e5       	ldi	r30, 0x5F	; 95
    18b2:	f0 e0       	ldi	r31, 0x00	; 0
    18b4:	80 81       	ld	r24, Z
    18b6:	80 68       	ori	r24, 0x80	; 128
    18b8:	8c 93       	st	X, r24
}
    18ba:	cf 91       	pop	r28
    18bc:	df 91       	pop	r29
    18be:	08 95       	ret

000018c0 <Gie_Disable>:

void Gie_Disable (void)
{
    18c0:	df 93       	push	r29
    18c2:	cf 93       	push	r28
    18c4:	cd b7       	in	r28, 0x3d	; 61
    18c6:	de b7       	in	r29, 0x3e	; 62
    CLR_BIT(SREG, 7);
    18c8:	af e5       	ldi	r26, 0x5F	; 95
    18ca:	b0 e0       	ldi	r27, 0x00	; 0
    18cc:	ef e5       	ldi	r30, 0x5F	; 95
    18ce:	f0 e0       	ldi	r31, 0x00	; 0
    18d0:	80 81       	ld	r24, Z
    18d2:	8f 77       	andi	r24, 0x7F	; 127
    18d4:	8c 93       	st	X, r24
}
    18d6:	cf 91       	pop	r28
    18d8:	df 91       	pop	r29
    18da:	08 95       	ret

000018dc <__vector_11>:
static void (*Callback_Gpt_TIM1_COMPB) (void) = NULL_PTR;
static void (*Callback_Gpt_TIM2_OVF) (void) = NULL_PTR;
static void (*Callback_Gpt_TIM2_COMP) (void) = NULL_PTR;

ISR(VECTOR_TIM0_OVF)
{
    18dc:	1f 92       	push	r1
    18de:	0f 92       	push	r0
    18e0:	0f b6       	in	r0, 0x3f	; 63
    18e2:	0f 92       	push	r0
    18e4:	11 24       	eor	r1, r1
    18e6:	2f 93       	push	r18
    18e8:	3f 93       	push	r19
    18ea:	4f 93       	push	r20
    18ec:	5f 93       	push	r21
    18ee:	6f 93       	push	r22
    18f0:	7f 93       	push	r23
    18f2:	8f 93       	push	r24
    18f4:	9f 93       	push	r25
    18f6:	af 93       	push	r26
    18f8:	bf 93       	push	r27
    18fa:	ef 93       	push	r30
    18fc:	ff 93       	push	r31
    18fe:	df 93       	push	r29
    1900:	cf 93       	push	r28
    1902:	cd b7       	in	r28, 0x3d	; 61
    1904:	de b7       	in	r29, 0x3e	; 62
    if (NULL_PTR != Callback_Gpt_TIM0_OVF)
    1906:	80 91 82 00 	lds	r24, 0x0082
    190a:	90 91 83 00 	lds	r25, 0x0083
    190e:	00 97       	sbiw	r24, 0x00	; 0
    1910:	29 f0       	breq	.+10     	; 0x191c <__vector_11+0x40>
    {
        Callback_Gpt_TIM0_OVF();
    1912:	e0 91 82 00 	lds	r30, 0x0082
    1916:	f0 91 83 00 	lds	r31, 0x0083
    191a:	09 95       	icall
    }
}
    191c:	cf 91       	pop	r28
    191e:	df 91       	pop	r29
    1920:	ff 91       	pop	r31
    1922:	ef 91       	pop	r30
    1924:	bf 91       	pop	r27
    1926:	af 91       	pop	r26
    1928:	9f 91       	pop	r25
    192a:	8f 91       	pop	r24
    192c:	7f 91       	pop	r23
    192e:	6f 91       	pop	r22
    1930:	5f 91       	pop	r21
    1932:	4f 91       	pop	r20
    1934:	3f 91       	pop	r19
    1936:	2f 91       	pop	r18
    1938:	0f 90       	pop	r0
    193a:	0f be       	out	0x3f, r0	; 63
    193c:	0f 90       	pop	r0
    193e:	1f 90       	pop	r1
    1940:	18 95       	reti

00001942 <__vector_10>:

ISR(VECTOR_TIM0_COMP)
{
    1942:	1f 92       	push	r1
    1944:	0f 92       	push	r0
    1946:	0f b6       	in	r0, 0x3f	; 63
    1948:	0f 92       	push	r0
    194a:	11 24       	eor	r1, r1
    194c:	2f 93       	push	r18
    194e:	3f 93       	push	r19
    1950:	4f 93       	push	r20
    1952:	5f 93       	push	r21
    1954:	6f 93       	push	r22
    1956:	7f 93       	push	r23
    1958:	8f 93       	push	r24
    195a:	9f 93       	push	r25
    195c:	af 93       	push	r26
    195e:	bf 93       	push	r27
    1960:	ef 93       	push	r30
    1962:	ff 93       	push	r31
    1964:	df 93       	push	r29
    1966:	cf 93       	push	r28
    1968:	cd b7       	in	r28, 0x3d	; 61
    196a:	de b7       	in	r29, 0x3e	; 62
    if (NULL_PTR != Callback_Gpt_TIM0_COMP)
    196c:	80 91 84 00 	lds	r24, 0x0084
    1970:	90 91 85 00 	lds	r25, 0x0085
    1974:	00 97       	sbiw	r24, 0x00	; 0
    1976:	29 f0       	breq	.+10     	; 0x1982 <__vector_10+0x40>
    {
        Callback_Gpt_TIM0_COMP();
    1978:	e0 91 84 00 	lds	r30, 0x0084
    197c:	f0 91 85 00 	lds	r31, 0x0085
    1980:	09 95       	icall
    }
}
    1982:	cf 91       	pop	r28
    1984:	df 91       	pop	r29
    1986:	ff 91       	pop	r31
    1988:	ef 91       	pop	r30
    198a:	bf 91       	pop	r27
    198c:	af 91       	pop	r26
    198e:	9f 91       	pop	r25
    1990:	8f 91       	pop	r24
    1992:	7f 91       	pop	r23
    1994:	6f 91       	pop	r22
    1996:	5f 91       	pop	r21
    1998:	4f 91       	pop	r20
    199a:	3f 91       	pop	r19
    199c:	2f 91       	pop	r18
    199e:	0f 90       	pop	r0
    19a0:	0f be       	out	0x3f, r0	; 63
    19a2:	0f 90       	pop	r0
    19a4:	1f 90       	pop	r1
    19a6:	18 95       	reti

000019a8 <__vector_9>:

ISR(VECTOR_TIM1_OVF)
{
    19a8:	1f 92       	push	r1
    19aa:	0f 92       	push	r0
    19ac:	0f b6       	in	r0, 0x3f	; 63
    19ae:	0f 92       	push	r0
    19b0:	11 24       	eor	r1, r1
    19b2:	2f 93       	push	r18
    19b4:	3f 93       	push	r19
    19b6:	4f 93       	push	r20
    19b8:	5f 93       	push	r21
    19ba:	6f 93       	push	r22
    19bc:	7f 93       	push	r23
    19be:	8f 93       	push	r24
    19c0:	9f 93       	push	r25
    19c2:	af 93       	push	r26
    19c4:	bf 93       	push	r27
    19c6:	ef 93       	push	r30
    19c8:	ff 93       	push	r31
    19ca:	df 93       	push	r29
    19cc:	cf 93       	push	r28
    19ce:	cd b7       	in	r28, 0x3d	; 61
    19d0:	de b7       	in	r29, 0x3e	; 62
    if (NULL_PTR != Callback_Gpt_TIM1_OVF)
    19d2:	80 91 86 00 	lds	r24, 0x0086
    19d6:	90 91 87 00 	lds	r25, 0x0087
    19da:	00 97       	sbiw	r24, 0x00	; 0
    19dc:	29 f0       	breq	.+10     	; 0x19e8 <__vector_9+0x40>
    {
        Callback_Gpt_TIM1_OVF();
    19de:	e0 91 86 00 	lds	r30, 0x0086
    19e2:	f0 91 87 00 	lds	r31, 0x0087
    19e6:	09 95       	icall
    }
}
    19e8:	cf 91       	pop	r28
    19ea:	df 91       	pop	r29
    19ec:	ff 91       	pop	r31
    19ee:	ef 91       	pop	r30
    19f0:	bf 91       	pop	r27
    19f2:	af 91       	pop	r26
    19f4:	9f 91       	pop	r25
    19f6:	8f 91       	pop	r24
    19f8:	7f 91       	pop	r23
    19fa:	6f 91       	pop	r22
    19fc:	5f 91       	pop	r21
    19fe:	4f 91       	pop	r20
    1a00:	3f 91       	pop	r19
    1a02:	2f 91       	pop	r18
    1a04:	0f 90       	pop	r0
    1a06:	0f be       	out	0x3f, r0	; 63
    1a08:	0f 90       	pop	r0
    1a0a:	1f 90       	pop	r1
    1a0c:	18 95       	reti

00001a0e <__vector_7>:

ISR(VECTOR_TIM1_COMPA)
{
    1a0e:	1f 92       	push	r1
    1a10:	0f 92       	push	r0
    1a12:	0f b6       	in	r0, 0x3f	; 63
    1a14:	0f 92       	push	r0
    1a16:	11 24       	eor	r1, r1
    1a18:	2f 93       	push	r18
    1a1a:	3f 93       	push	r19
    1a1c:	4f 93       	push	r20
    1a1e:	5f 93       	push	r21
    1a20:	6f 93       	push	r22
    1a22:	7f 93       	push	r23
    1a24:	8f 93       	push	r24
    1a26:	9f 93       	push	r25
    1a28:	af 93       	push	r26
    1a2a:	bf 93       	push	r27
    1a2c:	ef 93       	push	r30
    1a2e:	ff 93       	push	r31
    1a30:	df 93       	push	r29
    1a32:	cf 93       	push	r28
    1a34:	cd b7       	in	r28, 0x3d	; 61
    1a36:	de b7       	in	r29, 0x3e	; 62
    if (NULL_PTR != Callback_Gpt_TIM1_COMPA)
    1a38:	80 91 88 00 	lds	r24, 0x0088
    1a3c:	90 91 89 00 	lds	r25, 0x0089
    1a40:	00 97       	sbiw	r24, 0x00	; 0
    1a42:	29 f0       	breq	.+10     	; 0x1a4e <__vector_7+0x40>
    {
        Callback_Gpt_TIM1_COMPA();
    1a44:	e0 91 88 00 	lds	r30, 0x0088
    1a48:	f0 91 89 00 	lds	r31, 0x0089
    1a4c:	09 95       	icall
    }
}
    1a4e:	cf 91       	pop	r28
    1a50:	df 91       	pop	r29
    1a52:	ff 91       	pop	r31
    1a54:	ef 91       	pop	r30
    1a56:	bf 91       	pop	r27
    1a58:	af 91       	pop	r26
    1a5a:	9f 91       	pop	r25
    1a5c:	8f 91       	pop	r24
    1a5e:	7f 91       	pop	r23
    1a60:	6f 91       	pop	r22
    1a62:	5f 91       	pop	r21
    1a64:	4f 91       	pop	r20
    1a66:	3f 91       	pop	r19
    1a68:	2f 91       	pop	r18
    1a6a:	0f 90       	pop	r0
    1a6c:	0f be       	out	0x3f, r0	; 63
    1a6e:	0f 90       	pop	r0
    1a70:	1f 90       	pop	r1
    1a72:	18 95       	reti

00001a74 <__vector_8>:

ISR(VECTOR_TIM1_COMPB)
{
    1a74:	1f 92       	push	r1
    1a76:	0f 92       	push	r0
    1a78:	0f b6       	in	r0, 0x3f	; 63
    1a7a:	0f 92       	push	r0
    1a7c:	11 24       	eor	r1, r1
    1a7e:	2f 93       	push	r18
    1a80:	3f 93       	push	r19
    1a82:	4f 93       	push	r20
    1a84:	5f 93       	push	r21
    1a86:	6f 93       	push	r22
    1a88:	7f 93       	push	r23
    1a8a:	8f 93       	push	r24
    1a8c:	9f 93       	push	r25
    1a8e:	af 93       	push	r26
    1a90:	bf 93       	push	r27
    1a92:	ef 93       	push	r30
    1a94:	ff 93       	push	r31
    1a96:	df 93       	push	r29
    1a98:	cf 93       	push	r28
    1a9a:	cd b7       	in	r28, 0x3d	; 61
    1a9c:	de b7       	in	r29, 0x3e	; 62
    if (NULL_PTR != Callback_Gpt_TIM1_COMPB)
    1a9e:	80 91 8a 00 	lds	r24, 0x008A
    1aa2:	90 91 8b 00 	lds	r25, 0x008B
    1aa6:	00 97       	sbiw	r24, 0x00	; 0
    1aa8:	29 f0       	breq	.+10     	; 0x1ab4 <__vector_8+0x40>
    {
        Callback_Gpt_TIM1_COMPB();
    1aaa:	e0 91 8a 00 	lds	r30, 0x008A
    1aae:	f0 91 8b 00 	lds	r31, 0x008B
    1ab2:	09 95       	icall
    }
}
    1ab4:	cf 91       	pop	r28
    1ab6:	df 91       	pop	r29
    1ab8:	ff 91       	pop	r31
    1aba:	ef 91       	pop	r30
    1abc:	bf 91       	pop	r27
    1abe:	af 91       	pop	r26
    1ac0:	9f 91       	pop	r25
    1ac2:	8f 91       	pop	r24
    1ac4:	7f 91       	pop	r23
    1ac6:	6f 91       	pop	r22
    1ac8:	5f 91       	pop	r21
    1aca:	4f 91       	pop	r20
    1acc:	3f 91       	pop	r19
    1ace:	2f 91       	pop	r18
    1ad0:	0f 90       	pop	r0
    1ad2:	0f be       	out	0x3f, r0	; 63
    1ad4:	0f 90       	pop	r0
    1ad6:	1f 90       	pop	r1
    1ad8:	18 95       	reti

00001ada <__vector_5>:

ISR(VECTOR_TIM2_OVF)
{
    1ada:	1f 92       	push	r1
    1adc:	0f 92       	push	r0
    1ade:	0f b6       	in	r0, 0x3f	; 63
    1ae0:	0f 92       	push	r0
    1ae2:	11 24       	eor	r1, r1
    1ae4:	2f 93       	push	r18
    1ae6:	3f 93       	push	r19
    1ae8:	4f 93       	push	r20
    1aea:	5f 93       	push	r21
    1aec:	6f 93       	push	r22
    1aee:	7f 93       	push	r23
    1af0:	8f 93       	push	r24
    1af2:	9f 93       	push	r25
    1af4:	af 93       	push	r26
    1af6:	bf 93       	push	r27
    1af8:	ef 93       	push	r30
    1afa:	ff 93       	push	r31
    1afc:	df 93       	push	r29
    1afe:	cf 93       	push	r28
    1b00:	cd b7       	in	r28, 0x3d	; 61
    1b02:	de b7       	in	r29, 0x3e	; 62
    if (NULL_PTR != Callback_Gpt_TIM2_OVF)
    1b04:	80 91 8c 00 	lds	r24, 0x008C
    1b08:	90 91 8d 00 	lds	r25, 0x008D
    1b0c:	00 97       	sbiw	r24, 0x00	; 0
    1b0e:	29 f0       	breq	.+10     	; 0x1b1a <__vector_5+0x40>
    {
        Callback_Gpt_TIM2_OVF();
    1b10:	e0 91 8c 00 	lds	r30, 0x008C
    1b14:	f0 91 8d 00 	lds	r31, 0x008D
    1b18:	09 95       	icall
    }
}
    1b1a:	cf 91       	pop	r28
    1b1c:	df 91       	pop	r29
    1b1e:	ff 91       	pop	r31
    1b20:	ef 91       	pop	r30
    1b22:	bf 91       	pop	r27
    1b24:	af 91       	pop	r26
    1b26:	9f 91       	pop	r25
    1b28:	8f 91       	pop	r24
    1b2a:	7f 91       	pop	r23
    1b2c:	6f 91       	pop	r22
    1b2e:	5f 91       	pop	r21
    1b30:	4f 91       	pop	r20
    1b32:	3f 91       	pop	r19
    1b34:	2f 91       	pop	r18
    1b36:	0f 90       	pop	r0
    1b38:	0f be       	out	0x3f, r0	; 63
    1b3a:	0f 90       	pop	r0
    1b3c:	1f 90       	pop	r1
    1b3e:	18 95       	reti

00001b40 <__vector_4>:

ISR(VECTOR_TIM2_COMP)
{
    1b40:	1f 92       	push	r1
    1b42:	0f 92       	push	r0
    1b44:	0f b6       	in	r0, 0x3f	; 63
    1b46:	0f 92       	push	r0
    1b48:	11 24       	eor	r1, r1
    1b4a:	2f 93       	push	r18
    1b4c:	3f 93       	push	r19
    1b4e:	4f 93       	push	r20
    1b50:	5f 93       	push	r21
    1b52:	6f 93       	push	r22
    1b54:	7f 93       	push	r23
    1b56:	8f 93       	push	r24
    1b58:	9f 93       	push	r25
    1b5a:	af 93       	push	r26
    1b5c:	bf 93       	push	r27
    1b5e:	ef 93       	push	r30
    1b60:	ff 93       	push	r31
    1b62:	df 93       	push	r29
    1b64:	cf 93       	push	r28
    1b66:	cd b7       	in	r28, 0x3d	; 61
    1b68:	de b7       	in	r29, 0x3e	; 62
    if (NULL_PTR != Callback_Gpt_TIM2_COMP)
    1b6a:	80 91 8e 00 	lds	r24, 0x008E
    1b6e:	90 91 8f 00 	lds	r25, 0x008F
    1b72:	00 97       	sbiw	r24, 0x00	; 0
    1b74:	29 f0       	breq	.+10     	; 0x1b80 <__vector_4+0x40>
    {
        Callback_Gpt_TIM2_COMP();
    1b76:	e0 91 8e 00 	lds	r30, 0x008E
    1b7a:	f0 91 8f 00 	lds	r31, 0x008F
    1b7e:	09 95       	icall
    }
}
    1b80:	cf 91       	pop	r28
    1b82:	df 91       	pop	r29
    1b84:	ff 91       	pop	r31
    1b86:	ef 91       	pop	r30
    1b88:	bf 91       	pop	r27
    1b8a:	af 91       	pop	r26
    1b8c:	9f 91       	pop	r25
    1b8e:	8f 91       	pop	r24
    1b90:	7f 91       	pop	r23
    1b92:	6f 91       	pop	r22
    1b94:	5f 91       	pop	r21
    1b96:	4f 91       	pop	r20
    1b98:	3f 91       	pop	r19
    1b9a:	2f 91       	pop	r18
    1b9c:	0f 90       	pop	r0
    1b9e:	0f be       	out	0x3f, r0	; 63
    1ba0:	0f 90       	pop	r0
    1ba2:	1f 90       	pop	r1
    1ba4:	18 95       	reti

00001ba6 <Gpt_Init>:


StdReturnType Gpt_Init(Gpt_ConfigurationType* config)
{
    1ba6:	df 93       	push	r29
    1ba8:	cf 93       	push	r28
    1baa:	cd b7       	in	r28, 0x3d	; 61
    1bac:	de b7       	in	r29, 0x3e	; 62
    1bae:	2b 97       	sbiw	r28, 0x0b	; 11
    1bb0:	0f b6       	in	r0, 0x3f	; 63
    1bb2:	f8 94       	cli
    1bb4:	de bf       	out	0x3e, r29	; 62
    1bb6:	0f be       	out	0x3f, r0	; 63
    1bb8:	cd bf       	out	0x3d, r28	; 61
    1bba:	9b 83       	std	Y+3, r25	; 0x03
    1bbc:	8a 83       	std	Y+2, r24	; 0x02
    StdReturnType retVal = E_OK;
    1bbe:	19 82       	std	Y+1, r1	; 0x01
    if (config->TIM0_mode != GPT_MODE_OFF)
    1bc0:	ea 81       	ldd	r30, Y+2	; 0x02
    1bc2:	fb 81       	ldd	r31, Y+3	; 0x03
    1bc4:	80 81       	ld	r24, Z
    1bc6:	88 23       	and	r24, r24
    1bc8:	09 f4       	brne	.+2      	; 0x1bcc <Gpt_Init+0x26>
    1bca:	91 c0       	rjmp	.+290    	; 0x1cee <Gpt_Init+0x148>
    {
        /* Waveform Generation Mode */
        if (GPT_MODE_NORMAL == config->TIM0_mode)
    1bcc:	ea 81       	ldd	r30, Y+2	; 0x02
    1bce:	fb 81       	ldd	r31, Y+3	; 0x03
    1bd0:	80 81       	ld	r24, Z
    1bd2:	81 30       	cpi	r24, 0x01	; 1
    1bd4:	79 f4       	brne	.+30     	; 0x1bf4 <Gpt_Init+0x4e>
        {
            CLR_BIT(TCCR0, 3);
    1bd6:	a3 e5       	ldi	r26, 0x53	; 83
    1bd8:	b0 e0       	ldi	r27, 0x00	; 0
    1bda:	e3 e5       	ldi	r30, 0x53	; 83
    1bdc:	f0 e0       	ldi	r31, 0x00	; 0
    1bde:	80 81       	ld	r24, Z
    1be0:	87 7f       	andi	r24, 0xF7	; 247
    1be2:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, 6);
    1be4:	a3 e5       	ldi	r26, 0x53	; 83
    1be6:	b0 e0       	ldi	r27, 0x00	; 0
    1be8:	e3 e5       	ldi	r30, 0x53	; 83
    1bea:	f0 e0       	ldi	r31, 0x00	; 0
    1bec:	80 81       	ld	r24, Z
    1bee:	8f 7b       	andi	r24, 0xBF	; 191
    1bf0:	8c 93       	st	X, r24
    1bf2:	16 c0       	rjmp	.+44     	; 0x1c20 <Gpt_Init+0x7a>
        }
        else if (GPT_MODE_CTC == config->TIM0_mode)
    1bf4:	ea 81       	ldd	r30, Y+2	; 0x02
    1bf6:	fb 81       	ldd	r31, Y+3	; 0x03
    1bf8:	80 81       	ld	r24, Z
    1bfa:	82 30       	cpi	r24, 0x02	; 2
    1bfc:	79 f4       	brne	.+30     	; 0x1c1c <Gpt_Init+0x76>
        {
            CLR_BIT(TCCR0, 3);
    1bfe:	a3 e5       	ldi	r26, 0x53	; 83
    1c00:	b0 e0       	ldi	r27, 0x00	; 0
    1c02:	e3 e5       	ldi	r30, 0x53	; 83
    1c04:	f0 e0       	ldi	r31, 0x00	; 0
    1c06:	80 81       	ld	r24, Z
    1c08:	87 7f       	andi	r24, 0xF7	; 247
    1c0a:	8c 93       	st	X, r24
            SET_BIT(TCCR0, 6);
    1c0c:	a3 e5       	ldi	r26, 0x53	; 83
    1c0e:	b0 e0       	ldi	r27, 0x00	; 0
    1c10:	e3 e5       	ldi	r30, 0x53	; 83
    1c12:	f0 e0       	ldi	r31, 0x00	; 0
    1c14:	80 81       	ld	r24, Z
    1c16:	80 64       	ori	r24, 0x40	; 64
    1c18:	8c 93       	st	X, r24
    1c1a:	02 c0       	rjmp	.+4      	; 0x1c20 <Gpt_Init+0x7a>
        }
        else
        {
            retVal = E_NOT_OK;
    1c1c:	81 e0       	ldi	r24, 0x01	; 1
    1c1e:	89 83       	std	Y+1, r24	; 0x01
        }

        /*  Compare Output Mode */
        switch (config->TIM0_out)
    1c20:	ea 81       	ldd	r30, Y+2	; 0x02
    1c22:	fb 81       	ldd	r31, Y+3	; 0x03
    1c24:	82 81       	ldd	r24, Z+2	; 0x02
    1c26:	28 2f       	mov	r18, r24
    1c28:	30 e0       	ldi	r19, 0x00	; 0
    1c2a:	3b 87       	std	Y+11, r19	; 0x0b
    1c2c:	2a 87       	std	Y+10, r18	; 0x0a
    1c2e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c30:	9b 85       	ldd	r25, Y+11	; 0x0b
    1c32:	81 30       	cpi	r24, 0x01	; 1
    1c34:	91 05       	cpc	r25, r1
    1c36:	21 f1       	breq	.+72     	; 0x1c80 <Gpt_Init+0xda>
    1c38:	2a 85       	ldd	r18, Y+10	; 0x0a
    1c3a:	3b 85       	ldd	r19, Y+11	; 0x0b
    1c3c:	22 30       	cpi	r18, 0x02	; 2
    1c3e:	31 05       	cpc	r19, r1
    1c40:	2c f4       	brge	.+10     	; 0x1c4c <Gpt_Init+0xa6>
    1c42:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c44:	9b 85       	ldd	r25, Y+11	; 0x0b
    1c46:	00 97       	sbiw	r24, 0x00	; 0
    1c48:	61 f0       	breq	.+24     	; 0x1c62 <Gpt_Init+0xbc>
    1c4a:	47 c0       	rjmp	.+142    	; 0x1cda <Gpt_Init+0x134>
    1c4c:	2a 85       	ldd	r18, Y+10	; 0x0a
    1c4e:	3b 85       	ldd	r19, Y+11	; 0x0b
    1c50:	22 30       	cpi	r18, 0x02	; 2
    1c52:	31 05       	cpc	r19, r1
    1c54:	21 f1       	breq	.+72     	; 0x1c9e <Gpt_Init+0xf8>
    1c56:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c58:	9b 85       	ldd	r25, Y+11	; 0x0b
    1c5a:	83 30       	cpi	r24, 0x03	; 3
    1c5c:	91 05       	cpc	r25, r1
    1c5e:	71 f1       	breq	.+92     	; 0x1cbc <Gpt_Init+0x116>
    1c60:	3c c0       	rjmp	.+120    	; 0x1cda <Gpt_Init+0x134>
        {
        case GPT_OUT_DISCONNECTED:
            CLR_BIT(TCCR0, 4);
    1c62:	a3 e5       	ldi	r26, 0x53	; 83
    1c64:	b0 e0       	ldi	r27, 0x00	; 0
    1c66:	e3 e5       	ldi	r30, 0x53	; 83
    1c68:	f0 e0       	ldi	r31, 0x00	; 0
    1c6a:	80 81       	ld	r24, Z
    1c6c:	8f 7e       	andi	r24, 0xEF	; 239
    1c6e:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, 5);
    1c70:	a3 e5       	ldi	r26, 0x53	; 83
    1c72:	b0 e0       	ldi	r27, 0x00	; 0
    1c74:	e3 e5       	ldi	r30, 0x53	; 83
    1c76:	f0 e0       	ldi	r31, 0x00	; 0
    1c78:	80 81       	ld	r24, Z
    1c7a:	8f 7d       	andi	r24, 0xDF	; 223
    1c7c:	8c 93       	st	X, r24
    1c7e:	2f c0       	rjmp	.+94     	; 0x1cde <Gpt_Init+0x138>
            break;
        case GPT_OUT_TOGGLE:
            SET_BIT(TCCR0, 4);
    1c80:	a3 e5       	ldi	r26, 0x53	; 83
    1c82:	b0 e0       	ldi	r27, 0x00	; 0
    1c84:	e3 e5       	ldi	r30, 0x53	; 83
    1c86:	f0 e0       	ldi	r31, 0x00	; 0
    1c88:	80 81       	ld	r24, Z
    1c8a:	80 61       	ori	r24, 0x10	; 16
    1c8c:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, 5);
    1c8e:	a3 e5       	ldi	r26, 0x53	; 83
    1c90:	b0 e0       	ldi	r27, 0x00	; 0
    1c92:	e3 e5       	ldi	r30, 0x53	; 83
    1c94:	f0 e0       	ldi	r31, 0x00	; 0
    1c96:	80 81       	ld	r24, Z
    1c98:	8f 7d       	andi	r24, 0xDF	; 223
    1c9a:	8c 93       	st	X, r24
    1c9c:	20 c0       	rjmp	.+64     	; 0x1cde <Gpt_Init+0x138>
            break;
        case GPT_OUT_CLR:
            CLR_BIT(TCCR0, 4);
    1c9e:	a3 e5       	ldi	r26, 0x53	; 83
    1ca0:	b0 e0       	ldi	r27, 0x00	; 0
    1ca2:	e3 e5       	ldi	r30, 0x53	; 83
    1ca4:	f0 e0       	ldi	r31, 0x00	; 0
    1ca6:	80 81       	ld	r24, Z
    1ca8:	8f 7e       	andi	r24, 0xEF	; 239
    1caa:	8c 93       	st	X, r24
            SET_BIT(TCCR0, 5);
    1cac:	a3 e5       	ldi	r26, 0x53	; 83
    1cae:	b0 e0       	ldi	r27, 0x00	; 0
    1cb0:	e3 e5       	ldi	r30, 0x53	; 83
    1cb2:	f0 e0       	ldi	r31, 0x00	; 0
    1cb4:	80 81       	ld	r24, Z
    1cb6:	80 62       	ori	r24, 0x20	; 32
    1cb8:	8c 93       	st	X, r24
    1cba:	11 c0       	rjmp	.+34     	; 0x1cde <Gpt_Init+0x138>
            break;
        case GPT_OUT_SET:
            SET_BIT(TCCR0, 4);
    1cbc:	a3 e5       	ldi	r26, 0x53	; 83
    1cbe:	b0 e0       	ldi	r27, 0x00	; 0
    1cc0:	e3 e5       	ldi	r30, 0x53	; 83
    1cc2:	f0 e0       	ldi	r31, 0x00	; 0
    1cc4:	80 81       	ld	r24, Z
    1cc6:	80 61       	ori	r24, 0x10	; 16
    1cc8:	8c 93       	st	X, r24
            SET_BIT(TCCR0, 5);
    1cca:	a3 e5       	ldi	r26, 0x53	; 83
    1ccc:	b0 e0       	ldi	r27, 0x00	; 0
    1cce:	e3 e5       	ldi	r30, 0x53	; 83
    1cd0:	f0 e0       	ldi	r31, 0x00	; 0
    1cd2:	80 81       	ld	r24, Z
    1cd4:	80 62       	ori	r24, 0x20	; 32
    1cd6:	8c 93       	st	X, r24
    1cd8:	02 c0       	rjmp	.+4      	; 0x1cde <Gpt_Init+0x138>
            break;
        default:
            retVal = E_NOT_OK;
    1cda:	81 e0       	ldi	r24, 0x01	; 1
    1cdc:	89 83       	std	Y+1, r24	; 0x01
            break;
        }

        /* Clock Select */
        retVal = Gpt_SetClockSource(GPT_CHANNEL_TIM0, config->TIM0_clk);
    1cde:	ea 81       	ldd	r30, Y+2	; 0x02
    1ce0:	fb 81       	ldd	r31, Y+3	; 0x03
    1ce2:	91 81       	ldd	r25, Z+1	; 0x01
    1ce4:	80 e0       	ldi	r24, 0x00	; 0
    1ce6:	69 2f       	mov	r22, r25
    1ce8:	0e 94 4c 10 	call	0x2098	; 0x2098 <Gpt_SetClockSource>
    1cec:	89 83       	std	Y+1, r24	; 0x01
    }

    if (config->TIM1_mode != GPT_MODE_OFF)
    1cee:	ea 81       	ldd	r30, Y+2	; 0x02
    1cf0:	fb 81       	ldd	r31, Y+3	; 0x03
    1cf2:	83 81       	ldd	r24, Z+3	; 0x03
    1cf4:	88 23       	and	r24, r24
    1cf6:	09 f4       	brne	.+2      	; 0x1cfa <Gpt_Init+0x154>
    1cf8:	2e c1       	rjmp	.+604    	; 0x1f56 <Gpt_Init+0x3b0>
    {
        /* Waveform Generation Mode */
        if (GPT_MODE_NORMAL == config->TIM1_mode)
    1cfa:	ea 81       	ldd	r30, Y+2	; 0x02
    1cfc:	fb 81       	ldd	r31, Y+3	; 0x03
    1cfe:	83 81       	ldd	r24, Z+3	; 0x03
    1d00:	81 30       	cpi	r24, 0x01	; 1
    1d02:	e9 f4       	brne	.+58     	; 0x1d3e <Gpt_Init+0x198>
        {
            CLR_BIT(TCCR1A, 0);
    1d04:	af e4       	ldi	r26, 0x4F	; 79
    1d06:	b0 e0       	ldi	r27, 0x00	; 0
    1d08:	ef e4       	ldi	r30, 0x4F	; 79
    1d0a:	f0 e0       	ldi	r31, 0x00	; 0
    1d0c:	80 81       	ld	r24, Z
    1d0e:	8e 7f       	andi	r24, 0xFE	; 254
    1d10:	8c 93       	st	X, r24
            CLR_BIT(TCCR1A, 1);
    1d12:	af e4       	ldi	r26, 0x4F	; 79
    1d14:	b0 e0       	ldi	r27, 0x00	; 0
    1d16:	ef e4       	ldi	r30, 0x4F	; 79
    1d18:	f0 e0       	ldi	r31, 0x00	; 0
    1d1a:	80 81       	ld	r24, Z
    1d1c:	8d 7f       	andi	r24, 0xFD	; 253
    1d1e:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B, 3);
    1d20:	ae e4       	ldi	r26, 0x4E	; 78
    1d22:	b0 e0       	ldi	r27, 0x00	; 0
    1d24:	ee e4       	ldi	r30, 0x4E	; 78
    1d26:	f0 e0       	ldi	r31, 0x00	; 0
    1d28:	80 81       	ld	r24, Z
    1d2a:	87 7f       	andi	r24, 0xF7	; 247
    1d2c:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B, 4);
    1d2e:	ae e4       	ldi	r26, 0x4E	; 78
    1d30:	b0 e0       	ldi	r27, 0x00	; 0
    1d32:	ee e4       	ldi	r30, 0x4E	; 78
    1d34:	f0 e0       	ldi	r31, 0x00	; 0
    1d36:	80 81       	ld	r24, Z
    1d38:	8f 7e       	andi	r24, 0xEF	; 239
    1d3a:	8c 93       	st	X, r24
    1d3c:	46 c0       	rjmp	.+140    	; 0x1dca <Gpt_Init+0x224>
        }
        else if (GPT_MODE_CTC == config->TIM1_mode)
    1d3e:	ea 81       	ldd	r30, Y+2	; 0x02
    1d40:	fb 81       	ldd	r31, Y+3	; 0x03
    1d42:	83 81       	ldd	r24, Z+3	; 0x03
    1d44:	82 30       	cpi	r24, 0x02	; 2
    1d46:	e9 f4       	brne	.+58     	; 0x1d82 <Gpt_Init+0x1dc>
        {
            CLR_BIT(TCCR1A, 0);
    1d48:	af e4       	ldi	r26, 0x4F	; 79
    1d4a:	b0 e0       	ldi	r27, 0x00	; 0
    1d4c:	ef e4       	ldi	r30, 0x4F	; 79
    1d4e:	f0 e0       	ldi	r31, 0x00	; 0
    1d50:	80 81       	ld	r24, Z
    1d52:	8e 7f       	andi	r24, 0xFE	; 254
    1d54:	8c 93       	st	X, r24
            CLR_BIT(TCCR1A, 1);
    1d56:	af e4       	ldi	r26, 0x4F	; 79
    1d58:	b0 e0       	ldi	r27, 0x00	; 0
    1d5a:	ef e4       	ldi	r30, 0x4F	; 79
    1d5c:	f0 e0       	ldi	r31, 0x00	; 0
    1d5e:	80 81       	ld	r24, Z
    1d60:	8d 7f       	andi	r24, 0xFD	; 253
    1d62:	8c 93       	st	X, r24
            SET_BIT(TCCR1B, 3);
    1d64:	ae e4       	ldi	r26, 0x4E	; 78
    1d66:	b0 e0       	ldi	r27, 0x00	; 0
    1d68:	ee e4       	ldi	r30, 0x4E	; 78
    1d6a:	f0 e0       	ldi	r31, 0x00	; 0
    1d6c:	80 81       	ld	r24, Z
    1d6e:	88 60       	ori	r24, 0x08	; 8
    1d70:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B, 4);
    1d72:	ae e4       	ldi	r26, 0x4E	; 78
    1d74:	b0 e0       	ldi	r27, 0x00	; 0
    1d76:	ee e4       	ldi	r30, 0x4E	; 78
    1d78:	f0 e0       	ldi	r31, 0x00	; 0
    1d7a:	80 81       	ld	r24, Z
    1d7c:	8f 7e       	andi	r24, 0xEF	; 239
    1d7e:	8c 93       	st	X, r24
    1d80:	24 c0       	rjmp	.+72     	; 0x1dca <Gpt_Init+0x224>
        }
        else if (GPT_MODE_CTC_ICR1 == config->TIM1_mode)
    1d82:	ea 81       	ldd	r30, Y+2	; 0x02
    1d84:	fb 81       	ldd	r31, Y+3	; 0x03
    1d86:	83 81       	ldd	r24, Z+3	; 0x03
    1d88:	83 30       	cpi	r24, 0x03	; 3
    1d8a:	e9 f4       	brne	.+58     	; 0x1dc6 <Gpt_Init+0x220>
        {
            CLR_BIT(TCCR1A, 0);
    1d8c:	af e4       	ldi	r26, 0x4F	; 79
    1d8e:	b0 e0       	ldi	r27, 0x00	; 0
    1d90:	ef e4       	ldi	r30, 0x4F	; 79
    1d92:	f0 e0       	ldi	r31, 0x00	; 0
    1d94:	80 81       	ld	r24, Z
    1d96:	8e 7f       	andi	r24, 0xFE	; 254
    1d98:	8c 93       	st	X, r24
            CLR_BIT(TCCR1A, 1);
    1d9a:	af e4       	ldi	r26, 0x4F	; 79
    1d9c:	b0 e0       	ldi	r27, 0x00	; 0
    1d9e:	ef e4       	ldi	r30, 0x4F	; 79
    1da0:	f0 e0       	ldi	r31, 0x00	; 0
    1da2:	80 81       	ld	r24, Z
    1da4:	8d 7f       	andi	r24, 0xFD	; 253
    1da6:	8c 93       	st	X, r24
            SET_BIT(TCCR1B, 3);
    1da8:	ae e4       	ldi	r26, 0x4E	; 78
    1daa:	b0 e0       	ldi	r27, 0x00	; 0
    1dac:	ee e4       	ldi	r30, 0x4E	; 78
    1dae:	f0 e0       	ldi	r31, 0x00	; 0
    1db0:	80 81       	ld	r24, Z
    1db2:	88 60       	ori	r24, 0x08	; 8
    1db4:	8c 93       	st	X, r24
            SET_BIT(TCCR1B, 4);
    1db6:	ae e4       	ldi	r26, 0x4E	; 78
    1db8:	b0 e0       	ldi	r27, 0x00	; 0
    1dba:	ee e4       	ldi	r30, 0x4E	; 78
    1dbc:	f0 e0       	ldi	r31, 0x00	; 0
    1dbe:	80 81       	ld	r24, Z
    1dc0:	80 61       	ori	r24, 0x10	; 16
    1dc2:	8c 93       	st	X, r24
    1dc4:	02 c0       	rjmp	.+4      	; 0x1dca <Gpt_Init+0x224>
        }
        else
        {
            retVal = E_NOT_OK;
    1dc6:	81 e0       	ldi	r24, 0x01	; 1
    1dc8:	89 83       	std	Y+1, r24	; 0x01
        }

        /*  Compare Output Mode */
        switch (config->TIM1A_out)
    1dca:	ea 81       	ldd	r30, Y+2	; 0x02
    1dcc:	fb 81       	ldd	r31, Y+3	; 0x03
    1dce:	85 81       	ldd	r24, Z+5	; 0x05
    1dd0:	28 2f       	mov	r18, r24
    1dd2:	30 e0       	ldi	r19, 0x00	; 0
    1dd4:	39 87       	std	Y+9, r19	; 0x09
    1dd6:	28 87       	std	Y+8, r18	; 0x08
    1dd8:	88 85       	ldd	r24, Y+8	; 0x08
    1dda:	99 85       	ldd	r25, Y+9	; 0x09
    1ddc:	81 30       	cpi	r24, 0x01	; 1
    1dde:	91 05       	cpc	r25, r1
    1de0:	21 f1       	breq	.+72     	; 0x1e2a <Gpt_Init+0x284>
    1de2:	28 85       	ldd	r18, Y+8	; 0x08
    1de4:	39 85       	ldd	r19, Y+9	; 0x09
    1de6:	22 30       	cpi	r18, 0x02	; 2
    1de8:	31 05       	cpc	r19, r1
    1dea:	2c f4       	brge	.+10     	; 0x1df6 <Gpt_Init+0x250>
    1dec:	88 85       	ldd	r24, Y+8	; 0x08
    1dee:	99 85       	ldd	r25, Y+9	; 0x09
    1df0:	00 97       	sbiw	r24, 0x00	; 0
    1df2:	61 f0       	breq	.+24     	; 0x1e0c <Gpt_Init+0x266>
    1df4:	47 c0       	rjmp	.+142    	; 0x1e84 <Gpt_Init+0x2de>
    1df6:	28 85       	ldd	r18, Y+8	; 0x08
    1df8:	39 85       	ldd	r19, Y+9	; 0x09
    1dfa:	22 30       	cpi	r18, 0x02	; 2
    1dfc:	31 05       	cpc	r19, r1
    1dfe:	21 f1       	breq	.+72     	; 0x1e48 <Gpt_Init+0x2a2>
    1e00:	88 85       	ldd	r24, Y+8	; 0x08
    1e02:	99 85       	ldd	r25, Y+9	; 0x09
    1e04:	83 30       	cpi	r24, 0x03	; 3
    1e06:	91 05       	cpc	r25, r1
    1e08:	71 f1       	breq	.+92     	; 0x1e66 <Gpt_Init+0x2c0>
    1e0a:	3c c0       	rjmp	.+120    	; 0x1e84 <Gpt_Init+0x2de>
        {
        case GPT_OUT_DISCONNECTED:
            CLR_BIT(TCCR1A, 6);
    1e0c:	af e4       	ldi	r26, 0x4F	; 79
    1e0e:	b0 e0       	ldi	r27, 0x00	; 0
    1e10:	ef e4       	ldi	r30, 0x4F	; 79
    1e12:	f0 e0       	ldi	r31, 0x00	; 0
    1e14:	80 81       	ld	r24, Z
    1e16:	8f 7b       	andi	r24, 0xBF	; 191
    1e18:	8c 93       	st	X, r24
            CLR_BIT(TCCR1A, 7);
    1e1a:	af e4       	ldi	r26, 0x4F	; 79
    1e1c:	b0 e0       	ldi	r27, 0x00	; 0
    1e1e:	ef e4       	ldi	r30, 0x4F	; 79
    1e20:	f0 e0       	ldi	r31, 0x00	; 0
    1e22:	80 81       	ld	r24, Z
    1e24:	8f 77       	andi	r24, 0x7F	; 127
    1e26:	8c 93       	st	X, r24
    1e28:	2f c0       	rjmp	.+94     	; 0x1e88 <Gpt_Init+0x2e2>
            break;
        case GPT_OUT_TOGGLE:
            SET_BIT(TCCR1A, 6);
    1e2a:	af e4       	ldi	r26, 0x4F	; 79
    1e2c:	b0 e0       	ldi	r27, 0x00	; 0
    1e2e:	ef e4       	ldi	r30, 0x4F	; 79
    1e30:	f0 e0       	ldi	r31, 0x00	; 0
    1e32:	80 81       	ld	r24, Z
    1e34:	80 64       	ori	r24, 0x40	; 64
    1e36:	8c 93       	st	X, r24
            CLR_BIT(TCCR1A, 7);
    1e38:	af e4       	ldi	r26, 0x4F	; 79
    1e3a:	b0 e0       	ldi	r27, 0x00	; 0
    1e3c:	ef e4       	ldi	r30, 0x4F	; 79
    1e3e:	f0 e0       	ldi	r31, 0x00	; 0
    1e40:	80 81       	ld	r24, Z
    1e42:	8f 77       	andi	r24, 0x7F	; 127
    1e44:	8c 93       	st	X, r24
    1e46:	20 c0       	rjmp	.+64     	; 0x1e88 <Gpt_Init+0x2e2>
            break;
        case GPT_OUT_CLR:
            CLR_BIT(TCCR1A, 6);
    1e48:	af e4       	ldi	r26, 0x4F	; 79
    1e4a:	b0 e0       	ldi	r27, 0x00	; 0
    1e4c:	ef e4       	ldi	r30, 0x4F	; 79
    1e4e:	f0 e0       	ldi	r31, 0x00	; 0
    1e50:	80 81       	ld	r24, Z
    1e52:	8f 7b       	andi	r24, 0xBF	; 191
    1e54:	8c 93       	st	X, r24
            SET_BIT(TCCR1A, 7);
    1e56:	af e4       	ldi	r26, 0x4F	; 79
    1e58:	b0 e0       	ldi	r27, 0x00	; 0
    1e5a:	ef e4       	ldi	r30, 0x4F	; 79
    1e5c:	f0 e0       	ldi	r31, 0x00	; 0
    1e5e:	80 81       	ld	r24, Z
    1e60:	80 68       	ori	r24, 0x80	; 128
    1e62:	8c 93       	st	X, r24
    1e64:	11 c0       	rjmp	.+34     	; 0x1e88 <Gpt_Init+0x2e2>
            break;
        case GPT_OUT_SET:
            SET_BIT(TCCR1A, 6);
    1e66:	af e4       	ldi	r26, 0x4F	; 79
    1e68:	b0 e0       	ldi	r27, 0x00	; 0
    1e6a:	ef e4       	ldi	r30, 0x4F	; 79
    1e6c:	f0 e0       	ldi	r31, 0x00	; 0
    1e6e:	80 81       	ld	r24, Z
    1e70:	80 64       	ori	r24, 0x40	; 64
    1e72:	8c 93       	st	X, r24
            SET_BIT(TCCR1A, 7);
    1e74:	af e4       	ldi	r26, 0x4F	; 79
    1e76:	b0 e0       	ldi	r27, 0x00	; 0
    1e78:	ef e4       	ldi	r30, 0x4F	; 79
    1e7a:	f0 e0       	ldi	r31, 0x00	; 0
    1e7c:	80 81       	ld	r24, Z
    1e7e:	80 68       	ori	r24, 0x80	; 128
    1e80:	8c 93       	st	X, r24
    1e82:	02 c0       	rjmp	.+4      	; 0x1e88 <Gpt_Init+0x2e2>
            break;
        default:
            retVal = E_NOT_OK;
    1e84:	81 e0       	ldi	r24, 0x01	; 1
    1e86:	89 83       	std	Y+1, r24	; 0x01
            break;
        }
        switch (config->TIM1B_out)
    1e88:	ea 81       	ldd	r30, Y+2	; 0x02
    1e8a:	fb 81       	ldd	r31, Y+3	; 0x03
    1e8c:	86 81       	ldd	r24, Z+6	; 0x06
    1e8e:	28 2f       	mov	r18, r24
    1e90:	30 e0       	ldi	r19, 0x00	; 0
    1e92:	3f 83       	std	Y+7, r19	; 0x07
    1e94:	2e 83       	std	Y+6, r18	; 0x06
    1e96:	8e 81       	ldd	r24, Y+6	; 0x06
    1e98:	9f 81       	ldd	r25, Y+7	; 0x07
    1e9a:	81 30       	cpi	r24, 0x01	; 1
    1e9c:	91 05       	cpc	r25, r1
    1e9e:	21 f1       	breq	.+72     	; 0x1ee8 <Gpt_Init+0x342>
    1ea0:	2e 81       	ldd	r18, Y+6	; 0x06
    1ea2:	3f 81       	ldd	r19, Y+7	; 0x07
    1ea4:	22 30       	cpi	r18, 0x02	; 2
    1ea6:	31 05       	cpc	r19, r1
    1ea8:	2c f4       	brge	.+10     	; 0x1eb4 <Gpt_Init+0x30e>
    1eaa:	8e 81       	ldd	r24, Y+6	; 0x06
    1eac:	9f 81       	ldd	r25, Y+7	; 0x07
    1eae:	00 97       	sbiw	r24, 0x00	; 0
    1eb0:	61 f0       	breq	.+24     	; 0x1eca <Gpt_Init+0x324>
    1eb2:	47 c0       	rjmp	.+142    	; 0x1f42 <Gpt_Init+0x39c>
    1eb4:	2e 81       	ldd	r18, Y+6	; 0x06
    1eb6:	3f 81       	ldd	r19, Y+7	; 0x07
    1eb8:	22 30       	cpi	r18, 0x02	; 2
    1eba:	31 05       	cpc	r19, r1
    1ebc:	21 f1       	breq	.+72     	; 0x1f06 <Gpt_Init+0x360>
    1ebe:	8e 81       	ldd	r24, Y+6	; 0x06
    1ec0:	9f 81       	ldd	r25, Y+7	; 0x07
    1ec2:	83 30       	cpi	r24, 0x03	; 3
    1ec4:	91 05       	cpc	r25, r1
    1ec6:	71 f1       	breq	.+92     	; 0x1f24 <Gpt_Init+0x37e>
    1ec8:	3c c0       	rjmp	.+120    	; 0x1f42 <Gpt_Init+0x39c>
        {
        case GPT_OUT_DISCONNECTED:
            CLR_BIT(TCCR1A, 4);
    1eca:	af e4       	ldi	r26, 0x4F	; 79
    1ecc:	b0 e0       	ldi	r27, 0x00	; 0
    1ece:	ef e4       	ldi	r30, 0x4F	; 79
    1ed0:	f0 e0       	ldi	r31, 0x00	; 0
    1ed2:	80 81       	ld	r24, Z
    1ed4:	8f 7e       	andi	r24, 0xEF	; 239
    1ed6:	8c 93       	st	X, r24
            CLR_BIT(TCCR1A, 5);
    1ed8:	af e4       	ldi	r26, 0x4F	; 79
    1eda:	b0 e0       	ldi	r27, 0x00	; 0
    1edc:	ef e4       	ldi	r30, 0x4F	; 79
    1ede:	f0 e0       	ldi	r31, 0x00	; 0
    1ee0:	80 81       	ld	r24, Z
    1ee2:	8f 7d       	andi	r24, 0xDF	; 223
    1ee4:	8c 93       	st	X, r24
    1ee6:	2f c0       	rjmp	.+94     	; 0x1f46 <Gpt_Init+0x3a0>
            break;
        case GPT_OUT_TOGGLE:
            SET_BIT(TCCR1A, 4);
    1ee8:	af e4       	ldi	r26, 0x4F	; 79
    1eea:	b0 e0       	ldi	r27, 0x00	; 0
    1eec:	ef e4       	ldi	r30, 0x4F	; 79
    1eee:	f0 e0       	ldi	r31, 0x00	; 0
    1ef0:	80 81       	ld	r24, Z
    1ef2:	80 61       	ori	r24, 0x10	; 16
    1ef4:	8c 93       	st	X, r24
            CLR_BIT(TCCR1A, 5);
    1ef6:	af e4       	ldi	r26, 0x4F	; 79
    1ef8:	b0 e0       	ldi	r27, 0x00	; 0
    1efa:	ef e4       	ldi	r30, 0x4F	; 79
    1efc:	f0 e0       	ldi	r31, 0x00	; 0
    1efe:	80 81       	ld	r24, Z
    1f00:	8f 7d       	andi	r24, 0xDF	; 223
    1f02:	8c 93       	st	X, r24
    1f04:	20 c0       	rjmp	.+64     	; 0x1f46 <Gpt_Init+0x3a0>
            break;
        case GPT_OUT_CLR:
            CLR_BIT(TCCR1A, 4);
    1f06:	af e4       	ldi	r26, 0x4F	; 79
    1f08:	b0 e0       	ldi	r27, 0x00	; 0
    1f0a:	ef e4       	ldi	r30, 0x4F	; 79
    1f0c:	f0 e0       	ldi	r31, 0x00	; 0
    1f0e:	80 81       	ld	r24, Z
    1f10:	8f 7e       	andi	r24, 0xEF	; 239
    1f12:	8c 93       	st	X, r24
            SET_BIT(TCCR1A, 5);
    1f14:	af e4       	ldi	r26, 0x4F	; 79
    1f16:	b0 e0       	ldi	r27, 0x00	; 0
    1f18:	ef e4       	ldi	r30, 0x4F	; 79
    1f1a:	f0 e0       	ldi	r31, 0x00	; 0
    1f1c:	80 81       	ld	r24, Z
    1f1e:	80 62       	ori	r24, 0x20	; 32
    1f20:	8c 93       	st	X, r24
    1f22:	11 c0       	rjmp	.+34     	; 0x1f46 <Gpt_Init+0x3a0>
            break;
        case GPT_OUT_SET:
            SET_BIT(TCCR1A, 4);
    1f24:	af e4       	ldi	r26, 0x4F	; 79
    1f26:	b0 e0       	ldi	r27, 0x00	; 0
    1f28:	ef e4       	ldi	r30, 0x4F	; 79
    1f2a:	f0 e0       	ldi	r31, 0x00	; 0
    1f2c:	80 81       	ld	r24, Z
    1f2e:	80 61       	ori	r24, 0x10	; 16
    1f30:	8c 93       	st	X, r24
            SET_BIT(TCCR1A, 5);
    1f32:	af e4       	ldi	r26, 0x4F	; 79
    1f34:	b0 e0       	ldi	r27, 0x00	; 0
    1f36:	ef e4       	ldi	r30, 0x4F	; 79
    1f38:	f0 e0       	ldi	r31, 0x00	; 0
    1f3a:	80 81       	ld	r24, Z
    1f3c:	80 62       	ori	r24, 0x20	; 32
    1f3e:	8c 93       	st	X, r24
    1f40:	02 c0       	rjmp	.+4      	; 0x1f46 <Gpt_Init+0x3a0>
            break;
        default:
            retVal = E_NOT_OK;
    1f42:	81 e0       	ldi	r24, 0x01	; 1
    1f44:	89 83       	std	Y+1, r24	; 0x01
            break;
        }

        /* Clock Select */
        retVal = Gpt_SetClockSource(GPT_CHANNEL_TIM1, config->TIM1_clk);
    1f46:	ea 81       	ldd	r30, Y+2	; 0x02
    1f48:	fb 81       	ldd	r31, Y+3	; 0x03
    1f4a:	94 81       	ldd	r25, Z+4	; 0x04
    1f4c:	81 e0       	ldi	r24, 0x01	; 1
    1f4e:	69 2f       	mov	r22, r25
    1f50:	0e 94 4c 10 	call	0x2098	; 0x2098 <Gpt_SetClockSource>
    1f54:	89 83       	std	Y+1, r24	; 0x01
    }

    if (config->TIM2_mode != GPT_MODE_OFF)
    1f56:	ea 81       	ldd	r30, Y+2	; 0x02
    1f58:	fb 81       	ldd	r31, Y+3	; 0x03
    1f5a:	87 81       	ldd	r24, Z+7	; 0x07
    1f5c:	88 23       	and	r24, r24
    1f5e:	09 f4       	brne	.+2      	; 0x1f62 <Gpt_Init+0x3bc>
    1f60:	91 c0       	rjmp	.+290    	; 0x2084 <Gpt_Init+0x4de>
    {
        /* Waveform Generation Mode */
        if (GPT_MODE_NORMAL == config->TIM2_mode)
    1f62:	ea 81       	ldd	r30, Y+2	; 0x02
    1f64:	fb 81       	ldd	r31, Y+3	; 0x03
    1f66:	87 81       	ldd	r24, Z+7	; 0x07
    1f68:	81 30       	cpi	r24, 0x01	; 1
    1f6a:	79 f4       	brne	.+30     	; 0x1f8a <Gpt_Init+0x3e4>
        {
            CLR_BIT(TCCR2, 3);
    1f6c:	a5 e4       	ldi	r26, 0x45	; 69
    1f6e:	b0 e0       	ldi	r27, 0x00	; 0
    1f70:	e5 e4       	ldi	r30, 0x45	; 69
    1f72:	f0 e0       	ldi	r31, 0x00	; 0
    1f74:	80 81       	ld	r24, Z
    1f76:	87 7f       	andi	r24, 0xF7	; 247
    1f78:	8c 93       	st	X, r24
            CLR_BIT(TCCR2, 6);
    1f7a:	a5 e4       	ldi	r26, 0x45	; 69
    1f7c:	b0 e0       	ldi	r27, 0x00	; 0
    1f7e:	e5 e4       	ldi	r30, 0x45	; 69
    1f80:	f0 e0       	ldi	r31, 0x00	; 0
    1f82:	80 81       	ld	r24, Z
    1f84:	8f 7b       	andi	r24, 0xBF	; 191
    1f86:	8c 93       	st	X, r24
    1f88:	16 c0       	rjmp	.+44     	; 0x1fb6 <Gpt_Init+0x410>
        }
        else if (GPT_MODE_CTC == config->TIM2_mode)
    1f8a:	ea 81       	ldd	r30, Y+2	; 0x02
    1f8c:	fb 81       	ldd	r31, Y+3	; 0x03
    1f8e:	87 81       	ldd	r24, Z+7	; 0x07
    1f90:	82 30       	cpi	r24, 0x02	; 2
    1f92:	79 f4       	brne	.+30     	; 0x1fb2 <Gpt_Init+0x40c>
        {
            CLR_BIT(TCCR2, 3);
    1f94:	a5 e4       	ldi	r26, 0x45	; 69
    1f96:	b0 e0       	ldi	r27, 0x00	; 0
    1f98:	e5 e4       	ldi	r30, 0x45	; 69
    1f9a:	f0 e0       	ldi	r31, 0x00	; 0
    1f9c:	80 81       	ld	r24, Z
    1f9e:	87 7f       	andi	r24, 0xF7	; 247
    1fa0:	8c 93       	st	X, r24
            SET_BIT(TCCR2, 6);
    1fa2:	a5 e4       	ldi	r26, 0x45	; 69
    1fa4:	b0 e0       	ldi	r27, 0x00	; 0
    1fa6:	e5 e4       	ldi	r30, 0x45	; 69
    1fa8:	f0 e0       	ldi	r31, 0x00	; 0
    1faa:	80 81       	ld	r24, Z
    1fac:	80 64       	ori	r24, 0x40	; 64
    1fae:	8c 93       	st	X, r24
    1fb0:	02 c0       	rjmp	.+4      	; 0x1fb6 <Gpt_Init+0x410>
        }
        else
        {
            retVal = E_NOT_OK;
    1fb2:	81 e0       	ldi	r24, 0x01	; 1
    1fb4:	89 83       	std	Y+1, r24	; 0x01
        }

        /*  Compare Output Mode */
        switch (config->TIM2_out)
    1fb6:	ea 81       	ldd	r30, Y+2	; 0x02
    1fb8:	fb 81       	ldd	r31, Y+3	; 0x03
    1fba:	81 85       	ldd	r24, Z+9	; 0x09
    1fbc:	28 2f       	mov	r18, r24
    1fbe:	30 e0       	ldi	r19, 0x00	; 0
    1fc0:	3d 83       	std	Y+5, r19	; 0x05
    1fc2:	2c 83       	std	Y+4, r18	; 0x04
    1fc4:	8c 81       	ldd	r24, Y+4	; 0x04
    1fc6:	9d 81       	ldd	r25, Y+5	; 0x05
    1fc8:	81 30       	cpi	r24, 0x01	; 1
    1fca:	91 05       	cpc	r25, r1
    1fcc:	21 f1       	breq	.+72     	; 0x2016 <Gpt_Init+0x470>
    1fce:	2c 81       	ldd	r18, Y+4	; 0x04
    1fd0:	3d 81       	ldd	r19, Y+5	; 0x05
    1fd2:	22 30       	cpi	r18, 0x02	; 2
    1fd4:	31 05       	cpc	r19, r1
    1fd6:	2c f4       	brge	.+10     	; 0x1fe2 <Gpt_Init+0x43c>
    1fd8:	8c 81       	ldd	r24, Y+4	; 0x04
    1fda:	9d 81       	ldd	r25, Y+5	; 0x05
    1fdc:	00 97       	sbiw	r24, 0x00	; 0
    1fde:	61 f0       	breq	.+24     	; 0x1ff8 <Gpt_Init+0x452>
    1fe0:	47 c0       	rjmp	.+142    	; 0x2070 <Gpt_Init+0x4ca>
    1fe2:	2c 81       	ldd	r18, Y+4	; 0x04
    1fe4:	3d 81       	ldd	r19, Y+5	; 0x05
    1fe6:	22 30       	cpi	r18, 0x02	; 2
    1fe8:	31 05       	cpc	r19, r1
    1fea:	21 f1       	breq	.+72     	; 0x2034 <Gpt_Init+0x48e>
    1fec:	8c 81       	ldd	r24, Y+4	; 0x04
    1fee:	9d 81       	ldd	r25, Y+5	; 0x05
    1ff0:	83 30       	cpi	r24, 0x03	; 3
    1ff2:	91 05       	cpc	r25, r1
    1ff4:	71 f1       	breq	.+92     	; 0x2052 <Gpt_Init+0x4ac>
    1ff6:	3c c0       	rjmp	.+120    	; 0x2070 <Gpt_Init+0x4ca>
        {
        case GPT_OUT_DISCONNECTED:
            CLR_BIT(TCCR2, 4);
    1ff8:	a5 e4       	ldi	r26, 0x45	; 69
    1ffa:	b0 e0       	ldi	r27, 0x00	; 0
    1ffc:	e5 e4       	ldi	r30, 0x45	; 69
    1ffe:	f0 e0       	ldi	r31, 0x00	; 0
    2000:	80 81       	ld	r24, Z
    2002:	8f 7e       	andi	r24, 0xEF	; 239
    2004:	8c 93       	st	X, r24
            CLR_BIT(TCCR2, 5);
    2006:	a5 e4       	ldi	r26, 0x45	; 69
    2008:	b0 e0       	ldi	r27, 0x00	; 0
    200a:	e5 e4       	ldi	r30, 0x45	; 69
    200c:	f0 e0       	ldi	r31, 0x00	; 0
    200e:	80 81       	ld	r24, Z
    2010:	8f 7d       	andi	r24, 0xDF	; 223
    2012:	8c 93       	st	X, r24
    2014:	2f c0       	rjmp	.+94     	; 0x2074 <Gpt_Init+0x4ce>
            break;
        case GPT_OUT_TOGGLE:
            SET_BIT(TCCR2, 4);
    2016:	a5 e4       	ldi	r26, 0x45	; 69
    2018:	b0 e0       	ldi	r27, 0x00	; 0
    201a:	e5 e4       	ldi	r30, 0x45	; 69
    201c:	f0 e0       	ldi	r31, 0x00	; 0
    201e:	80 81       	ld	r24, Z
    2020:	80 61       	ori	r24, 0x10	; 16
    2022:	8c 93       	st	X, r24
            CLR_BIT(TCCR2, 5);
    2024:	a5 e4       	ldi	r26, 0x45	; 69
    2026:	b0 e0       	ldi	r27, 0x00	; 0
    2028:	e5 e4       	ldi	r30, 0x45	; 69
    202a:	f0 e0       	ldi	r31, 0x00	; 0
    202c:	80 81       	ld	r24, Z
    202e:	8f 7d       	andi	r24, 0xDF	; 223
    2030:	8c 93       	st	X, r24
    2032:	20 c0       	rjmp	.+64     	; 0x2074 <Gpt_Init+0x4ce>
            break;
        case GPT_OUT_CLR:
            CLR_BIT(TCCR2, 4);
    2034:	a5 e4       	ldi	r26, 0x45	; 69
    2036:	b0 e0       	ldi	r27, 0x00	; 0
    2038:	e5 e4       	ldi	r30, 0x45	; 69
    203a:	f0 e0       	ldi	r31, 0x00	; 0
    203c:	80 81       	ld	r24, Z
    203e:	8f 7e       	andi	r24, 0xEF	; 239
    2040:	8c 93       	st	X, r24
            SET_BIT(TCCR2, 5);
    2042:	a5 e4       	ldi	r26, 0x45	; 69
    2044:	b0 e0       	ldi	r27, 0x00	; 0
    2046:	e5 e4       	ldi	r30, 0x45	; 69
    2048:	f0 e0       	ldi	r31, 0x00	; 0
    204a:	80 81       	ld	r24, Z
    204c:	80 62       	ori	r24, 0x20	; 32
    204e:	8c 93       	st	X, r24
    2050:	11 c0       	rjmp	.+34     	; 0x2074 <Gpt_Init+0x4ce>
            break;
        case GPT_OUT_SET:
            SET_BIT(TCCR2, 4);
    2052:	a5 e4       	ldi	r26, 0x45	; 69
    2054:	b0 e0       	ldi	r27, 0x00	; 0
    2056:	e5 e4       	ldi	r30, 0x45	; 69
    2058:	f0 e0       	ldi	r31, 0x00	; 0
    205a:	80 81       	ld	r24, Z
    205c:	80 61       	ori	r24, 0x10	; 16
    205e:	8c 93       	st	X, r24
            SET_BIT(TCCR2, 5);
    2060:	a5 e4       	ldi	r26, 0x45	; 69
    2062:	b0 e0       	ldi	r27, 0x00	; 0
    2064:	e5 e4       	ldi	r30, 0x45	; 69
    2066:	f0 e0       	ldi	r31, 0x00	; 0
    2068:	80 81       	ld	r24, Z
    206a:	80 62       	ori	r24, 0x20	; 32
    206c:	8c 93       	st	X, r24
    206e:	02 c0       	rjmp	.+4      	; 0x2074 <Gpt_Init+0x4ce>
            break;
        default:
            retVal = E_NOT_OK;
    2070:	81 e0       	ldi	r24, 0x01	; 1
    2072:	89 83       	std	Y+1, r24	; 0x01
            break;
        }
        /* Clock Select */
        retVal = Gpt_SetClockSource(GPT_CHANNEL_TIM2, config->TIM2_clk);
    2074:	ea 81       	ldd	r30, Y+2	; 0x02
    2076:	fb 81       	ldd	r31, Y+3	; 0x03
    2078:	90 85       	ldd	r25, Z+8	; 0x08
    207a:	82 e0       	ldi	r24, 0x02	; 2
    207c:	69 2f       	mov	r22, r25
    207e:	0e 94 4c 10 	call	0x2098	; 0x2098 <Gpt_SetClockSource>
    2082:	89 83       	std	Y+1, r24	; 0x01
    }

    return retVal;
    2084:	89 81       	ldd	r24, Y+1	; 0x01
}
    2086:	2b 96       	adiw	r28, 0x0b	; 11
    2088:	0f b6       	in	r0, 0x3f	; 63
    208a:	f8 94       	cli
    208c:	de bf       	out	0x3e, r29	; 62
    208e:	0f be       	out	0x3f, r0	; 63
    2090:	cd bf       	out	0x3d, r28	; 61
    2092:	cf 91       	pop	r28
    2094:	df 91       	pop	r29
    2096:	08 95       	ret

00002098 <Gpt_SetClockSource>:

StdReturnType Gpt_SetClockSource (Gpt_ChannelType channel, Gpt_ClkSourceType clk)
{
    2098:	df 93       	push	r29
    209a:	cf 93       	push	r28
    209c:	cd b7       	in	r28, 0x3d	; 61
    209e:	de b7       	in	r29, 0x3e	; 62
    20a0:	29 97       	sbiw	r28, 0x09	; 9
    20a2:	0f b6       	in	r0, 0x3f	; 63
    20a4:	f8 94       	cli
    20a6:	de bf       	out	0x3e, r29	; 62
    20a8:	0f be       	out	0x3f, r0	; 63
    20aa:	cd bf       	out	0x3d, r28	; 61
    20ac:	8a 83       	std	Y+2, r24	; 0x02
    20ae:	6b 83       	std	Y+3, r22	; 0x03
    StdReturnType retVal = E_OK;
    20b0:	19 82       	std	Y+1, r1	; 0x01
    if (GPT_CHANNEL_TIM0 == channel)
    20b2:	8a 81       	ldd	r24, Y+2	; 0x02
    20b4:	88 23       	and	r24, r24
    20b6:	09 f0       	breq	.+2      	; 0x20ba <Gpt_SetClockSource+0x22>
    20b8:	f3 c0       	rjmp	.+486    	; 0x22a0 <Gpt_SetClockSource+0x208>
    {
        switch (clk)
    20ba:	8b 81       	ldd	r24, Y+3	; 0x03
    20bc:	28 2f       	mov	r18, r24
    20be:	30 e0       	ldi	r19, 0x00	; 0
    20c0:	39 87       	std	Y+9, r19	; 0x09
    20c2:	28 87       	std	Y+8, r18	; 0x08
    20c4:	88 85       	ldd	r24, Y+8	; 0x08
    20c6:	99 85       	ldd	r25, Y+9	; 0x09
    20c8:	84 30       	cpi	r24, 0x04	; 4
    20ca:	91 05       	cpc	r25, r1
    20cc:	09 f4       	brne	.+2      	; 0x20d0 <Gpt_SetClockSource+0x38>
    20ce:	77 c0       	rjmp	.+238    	; 0x21be <Gpt_SetClockSource+0x126>
    20d0:	28 85       	ldd	r18, Y+8	; 0x08
    20d2:	39 85       	ldd	r19, Y+9	; 0x09
    20d4:	25 30       	cpi	r18, 0x05	; 5
    20d6:	31 05       	cpc	r19, r1
    20d8:	8c f4       	brge	.+34     	; 0x20fc <Gpt_SetClockSource+0x64>
    20da:	88 85       	ldd	r24, Y+8	; 0x08
    20dc:	99 85       	ldd	r25, Y+9	; 0x09
    20de:	81 30       	cpi	r24, 0x01	; 1
    20e0:	91 05       	cpc	r25, r1
    20e2:	09 f4       	brne	.+2      	; 0x20e6 <Gpt_SetClockSource+0x4e>
    20e4:	40 c0       	rjmp	.+128    	; 0x2166 <Gpt_SetClockSource+0xce>
    20e6:	28 85       	ldd	r18, Y+8	; 0x08
    20e8:	39 85       	ldd	r19, Y+9	; 0x09
    20ea:	22 30       	cpi	r18, 0x02	; 2
    20ec:	31 05       	cpc	r19, r1
    20ee:	09 f4       	brne	.+2      	; 0x20f2 <Gpt_SetClockSource+0x5a>
    20f0:	50 c0       	rjmp	.+160    	; 0x2192 <Gpt_SetClockSource+0xfa>
    20f2:	88 85       	ldd	r24, Y+8	; 0x08
    20f4:	99 85       	ldd	r25, Y+9	; 0x09
    20f6:	00 97       	sbiw	r24, 0x00	; 0
    20f8:	01 f1       	breq	.+64     	; 0x213a <Gpt_SetClockSource+0xa2>
    20fa:	cf c0       	rjmp	.+414    	; 0x229a <Gpt_SetClockSource+0x202>
    20fc:	28 85       	ldd	r18, Y+8	; 0x08
    20fe:	39 85       	ldd	r19, Y+9	; 0x09
    2100:	27 30       	cpi	r18, 0x07	; 7
    2102:	31 05       	cpc	r19, r1
    2104:	09 f4       	brne	.+2      	; 0x2108 <Gpt_SetClockSource+0x70>
    2106:	87 c0       	rjmp	.+270    	; 0x2216 <Gpt_SetClockSource+0x17e>
    2108:	88 85       	ldd	r24, Y+8	; 0x08
    210a:	99 85       	ldd	r25, Y+9	; 0x09
    210c:	88 30       	cpi	r24, 0x08	; 8
    210e:	91 05       	cpc	r25, r1
    2110:	3c f4       	brge	.+14     	; 0x2120 <Gpt_SetClockSource+0x88>
    2112:	28 85       	ldd	r18, Y+8	; 0x08
    2114:	39 85       	ldd	r19, Y+9	; 0x09
    2116:	26 30       	cpi	r18, 0x06	; 6
    2118:	31 05       	cpc	r19, r1
    211a:	09 f4       	brne	.+2      	; 0x211e <Gpt_SetClockSource+0x86>
    211c:	66 c0       	rjmp	.+204    	; 0x21ea <Gpt_SetClockSource+0x152>
    211e:	bd c0       	rjmp	.+378    	; 0x229a <Gpt_SetClockSource+0x202>
    2120:	88 85       	ldd	r24, Y+8	; 0x08
    2122:	99 85       	ldd	r25, Y+9	; 0x09
    2124:	88 30       	cpi	r24, 0x08	; 8
    2126:	91 05       	cpc	r25, r1
    2128:	09 f4       	brne	.+2      	; 0x212c <Gpt_SetClockSource+0x94>
    212a:	8b c0       	rjmp	.+278    	; 0x2242 <Gpt_SetClockSource+0x1aa>
    212c:	28 85       	ldd	r18, Y+8	; 0x08
    212e:	39 85       	ldd	r19, Y+9	; 0x09
    2130:	29 30       	cpi	r18, 0x09	; 9
    2132:	31 05       	cpc	r19, r1
    2134:	09 f4       	brne	.+2      	; 0x2138 <Gpt_SetClockSource+0xa0>
    2136:	9b c0       	rjmp	.+310    	; 0x226e <Gpt_SetClockSource+0x1d6>
    2138:	b0 c0       	rjmp	.+352    	; 0x229a <Gpt_SetClockSource+0x202>
        {
        case GPT_CLK_OFF:
            CLR_BIT(TCCR0, 0);
    213a:	a3 e5       	ldi	r26, 0x53	; 83
    213c:	b0 e0       	ldi	r27, 0x00	; 0
    213e:	e3 e5       	ldi	r30, 0x53	; 83
    2140:	f0 e0       	ldi	r31, 0x00	; 0
    2142:	80 81       	ld	r24, Z
    2144:	8e 7f       	andi	r24, 0xFE	; 254
    2146:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, 1);
    2148:	a3 e5       	ldi	r26, 0x53	; 83
    214a:	b0 e0       	ldi	r27, 0x00	; 0
    214c:	e3 e5       	ldi	r30, 0x53	; 83
    214e:	f0 e0       	ldi	r31, 0x00	; 0
    2150:	80 81       	ld	r24, Z
    2152:	8d 7f       	andi	r24, 0xFD	; 253
    2154:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, 2);
    2156:	a3 e5       	ldi	r26, 0x53	; 83
    2158:	b0 e0       	ldi	r27, 0x00	; 0
    215a:	e3 e5       	ldi	r30, 0x53	; 83
    215c:	f0 e0       	ldi	r31, 0x00	; 0
    215e:	80 81       	ld	r24, Z
    2160:	8b 7f       	andi	r24, 0xFB	; 251
    2162:	8c 93       	st	X, r24
    2164:	86 c2       	rjmp	.+1292   	; 0x2672 <Gpt_SetClockSource+0x5da>
            break;
        case GPT_CLK_PRESCALER_1:
            SET_BIT(TCCR0, 0);
    2166:	a3 e5       	ldi	r26, 0x53	; 83
    2168:	b0 e0       	ldi	r27, 0x00	; 0
    216a:	e3 e5       	ldi	r30, 0x53	; 83
    216c:	f0 e0       	ldi	r31, 0x00	; 0
    216e:	80 81       	ld	r24, Z
    2170:	81 60       	ori	r24, 0x01	; 1
    2172:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, 1);
    2174:	a3 e5       	ldi	r26, 0x53	; 83
    2176:	b0 e0       	ldi	r27, 0x00	; 0
    2178:	e3 e5       	ldi	r30, 0x53	; 83
    217a:	f0 e0       	ldi	r31, 0x00	; 0
    217c:	80 81       	ld	r24, Z
    217e:	8d 7f       	andi	r24, 0xFD	; 253
    2180:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, 2);
    2182:	a3 e5       	ldi	r26, 0x53	; 83
    2184:	b0 e0       	ldi	r27, 0x00	; 0
    2186:	e3 e5       	ldi	r30, 0x53	; 83
    2188:	f0 e0       	ldi	r31, 0x00	; 0
    218a:	80 81       	ld	r24, Z
    218c:	8b 7f       	andi	r24, 0xFB	; 251
    218e:	8c 93       	st	X, r24
    2190:	70 c2       	rjmp	.+1248   	; 0x2672 <Gpt_SetClockSource+0x5da>
            break;
        case GPT_CLK_PRESCALER_8:
            CLR_BIT(TCCR0, 0);
    2192:	a3 e5       	ldi	r26, 0x53	; 83
    2194:	b0 e0       	ldi	r27, 0x00	; 0
    2196:	e3 e5       	ldi	r30, 0x53	; 83
    2198:	f0 e0       	ldi	r31, 0x00	; 0
    219a:	80 81       	ld	r24, Z
    219c:	8e 7f       	andi	r24, 0xFE	; 254
    219e:	8c 93       	st	X, r24
            SET_BIT(TCCR0, 1);
    21a0:	a3 e5       	ldi	r26, 0x53	; 83
    21a2:	b0 e0       	ldi	r27, 0x00	; 0
    21a4:	e3 e5       	ldi	r30, 0x53	; 83
    21a6:	f0 e0       	ldi	r31, 0x00	; 0
    21a8:	80 81       	ld	r24, Z
    21aa:	82 60       	ori	r24, 0x02	; 2
    21ac:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, 2);
    21ae:	a3 e5       	ldi	r26, 0x53	; 83
    21b0:	b0 e0       	ldi	r27, 0x00	; 0
    21b2:	e3 e5       	ldi	r30, 0x53	; 83
    21b4:	f0 e0       	ldi	r31, 0x00	; 0
    21b6:	80 81       	ld	r24, Z
    21b8:	8b 7f       	andi	r24, 0xFB	; 251
    21ba:	8c 93       	st	X, r24
    21bc:	5a c2       	rjmp	.+1204   	; 0x2672 <Gpt_SetClockSource+0x5da>
            break;
        case GPT_CLK_PRESCALER_64:
            SET_BIT(TCCR0, 0);
    21be:	a3 e5       	ldi	r26, 0x53	; 83
    21c0:	b0 e0       	ldi	r27, 0x00	; 0
    21c2:	e3 e5       	ldi	r30, 0x53	; 83
    21c4:	f0 e0       	ldi	r31, 0x00	; 0
    21c6:	80 81       	ld	r24, Z
    21c8:	81 60       	ori	r24, 0x01	; 1
    21ca:	8c 93       	st	X, r24
            SET_BIT(TCCR0, 1);
    21cc:	a3 e5       	ldi	r26, 0x53	; 83
    21ce:	b0 e0       	ldi	r27, 0x00	; 0
    21d0:	e3 e5       	ldi	r30, 0x53	; 83
    21d2:	f0 e0       	ldi	r31, 0x00	; 0
    21d4:	80 81       	ld	r24, Z
    21d6:	82 60       	ori	r24, 0x02	; 2
    21d8:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, 2);
    21da:	a3 e5       	ldi	r26, 0x53	; 83
    21dc:	b0 e0       	ldi	r27, 0x00	; 0
    21de:	e3 e5       	ldi	r30, 0x53	; 83
    21e0:	f0 e0       	ldi	r31, 0x00	; 0
    21e2:	80 81       	ld	r24, Z
    21e4:	8b 7f       	andi	r24, 0xFB	; 251
    21e6:	8c 93       	st	X, r24
    21e8:	44 c2       	rjmp	.+1160   	; 0x2672 <Gpt_SetClockSource+0x5da>
            break;
        case GPT_CLK_PRESCALER_256:
            CLR_BIT(TCCR0, 0);
    21ea:	a3 e5       	ldi	r26, 0x53	; 83
    21ec:	b0 e0       	ldi	r27, 0x00	; 0
    21ee:	e3 e5       	ldi	r30, 0x53	; 83
    21f0:	f0 e0       	ldi	r31, 0x00	; 0
    21f2:	80 81       	ld	r24, Z
    21f4:	8e 7f       	andi	r24, 0xFE	; 254
    21f6:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, 1);
    21f8:	a3 e5       	ldi	r26, 0x53	; 83
    21fa:	b0 e0       	ldi	r27, 0x00	; 0
    21fc:	e3 e5       	ldi	r30, 0x53	; 83
    21fe:	f0 e0       	ldi	r31, 0x00	; 0
    2200:	80 81       	ld	r24, Z
    2202:	8d 7f       	andi	r24, 0xFD	; 253
    2204:	8c 93       	st	X, r24
            SET_BIT(TCCR0, 2);
    2206:	a3 e5       	ldi	r26, 0x53	; 83
    2208:	b0 e0       	ldi	r27, 0x00	; 0
    220a:	e3 e5       	ldi	r30, 0x53	; 83
    220c:	f0 e0       	ldi	r31, 0x00	; 0
    220e:	80 81       	ld	r24, Z
    2210:	84 60       	ori	r24, 0x04	; 4
    2212:	8c 93       	st	X, r24
    2214:	2e c2       	rjmp	.+1116   	; 0x2672 <Gpt_SetClockSource+0x5da>
            break;
        case GPT_CLK_PRESCALER_1024:
            SET_BIT(TCCR0, 0);
    2216:	a3 e5       	ldi	r26, 0x53	; 83
    2218:	b0 e0       	ldi	r27, 0x00	; 0
    221a:	e3 e5       	ldi	r30, 0x53	; 83
    221c:	f0 e0       	ldi	r31, 0x00	; 0
    221e:	80 81       	ld	r24, Z
    2220:	81 60       	ori	r24, 0x01	; 1
    2222:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, 1);
    2224:	a3 e5       	ldi	r26, 0x53	; 83
    2226:	b0 e0       	ldi	r27, 0x00	; 0
    2228:	e3 e5       	ldi	r30, 0x53	; 83
    222a:	f0 e0       	ldi	r31, 0x00	; 0
    222c:	80 81       	ld	r24, Z
    222e:	8d 7f       	andi	r24, 0xFD	; 253
    2230:	8c 93       	st	X, r24
            SET_BIT(TCCR0, 2);
    2232:	a3 e5       	ldi	r26, 0x53	; 83
    2234:	b0 e0       	ldi	r27, 0x00	; 0
    2236:	e3 e5       	ldi	r30, 0x53	; 83
    2238:	f0 e0       	ldi	r31, 0x00	; 0
    223a:	80 81       	ld	r24, Z
    223c:	84 60       	ori	r24, 0x04	; 4
    223e:	8c 93       	st	X, r24
    2240:	18 c2       	rjmp	.+1072   	; 0x2672 <Gpt_SetClockSource+0x5da>
            break;
        case GPT_CLK_EXT_FALLING:
            CLR_BIT(TCCR0, 0);
    2242:	a3 e5       	ldi	r26, 0x53	; 83
    2244:	b0 e0       	ldi	r27, 0x00	; 0
    2246:	e3 e5       	ldi	r30, 0x53	; 83
    2248:	f0 e0       	ldi	r31, 0x00	; 0
    224a:	80 81       	ld	r24, Z
    224c:	8e 7f       	andi	r24, 0xFE	; 254
    224e:	8c 93       	st	X, r24
            SET_BIT(TCCR0, 1);
    2250:	a3 e5       	ldi	r26, 0x53	; 83
    2252:	b0 e0       	ldi	r27, 0x00	; 0
    2254:	e3 e5       	ldi	r30, 0x53	; 83
    2256:	f0 e0       	ldi	r31, 0x00	; 0
    2258:	80 81       	ld	r24, Z
    225a:	82 60       	ori	r24, 0x02	; 2
    225c:	8c 93       	st	X, r24
            SET_BIT(TCCR0, 2);
    225e:	a3 e5       	ldi	r26, 0x53	; 83
    2260:	b0 e0       	ldi	r27, 0x00	; 0
    2262:	e3 e5       	ldi	r30, 0x53	; 83
    2264:	f0 e0       	ldi	r31, 0x00	; 0
    2266:	80 81       	ld	r24, Z
    2268:	84 60       	ori	r24, 0x04	; 4
    226a:	8c 93       	st	X, r24
    226c:	02 c2       	rjmp	.+1028   	; 0x2672 <Gpt_SetClockSource+0x5da>
            break;
        case GPT_CLK_EXT_RISING:
            SET_BIT(TCCR0, 0);
    226e:	a3 e5       	ldi	r26, 0x53	; 83
    2270:	b0 e0       	ldi	r27, 0x00	; 0
    2272:	e3 e5       	ldi	r30, 0x53	; 83
    2274:	f0 e0       	ldi	r31, 0x00	; 0
    2276:	80 81       	ld	r24, Z
    2278:	81 60       	ori	r24, 0x01	; 1
    227a:	8c 93       	st	X, r24
            SET_BIT(TCCR0, 1);
    227c:	a3 e5       	ldi	r26, 0x53	; 83
    227e:	b0 e0       	ldi	r27, 0x00	; 0
    2280:	e3 e5       	ldi	r30, 0x53	; 83
    2282:	f0 e0       	ldi	r31, 0x00	; 0
    2284:	80 81       	ld	r24, Z
    2286:	82 60       	ori	r24, 0x02	; 2
    2288:	8c 93       	st	X, r24
            SET_BIT(TCCR0, 2);
    228a:	a3 e5       	ldi	r26, 0x53	; 83
    228c:	b0 e0       	ldi	r27, 0x00	; 0
    228e:	e3 e5       	ldi	r30, 0x53	; 83
    2290:	f0 e0       	ldi	r31, 0x00	; 0
    2292:	80 81       	ld	r24, Z
    2294:	84 60       	ori	r24, 0x04	; 4
    2296:	8c 93       	st	X, r24
    2298:	ec c1       	rjmp	.+984    	; 0x2672 <Gpt_SetClockSource+0x5da>
            break;
        default:
            retVal = E_NOT_OK;
    229a:	81 e0       	ldi	r24, 0x01	; 1
    229c:	89 83       	std	Y+1, r24	; 0x01
    229e:	e9 c1       	rjmp	.+978    	; 0x2672 <Gpt_SetClockSource+0x5da>
            break;
        }
    }
    else if (GPT_CHANNEL_TIM1 == channel)
    22a0:	8a 81       	ldd	r24, Y+2	; 0x02
    22a2:	81 30       	cpi	r24, 0x01	; 1
    22a4:	09 f0       	breq	.+2      	; 0x22a8 <Gpt_SetClockSource+0x210>
    22a6:	f3 c0       	rjmp	.+486    	; 0x248e <Gpt_SetClockSource+0x3f6>
    {
        switch (clk)
    22a8:	8b 81       	ldd	r24, Y+3	; 0x03
    22aa:	28 2f       	mov	r18, r24
    22ac:	30 e0       	ldi	r19, 0x00	; 0
    22ae:	3f 83       	std	Y+7, r19	; 0x07
    22b0:	2e 83       	std	Y+6, r18	; 0x06
    22b2:	8e 81       	ldd	r24, Y+6	; 0x06
    22b4:	9f 81       	ldd	r25, Y+7	; 0x07
    22b6:	84 30       	cpi	r24, 0x04	; 4
    22b8:	91 05       	cpc	r25, r1
    22ba:	09 f4       	brne	.+2      	; 0x22be <Gpt_SetClockSource+0x226>
    22bc:	77 c0       	rjmp	.+238    	; 0x23ac <Gpt_SetClockSource+0x314>
    22be:	2e 81       	ldd	r18, Y+6	; 0x06
    22c0:	3f 81       	ldd	r19, Y+7	; 0x07
    22c2:	25 30       	cpi	r18, 0x05	; 5
    22c4:	31 05       	cpc	r19, r1
    22c6:	8c f4       	brge	.+34     	; 0x22ea <Gpt_SetClockSource+0x252>
    22c8:	8e 81       	ldd	r24, Y+6	; 0x06
    22ca:	9f 81       	ldd	r25, Y+7	; 0x07
    22cc:	81 30       	cpi	r24, 0x01	; 1
    22ce:	91 05       	cpc	r25, r1
    22d0:	09 f4       	brne	.+2      	; 0x22d4 <Gpt_SetClockSource+0x23c>
    22d2:	40 c0       	rjmp	.+128    	; 0x2354 <Gpt_SetClockSource+0x2bc>
    22d4:	2e 81       	ldd	r18, Y+6	; 0x06
    22d6:	3f 81       	ldd	r19, Y+7	; 0x07
    22d8:	22 30       	cpi	r18, 0x02	; 2
    22da:	31 05       	cpc	r19, r1
    22dc:	09 f4       	brne	.+2      	; 0x22e0 <Gpt_SetClockSource+0x248>
    22de:	50 c0       	rjmp	.+160    	; 0x2380 <Gpt_SetClockSource+0x2e8>
    22e0:	8e 81       	ldd	r24, Y+6	; 0x06
    22e2:	9f 81       	ldd	r25, Y+7	; 0x07
    22e4:	00 97       	sbiw	r24, 0x00	; 0
    22e6:	01 f1       	breq	.+64     	; 0x2328 <Gpt_SetClockSource+0x290>
    22e8:	cf c0       	rjmp	.+414    	; 0x2488 <Gpt_SetClockSource+0x3f0>
    22ea:	2e 81       	ldd	r18, Y+6	; 0x06
    22ec:	3f 81       	ldd	r19, Y+7	; 0x07
    22ee:	27 30       	cpi	r18, 0x07	; 7
    22f0:	31 05       	cpc	r19, r1
    22f2:	09 f4       	brne	.+2      	; 0x22f6 <Gpt_SetClockSource+0x25e>
    22f4:	87 c0       	rjmp	.+270    	; 0x2404 <Gpt_SetClockSource+0x36c>
    22f6:	8e 81       	ldd	r24, Y+6	; 0x06
    22f8:	9f 81       	ldd	r25, Y+7	; 0x07
    22fa:	88 30       	cpi	r24, 0x08	; 8
    22fc:	91 05       	cpc	r25, r1
    22fe:	3c f4       	brge	.+14     	; 0x230e <Gpt_SetClockSource+0x276>
    2300:	2e 81       	ldd	r18, Y+6	; 0x06
    2302:	3f 81       	ldd	r19, Y+7	; 0x07
    2304:	26 30       	cpi	r18, 0x06	; 6
    2306:	31 05       	cpc	r19, r1
    2308:	09 f4       	brne	.+2      	; 0x230c <Gpt_SetClockSource+0x274>
    230a:	66 c0       	rjmp	.+204    	; 0x23d8 <Gpt_SetClockSource+0x340>
    230c:	bd c0       	rjmp	.+378    	; 0x2488 <Gpt_SetClockSource+0x3f0>
    230e:	8e 81       	ldd	r24, Y+6	; 0x06
    2310:	9f 81       	ldd	r25, Y+7	; 0x07
    2312:	88 30       	cpi	r24, 0x08	; 8
    2314:	91 05       	cpc	r25, r1
    2316:	09 f4       	brne	.+2      	; 0x231a <Gpt_SetClockSource+0x282>
    2318:	8b c0       	rjmp	.+278    	; 0x2430 <Gpt_SetClockSource+0x398>
    231a:	2e 81       	ldd	r18, Y+6	; 0x06
    231c:	3f 81       	ldd	r19, Y+7	; 0x07
    231e:	29 30       	cpi	r18, 0x09	; 9
    2320:	31 05       	cpc	r19, r1
    2322:	09 f4       	brne	.+2      	; 0x2326 <Gpt_SetClockSource+0x28e>
    2324:	9b c0       	rjmp	.+310    	; 0x245c <Gpt_SetClockSource+0x3c4>
    2326:	b0 c0       	rjmp	.+352    	; 0x2488 <Gpt_SetClockSource+0x3f0>
        {
        case GPT_CLK_OFF:
            CLR_BIT(TCCR1B, 0);
    2328:	ae e4       	ldi	r26, 0x4E	; 78
    232a:	b0 e0       	ldi	r27, 0x00	; 0
    232c:	ee e4       	ldi	r30, 0x4E	; 78
    232e:	f0 e0       	ldi	r31, 0x00	; 0
    2330:	80 81       	ld	r24, Z
    2332:	8e 7f       	andi	r24, 0xFE	; 254
    2334:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B, 1);
    2336:	ae e4       	ldi	r26, 0x4E	; 78
    2338:	b0 e0       	ldi	r27, 0x00	; 0
    233a:	ee e4       	ldi	r30, 0x4E	; 78
    233c:	f0 e0       	ldi	r31, 0x00	; 0
    233e:	80 81       	ld	r24, Z
    2340:	8d 7f       	andi	r24, 0xFD	; 253
    2342:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B, 2);
    2344:	ae e4       	ldi	r26, 0x4E	; 78
    2346:	b0 e0       	ldi	r27, 0x00	; 0
    2348:	ee e4       	ldi	r30, 0x4E	; 78
    234a:	f0 e0       	ldi	r31, 0x00	; 0
    234c:	80 81       	ld	r24, Z
    234e:	8b 7f       	andi	r24, 0xFB	; 251
    2350:	8c 93       	st	X, r24
    2352:	8f c1       	rjmp	.+798    	; 0x2672 <Gpt_SetClockSource+0x5da>
            break;
        case GPT_CLK_PRESCALER_1:
            SET_BIT(TCCR1B, 0);
    2354:	ae e4       	ldi	r26, 0x4E	; 78
    2356:	b0 e0       	ldi	r27, 0x00	; 0
    2358:	ee e4       	ldi	r30, 0x4E	; 78
    235a:	f0 e0       	ldi	r31, 0x00	; 0
    235c:	80 81       	ld	r24, Z
    235e:	81 60       	ori	r24, 0x01	; 1
    2360:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B, 1);
    2362:	ae e4       	ldi	r26, 0x4E	; 78
    2364:	b0 e0       	ldi	r27, 0x00	; 0
    2366:	ee e4       	ldi	r30, 0x4E	; 78
    2368:	f0 e0       	ldi	r31, 0x00	; 0
    236a:	80 81       	ld	r24, Z
    236c:	8d 7f       	andi	r24, 0xFD	; 253
    236e:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B, 2);
    2370:	ae e4       	ldi	r26, 0x4E	; 78
    2372:	b0 e0       	ldi	r27, 0x00	; 0
    2374:	ee e4       	ldi	r30, 0x4E	; 78
    2376:	f0 e0       	ldi	r31, 0x00	; 0
    2378:	80 81       	ld	r24, Z
    237a:	8b 7f       	andi	r24, 0xFB	; 251
    237c:	8c 93       	st	X, r24
    237e:	79 c1       	rjmp	.+754    	; 0x2672 <Gpt_SetClockSource+0x5da>
            break;
        case GPT_CLK_PRESCALER_8:
            CLR_BIT(TCCR1B, 0);
    2380:	ae e4       	ldi	r26, 0x4E	; 78
    2382:	b0 e0       	ldi	r27, 0x00	; 0
    2384:	ee e4       	ldi	r30, 0x4E	; 78
    2386:	f0 e0       	ldi	r31, 0x00	; 0
    2388:	80 81       	ld	r24, Z
    238a:	8e 7f       	andi	r24, 0xFE	; 254
    238c:	8c 93       	st	X, r24
            SET_BIT(TCCR1B, 1);
    238e:	ae e4       	ldi	r26, 0x4E	; 78
    2390:	b0 e0       	ldi	r27, 0x00	; 0
    2392:	ee e4       	ldi	r30, 0x4E	; 78
    2394:	f0 e0       	ldi	r31, 0x00	; 0
    2396:	80 81       	ld	r24, Z
    2398:	82 60       	ori	r24, 0x02	; 2
    239a:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B, 2);
    239c:	ae e4       	ldi	r26, 0x4E	; 78
    239e:	b0 e0       	ldi	r27, 0x00	; 0
    23a0:	ee e4       	ldi	r30, 0x4E	; 78
    23a2:	f0 e0       	ldi	r31, 0x00	; 0
    23a4:	80 81       	ld	r24, Z
    23a6:	8b 7f       	andi	r24, 0xFB	; 251
    23a8:	8c 93       	st	X, r24
    23aa:	63 c1       	rjmp	.+710    	; 0x2672 <Gpt_SetClockSource+0x5da>
            break;
        case GPT_CLK_PRESCALER_64:
            SET_BIT(TCCR1B, 0);
    23ac:	ae e4       	ldi	r26, 0x4E	; 78
    23ae:	b0 e0       	ldi	r27, 0x00	; 0
    23b0:	ee e4       	ldi	r30, 0x4E	; 78
    23b2:	f0 e0       	ldi	r31, 0x00	; 0
    23b4:	80 81       	ld	r24, Z
    23b6:	81 60       	ori	r24, 0x01	; 1
    23b8:	8c 93       	st	X, r24
            SET_BIT(TCCR1B, 1);
    23ba:	ae e4       	ldi	r26, 0x4E	; 78
    23bc:	b0 e0       	ldi	r27, 0x00	; 0
    23be:	ee e4       	ldi	r30, 0x4E	; 78
    23c0:	f0 e0       	ldi	r31, 0x00	; 0
    23c2:	80 81       	ld	r24, Z
    23c4:	82 60       	ori	r24, 0x02	; 2
    23c6:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B, 2);
    23c8:	ae e4       	ldi	r26, 0x4E	; 78
    23ca:	b0 e0       	ldi	r27, 0x00	; 0
    23cc:	ee e4       	ldi	r30, 0x4E	; 78
    23ce:	f0 e0       	ldi	r31, 0x00	; 0
    23d0:	80 81       	ld	r24, Z
    23d2:	8b 7f       	andi	r24, 0xFB	; 251
    23d4:	8c 93       	st	X, r24
    23d6:	4d c1       	rjmp	.+666    	; 0x2672 <Gpt_SetClockSource+0x5da>
            break;
        case GPT_CLK_PRESCALER_256:
            CLR_BIT(TCCR1B, 0);
    23d8:	ae e4       	ldi	r26, 0x4E	; 78
    23da:	b0 e0       	ldi	r27, 0x00	; 0
    23dc:	ee e4       	ldi	r30, 0x4E	; 78
    23de:	f0 e0       	ldi	r31, 0x00	; 0
    23e0:	80 81       	ld	r24, Z
    23e2:	8e 7f       	andi	r24, 0xFE	; 254
    23e4:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B, 1);
    23e6:	ae e4       	ldi	r26, 0x4E	; 78
    23e8:	b0 e0       	ldi	r27, 0x00	; 0
    23ea:	ee e4       	ldi	r30, 0x4E	; 78
    23ec:	f0 e0       	ldi	r31, 0x00	; 0
    23ee:	80 81       	ld	r24, Z
    23f0:	8d 7f       	andi	r24, 0xFD	; 253
    23f2:	8c 93       	st	X, r24
            SET_BIT(TCCR1B, 2);
    23f4:	ae e4       	ldi	r26, 0x4E	; 78
    23f6:	b0 e0       	ldi	r27, 0x00	; 0
    23f8:	ee e4       	ldi	r30, 0x4E	; 78
    23fa:	f0 e0       	ldi	r31, 0x00	; 0
    23fc:	80 81       	ld	r24, Z
    23fe:	84 60       	ori	r24, 0x04	; 4
    2400:	8c 93       	st	X, r24
    2402:	37 c1       	rjmp	.+622    	; 0x2672 <Gpt_SetClockSource+0x5da>
            break;
        case GPT_CLK_PRESCALER_1024:
            SET_BIT(TCCR1B, 0);
    2404:	ae e4       	ldi	r26, 0x4E	; 78
    2406:	b0 e0       	ldi	r27, 0x00	; 0
    2408:	ee e4       	ldi	r30, 0x4E	; 78
    240a:	f0 e0       	ldi	r31, 0x00	; 0
    240c:	80 81       	ld	r24, Z
    240e:	81 60       	ori	r24, 0x01	; 1
    2410:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B, 1);
    2412:	ae e4       	ldi	r26, 0x4E	; 78
    2414:	b0 e0       	ldi	r27, 0x00	; 0
    2416:	ee e4       	ldi	r30, 0x4E	; 78
    2418:	f0 e0       	ldi	r31, 0x00	; 0
    241a:	80 81       	ld	r24, Z
    241c:	8d 7f       	andi	r24, 0xFD	; 253
    241e:	8c 93       	st	X, r24
            SET_BIT(TCCR1B, 2);
    2420:	ae e4       	ldi	r26, 0x4E	; 78
    2422:	b0 e0       	ldi	r27, 0x00	; 0
    2424:	ee e4       	ldi	r30, 0x4E	; 78
    2426:	f0 e0       	ldi	r31, 0x00	; 0
    2428:	80 81       	ld	r24, Z
    242a:	84 60       	ori	r24, 0x04	; 4
    242c:	8c 93       	st	X, r24
    242e:	21 c1       	rjmp	.+578    	; 0x2672 <Gpt_SetClockSource+0x5da>
            break;
        case GPT_CLK_EXT_FALLING:
            CLR_BIT(TCCR1B, 0);
    2430:	ae e4       	ldi	r26, 0x4E	; 78
    2432:	b0 e0       	ldi	r27, 0x00	; 0
    2434:	ee e4       	ldi	r30, 0x4E	; 78
    2436:	f0 e0       	ldi	r31, 0x00	; 0
    2438:	80 81       	ld	r24, Z
    243a:	8e 7f       	andi	r24, 0xFE	; 254
    243c:	8c 93       	st	X, r24
            SET_BIT(TCCR1B, 1);
    243e:	ae e4       	ldi	r26, 0x4E	; 78
    2440:	b0 e0       	ldi	r27, 0x00	; 0
    2442:	ee e4       	ldi	r30, 0x4E	; 78
    2444:	f0 e0       	ldi	r31, 0x00	; 0
    2446:	80 81       	ld	r24, Z
    2448:	82 60       	ori	r24, 0x02	; 2
    244a:	8c 93       	st	X, r24
            SET_BIT(TCCR1B, 2);
    244c:	ae e4       	ldi	r26, 0x4E	; 78
    244e:	b0 e0       	ldi	r27, 0x00	; 0
    2450:	ee e4       	ldi	r30, 0x4E	; 78
    2452:	f0 e0       	ldi	r31, 0x00	; 0
    2454:	80 81       	ld	r24, Z
    2456:	84 60       	ori	r24, 0x04	; 4
    2458:	8c 93       	st	X, r24
    245a:	0b c1       	rjmp	.+534    	; 0x2672 <Gpt_SetClockSource+0x5da>
            break;
        case GPT_CLK_EXT_RISING:
            SET_BIT(TCCR1B, 0);
    245c:	ae e4       	ldi	r26, 0x4E	; 78
    245e:	b0 e0       	ldi	r27, 0x00	; 0
    2460:	ee e4       	ldi	r30, 0x4E	; 78
    2462:	f0 e0       	ldi	r31, 0x00	; 0
    2464:	80 81       	ld	r24, Z
    2466:	81 60       	ori	r24, 0x01	; 1
    2468:	8c 93       	st	X, r24
            SET_BIT(TCCR1B, 1);
    246a:	ae e4       	ldi	r26, 0x4E	; 78
    246c:	b0 e0       	ldi	r27, 0x00	; 0
    246e:	ee e4       	ldi	r30, 0x4E	; 78
    2470:	f0 e0       	ldi	r31, 0x00	; 0
    2472:	80 81       	ld	r24, Z
    2474:	82 60       	ori	r24, 0x02	; 2
    2476:	8c 93       	st	X, r24
            SET_BIT(TCCR1B, 2);
    2478:	ae e4       	ldi	r26, 0x4E	; 78
    247a:	b0 e0       	ldi	r27, 0x00	; 0
    247c:	ee e4       	ldi	r30, 0x4E	; 78
    247e:	f0 e0       	ldi	r31, 0x00	; 0
    2480:	80 81       	ld	r24, Z
    2482:	84 60       	ori	r24, 0x04	; 4
    2484:	8c 93       	st	X, r24
    2486:	f5 c0       	rjmp	.+490    	; 0x2672 <Gpt_SetClockSource+0x5da>
            break;
        default:
            retVal = E_NOT_OK;
    2488:	81 e0       	ldi	r24, 0x01	; 1
    248a:	89 83       	std	Y+1, r24	; 0x01
    248c:	f2 c0       	rjmp	.+484    	; 0x2672 <Gpt_SetClockSource+0x5da>
            break;
        }
    }
    else if (GPT_CHANNEL_TIM2 == channel)
    248e:	8a 81       	ldd	r24, Y+2	; 0x02
    2490:	82 30       	cpi	r24, 0x02	; 2
    2492:	09 f0       	breq	.+2      	; 0x2496 <Gpt_SetClockSource+0x3fe>
    2494:	ec c0       	rjmp	.+472    	; 0x266e <Gpt_SetClockSource+0x5d6>
    {
        switch (clk)
    2496:	8b 81       	ldd	r24, Y+3	; 0x03
    2498:	28 2f       	mov	r18, r24
    249a:	30 e0       	ldi	r19, 0x00	; 0
    249c:	3d 83       	std	Y+5, r19	; 0x05
    249e:	2c 83       	std	Y+4, r18	; 0x04
    24a0:	8c 81       	ldd	r24, Y+4	; 0x04
    24a2:	9d 81       	ldd	r25, Y+5	; 0x05
    24a4:	83 30       	cpi	r24, 0x03	; 3
    24a6:	91 05       	cpc	r25, r1
    24a8:	09 f4       	brne	.+2      	; 0x24ac <Gpt_SetClockSource+0x414>
    24aa:	70 c0       	rjmp	.+224    	; 0x258c <Gpt_SetClockSource+0x4f4>
    24ac:	2c 81       	ldd	r18, Y+4	; 0x04
    24ae:	3d 81       	ldd	r19, Y+5	; 0x05
    24b0:	24 30       	cpi	r18, 0x04	; 4
    24b2:	31 05       	cpc	r19, r1
    24b4:	84 f4       	brge	.+32     	; 0x24d6 <Gpt_SetClockSource+0x43e>
    24b6:	8c 81       	ldd	r24, Y+4	; 0x04
    24b8:	9d 81       	ldd	r25, Y+5	; 0x05
    24ba:	81 30       	cpi	r24, 0x01	; 1
    24bc:	91 05       	cpc	r25, r1
    24be:	d1 f1       	breq	.+116    	; 0x2534 <Gpt_SetClockSource+0x49c>
    24c0:	2c 81       	ldd	r18, Y+4	; 0x04
    24c2:	3d 81       	ldd	r19, Y+5	; 0x05
    24c4:	22 30       	cpi	r18, 0x02	; 2
    24c6:	31 05       	cpc	r19, r1
    24c8:	0c f0       	brlt	.+2      	; 0x24cc <Gpt_SetClockSource+0x434>
    24ca:	4a c0       	rjmp	.+148    	; 0x2560 <Gpt_SetClockSource+0x4c8>
    24cc:	8c 81       	ldd	r24, Y+4	; 0x04
    24ce:	9d 81       	ldd	r25, Y+5	; 0x05
    24d0:	00 97       	sbiw	r24, 0x00	; 0
    24d2:	d1 f0       	breq	.+52     	; 0x2508 <Gpt_SetClockSource+0x470>
    24d4:	c9 c0       	rjmp	.+402    	; 0x2668 <Gpt_SetClockSource+0x5d0>
    24d6:	2c 81       	ldd	r18, Y+4	; 0x04
    24d8:	3d 81       	ldd	r19, Y+5	; 0x05
    24da:	25 30       	cpi	r18, 0x05	; 5
    24dc:	31 05       	cpc	r19, r1
    24de:	09 f4       	brne	.+2      	; 0x24e2 <Gpt_SetClockSource+0x44a>
    24e0:	81 c0       	rjmp	.+258    	; 0x25e4 <Gpt_SetClockSource+0x54c>
    24e2:	8c 81       	ldd	r24, Y+4	; 0x04
    24e4:	9d 81       	ldd	r25, Y+5	; 0x05
    24e6:	85 30       	cpi	r24, 0x05	; 5
    24e8:	91 05       	cpc	r25, r1
    24ea:	0c f4       	brge	.+2      	; 0x24ee <Gpt_SetClockSource+0x456>
    24ec:	65 c0       	rjmp	.+202    	; 0x25b8 <Gpt_SetClockSource+0x520>
    24ee:	2c 81       	ldd	r18, Y+4	; 0x04
    24f0:	3d 81       	ldd	r19, Y+5	; 0x05
    24f2:	26 30       	cpi	r18, 0x06	; 6
    24f4:	31 05       	cpc	r19, r1
    24f6:	09 f4       	brne	.+2      	; 0x24fa <Gpt_SetClockSource+0x462>
    24f8:	8b c0       	rjmp	.+278    	; 0x2610 <Gpt_SetClockSource+0x578>
    24fa:	8c 81       	ldd	r24, Y+4	; 0x04
    24fc:	9d 81       	ldd	r25, Y+5	; 0x05
    24fe:	87 30       	cpi	r24, 0x07	; 7
    2500:	91 05       	cpc	r25, r1
    2502:	09 f4       	brne	.+2      	; 0x2506 <Gpt_SetClockSource+0x46e>
    2504:	9b c0       	rjmp	.+310    	; 0x263c <Gpt_SetClockSource+0x5a4>
    2506:	b0 c0       	rjmp	.+352    	; 0x2668 <Gpt_SetClockSource+0x5d0>
        {
        case GPT_CLK_OFF:
            CLR_BIT(TCCR2, 0);
    2508:	a5 e4       	ldi	r26, 0x45	; 69
    250a:	b0 e0       	ldi	r27, 0x00	; 0
    250c:	e5 e4       	ldi	r30, 0x45	; 69
    250e:	f0 e0       	ldi	r31, 0x00	; 0
    2510:	80 81       	ld	r24, Z
    2512:	8e 7f       	andi	r24, 0xFE	; 254
    2514:	8c 93       	st	X, r24
            CLR_BIT(TCCR2, 1);
    2516:	a5 e4       	ldi	r26, 0x45	; 69
    2518:	b0 e0       	ldi	r27, 0x00	; 0
    251a:	e5 e4       	ldi	r30, 0x45	; 69
    251c:	f0 e0       	ldi	r31, 0x00	; 0
    251e:	80 81       	ld	r24, Z
    2520:	8d 7f       	andi	r24, 0xFD	; 253
    2522:	8c 93       	st	X, r24
            CLR_BIT(TCCR2, 2);
    2524:	a5 e4       	ldi	r26, 0x45	; 69
    2526:	b0 e0       	ldi	r27, 0x00	; 0
    2528:	e5 e4       	ldi	r30, 0x45	; 69
    252a:	f0 e0       	ldi	r31, 0x00	; 0
    252c:	80 81       	ld	r24, Z
    252e:	8b 7f       	andi	r24, 0xFB	; 251
    2530:	8c 93       	st	X, r24
    2532:	9f c0       	rjmp	.+318    	; 0x2672 <Gpt_SetClockSource+0x5da>
            break;
        case GPT_CLK_PRESCALER_1:
            SET_BIT(TCCR2, 0);
    2534:	a5 e4       	ldi	r26, 0x45	; 69
    2536:	b0 e0       	ldi	r27, 0x00	; 0
    2538:	e5 e4       	ldi	r30, 0x45	; 69
    253a:	f0 e0       	ldi	r31, 0x00	; 0
    253c:	80 81       	ld	r24, Z
    253e:	81 60       	ori	r24, 0x01	; 1
    2540:	8c 93       	st	X, r24
            CLR_BIT(TCCR2, 1);
    2542:	a5 e4       	ldi	r26, 0x45	; 69
    2544:	b0 e0       	ldi	r27, 0x00	; 0
    2546:	e5 e4       	ldi	r30, 0x45	; 69
    2548:	f0 e0       	ldi	r31, 0x00	; 0
    254a:	80 81       	ld	r24, Z
    254c:	8d 7f       	andi	r24, 0xFD	; 253
    254e:	8c 93       	st	X, r24
            CLR_BIT(TCCR2, 2);
    2550:	a5 e4       	ldi	r26, 0x45	; 69
    2552:	b0 e0       	ldi	r27, 0x00	; 0
    2554:	e5 e4       	ldi	r30, 0x45	; 69
    2556:	f0 e0       	ldi	r31, 0x00	; 0
    2558:	80 81       	ld	r24, Z
    255a:	8b 7f       	andi	r24, 0xFB	; 251
    255c:	8c 93       	st	X, r24
    255e:	89 c0       	rjmp	.+274    	; 0x2672 <Gpt_SetClockSource+0x5da>
            break;
        case GPT_CLK_PRESCALER_8:
            CLR_BIT(TCCR2, 0);
    2560:	a5 e4       	ldi	r26, 0x45	; 69
    2562:	b0 e0       	ldi	r27, 0x00	; 0
    2564:	e5 e4       	ldi	r30, 0x45	; 69
    2566:	f0 e0       	ldi	r31, 0x00	; 0
    2568:	80 81       	ld	r24, Z
    256a:	8e 7f       	andi	r24, 0xFE	; 254
    256c:	8c 93       	st	X, r24
            SET_BIT(TCCR2, 1);
    256e:	a5 e4       	ldi	r26, 0x45	; 69
    2570:	b0 e0       	ldi	r27, 0x00	; 0
    2572:	e5 e4       	ldi	r30, 0x45	; 69
    2574:	f0 e0       	ldi	r31, 0x00	; 0
    2576:	80 81       	ld	r24, Z
    2578:	82 60       	ori	r24, 0x02	; 2
    257a:	8c 93       	st	X, r24
            CLR_BIT(TCCR2, 2);
    257c:	a5 e4       	ldi	r26, 0x45	; 69
    257e:	b0 e0       	ldi	r27, 0x00	; 0
    2580:	e5 e4       	ldi	r30, 0x45	; 69
    2582:	f0 e0       	ldi	r31, 0x00	; 0
    2584:	80 81       	ld	r24, Z
    2586:	8b 7f       	andi	r24, 0xFB	; 251
    2588:	8c 93       	st	X, r24
    258a:	73 c0       	rjmp	.+230    	; 0x2672 <Gpt_SetClockSource+0x5da>
            break;
        case GPT_CLK_PRESCALER_32:
            SET_BIT(TCCR2, 0);
    258c:	a5 e4       	ldi	r26, 0x45	; 69
    258e:	b0 e0       	ldi	r27, 0x00	; 0
    2590:	e5 e4       	ldi	r30, 0x45	; 69
    2592:	f0 e0       	ldi	r31, 0x00	; 0
    2594:	80 81       	ld	r24, Z
    2596:	81 60       	ori	r24, 0x01	; 1
    2598:	8c 93       	st	X, r24
            SET_BIT(TCCR2, 1);
    259a:	a5 e4       	ldi	r26, 0x45	; 69
    259c:	b0 e0       	ldi	r27, 0x00	; 0
    259e:	e5 e4       	ldi	r30, 0x45	; 69
    25a0:	f0 e0       	ldi	r31, 0x00	; 0
    25a2:	80 81       	ld	r24, Z
    25a4:	82 60       	ori	r24, 0x02	; 2
    25a6:	8c 93       	st	X, r24
            CLR_BIT(TCCR2, 2);
    25a8:	a5 e4       	ldi	r26, 0x45	; 69
    25aa:	b0 e0       	ldi	r27, 0x00	; 0
    25ac:	e5 e4       	ldi	r30, 0x45	; 69
    25ae:	f0 e0       	ldi	r31, 0x00	; 0
    25b0:	80 81       	ld	r24, Z
    25b2:	8b 7f       	andi	r24, 0xFB	; 251
    25b4:	8c 93       	st	X, r24
    25b6:	5d c0       	rjmp	.+186    	; 0x2672 <Gpt_SetClockSource+0x5da>
            break;
        case GPT_CLK_PRESCALER_64:
            CLR_BIT(TCCR2, 0);
    25b8:	a5 e4       	ldi	r26, 0x45	; 69
    25ba:	b0 e0       	ldi	r27, 0x00	; 0
    25bc:	e5 e4       	ldi	r30, 0x45	; 69
    25be:	f0 e0       	ldi	r31, 0x00	; 0
    25c0:	80 81       	ld	r24, Z
    25c2:	8e 7f       	andi	r24, 0xFE	; 254
    25c4:	8c 93       	st	X, r24
            CLR_BIT(TCCR2, 1);
    25c6:	a5 e4       	ldi	r26, 0x45	; 69
    25c8:	b0 e0       	ldi	r27, 0x00	; 0
    25ca:	e5 e4       	ldi	r30, 0x45	; 69
    25cc:	f0 e0       	ldi	r31, 0x00	; 0
    25ce:	80 81       	ld	r24, Z
    25d0:	8d 7f       	andi	r24, 0xFD	; 253
    25d2:	8c 93       	st	X, r24
            SET_BIT(TCCR2, 2);
    25d4:	a5 e4       	ldi	r26, 0x45	; 69
    25d6:	b0 e0       	ldi	r27, 0x00	; 0
    25d8:	e5 e4       	ldi	r30, 0x45	; 69
    25da:	f0 e0       	ldi	r31, 0x00	; 0
    25dc:	80 81       	ld	r24, Z
    25de:	84 60       	ori	r24, 0x04	; 4
    25e0:	8c 93       	st	X, r24
    25e2:	47 c0       	rjmp	.+142    	; 0x2672 <Gpt_SetClockSource+0x5da>
            break;
        case GPT_CLK_PRESCALER_128:
            SET_BIT(TCCR2, 0);
    25e4:	a5 e4       	ldi	r26, 0x45	; 69
    25e6:	b0 e0       	ldi	r27, 0x00	; 0
    25e8:	e5 e4       	ldi	r30, 0x45	; 69
    25ea:	f0 e0       	ldi	r31, 0x00	; 0
    25ec:	80 81       	ld	r24, Z
    25ee:	81 60       	ori	r24, 0x01	; 1
    25f0:	8c 93       	st	X, r24
            CLR_BIT(TCCR2, 1);
    25f2:	a5 e4       	ldi	r26, 0x45	; 69
    25f4:	b0 e0       	ldi	r27, 0x00	; 0
    25f6:	e5 e4       	ldi	r30, 0x45	; 69
    25f8:	f0 e0       	ldi	r31, 0x00	; 0
    25fa:	80 81       	ld	r24, Z
    25fc:	8d 7f       	andi	r24, 0xFD	; 253
    25fe:	8c 93       	st	X, r24
            SET_BIT(TCCR2, 2);
    2600:	a5 e4       	ldi	r26, 0x45	; 69
    2602:	b0 e0       	ldi	r27, 0x00	; 0
    2604:	e5 e4       	ldi	r30, 0x45	; 69
    2606:	f0 e0       	ldi	r31, 0x00	; 0
    2608:	80 81       	ld	r24, Z
    260a:	84 60       	ori	r24, 0x04	; 4
    260c:	8c 93       	st	X, r24
    260e:	31 c0       	rjmp	.+98     	; 0x2672 <Gpt_SetClockSource+0x5da>
            break;
        case GPT_CLK_PRESCALER_256:
            CLR_BIT(TCCR2, 0);
    2610:	a5 e4       	ldi	r26, 0x45	; 69
    2612:	b0 e0       	ldi	r27, 0x00	; 0
    2614:	e5 e4       	ldi	r30, 0x45	; 69
    2616:	f0 e0       	ldi	r31, 0x00	; 0
    2618:	80 81       	ld	r24, Z
    261a:	8e 7f       	andi	r24, 0xFE	; 254
    261c:	8c 93       	st	X, r24
            SET_BIT(TCCR2, 1);
    261e:	a5 e4       	ldi	r26, 0x45	; 69
    2620:	b0 e0       	ldi	r27, 0x00	; 0
    2622:	e5 e4       	ldi	r30, 0x45	; 69
    2624:	f0 e0       	ldi	r31, 0x00	; 0
    2626:	80 81       	ld	r24, Z
    2628:	82 60       	ori	r24, 0x02	; 2
    262a:	8c 93       	st	X, r24
            SET_BIT(TCCR2, 2);
    262c:	a5 e4       	ldi	r26, 0x45	; 69
    262e:	b0 e0       	ldi	r27, 0x00	; 0
    2630:	e5 e4       	ldi	r30, 0x45	; 69
    2632:	f0 e0       	ldi	r31, 0x00	; 0
    2634:	80 81       	ld	r24, Z
    2636:	84 60       	ori	r24, 0x04	; 4
    2638:	8c 93       	st	X, r24
    263a:	1b c0       	rjmp	.+54     	; 0x2672 <Gpt_SetClockSource+0x5da>
            break;
        case GPT_CLK_PRESCALER_1024:
            SET_BIT(TCCR2, 0);
    263c:	a5 e4       	ldi	r26, 0x45	; 69
    263e:	b0 e0       	ldi	r27, 0x00	; 0
    2640:	e5 e4       	ldi	r30, 0x45	; 69
    2642:	f0 e0       	ldi	r31, 0x00	; 0
    2644:	80 81       	ld	r24, Z
    2646:	81 60       	ori	r24, 0x01	; 1
    2648:	8c 93       	st	X, r24
            SET_BIT(TCCR2, 1);
    264a:	a5 e4       	ldi	r26, 0x45	; 69
    264c:	b0 e0       	ldi	r27, 0x00	; 0
    264e:	e5 e4       	ldi	r30, 0x45	; 69
    2650:	f0 e0       	ldi	r31, 0x00	; 0
    2652:	80 81       	ld	r24, Z
    2654:	82 60       	ori	r24, 0x02	; 2
    2656:	8c 93       	st	X, r24
            SET_BIT(TCCR2, 2);
    2658:	a5 e4       	ldi	r26, 0x45	; 69
    265a:	b0 e0       	ldi	r27, 0x00	; 0
    265c:	e5 e4       	ldi	r30, 0x45	; 69
    265e:	f0 e0       	ldi	r31, 0x00	; 0
    2660:	80 81       	ld	r24, Z
    2662:	84 60       	ori	r24, 0x04	; 4
    2664:	8c 93       	st	X, r24
    2666:	05 c0       	rjmp	.+10     	; 0x2672 <Gpt_SetClockSource+0x5da>
            break;
        default:
            retVal = E_NOT_OK;
    2668:	81 e0       	ldi	r24, 0x01	; 1
    266a:	89 83       	std	Y+1, r24	; 0x01
    266c:	02 c0       	rjmp	.+4      	; 0x2672 <Gpt_SetClockSource+0x5da>
            break;
        }
    }
    else
    {
        retVal = E_NOT_OK;
    266e:	81 e0       	ldi	r24, 0x01	; 1
    2670:	89 83       	std	Y+1, r24	; 0x01
    }
    return retVal;
    2672:	89 81       	ldd	r24, Y+1	; 0x01
}
    2674:	29 96       	adiw	r28, 0x09	; 9
    2676:	0f b6       	in	r0, 0x3f	; 63
    2678:	f8 94       	cli
    267a:	de bf       	out	0x3e, r29	; 62
    267c:	0f be       	out	0x3f, r0	; 63
    267e:	cd bf       	out	0x3d, r28	; 61
    2680:	cf 91       	pop	r28
    2682:	df 91       	pop	r29
    2684:	08 95       	ret

00002686 <Gpt_SetCompareValue>:
void Gpt_SetCompareValue (Gpt_CompareChannelType channel, u16 value)
{
    2686:	df 93       	push	r29
    2688:	cf 93       	push	r28
    268a:	00 d0       	rcall	.+0      	; 0x268c <Gpt_SetCompareValue+0x6>
    268c:	00 d0       	rcall	.+0      	; 0x268e <Gpt_SetCompareValue+0x8>
    268e:	0f 92       	push	r0
    2690:	cd b7       	in	r28, 0x3d	; 61
    2692:	de b7       	in	r29, 0x3e	; 62
    2694:	89 83       	std	Y+1, r24	; 0x01
    2696:	7b 83       	std	Y+3, r23	; 0x03
    2698:	6a 83       	std	Y+2, r22	; 0x02
    switch (channel)
    269a:	89 81       	ldd	r24, Y+1	; 0x01
    269c:	28 2f       	mov	r18, r24
    269e:	30 e0       	ldi	r19, 0x00	; 0
    26a0:	3d 83       	std	Y+5, r19	; 0x05
    26a2:	2c 83       	std	Y+4, r18	; 0x04
    26a4:	8c 81       	ldd	r24, Y+4	; 0x04
    26a6:	9d 81       	ldd	r25, Y+5	; 0x05
    26a8:	81 30       	cpi	r24, 0x01	; 1
    26aa:	91 05       	cpc	r25, r1
    26ac:	d1 f0       	breq	.+52     	; 0x26e2 <Gpt_SetCompareValue+0x5c>
    26ae:	2c 81       	ldd	r18, Y+4	; 0x04
    26b0:	3d 81       	ldd	r19, Y+5	; 0x05
    26b2:	22 30       	cpi	r18, 0x02	; 2
    26b4:	31 05       	cpc	r19, r1
    26b6:	2c f4       	brge	.+10     	; 0x26c2 <Gpt_SetCompareValue+0x3c>
    26b8:	8c 81       	ldd	r24, Y+4	; 0x04
    26ba:	9d 81       	ldd	r25, Y+5	; 0x05
    26bc:	00 97       	sbiw	r24, 0x00	; 0
    26be:	61 f0       	breq	.+24     	; 0x26d8 <Gpt_SetCompareValue+0x52>
    26c0:	22 c0       	rjmp	.+68     	; 0x2706 <Gpt_SetCompareValue+0x80>
    26c2:	2c 81       	ldd	r18, Y+4	; 0x04
    26c4:	3d 81       	ldd	r19, Y+5	; 0x05
    26c6:	22 30       	cpi	r18, 0x02	; 2
    26c8:	31 05       	cpc	r19, r1
    26ca:	91 f0       	breq	.+36     	; 0x26f0 <Gpt_SetCompareValue+0x6a>
    26cc:	8c 81       	ldd	r24, Y+4	; 0x04
    26ce:	9d 81       	ldd	r25, Y+5	; 0x05
    26d0:	83 30       	cpi	r24, 0x03	; 3
    26d2:	91 05       	cpc	r25, r1
    26d4:	a1 f0       	breq	.+40     	; 0x26fe <Gpt_SetCompareValue+0x78>
    26d6:	17 c0       	rjmp	.+46     	; 0x2706 <Gpt_SetCompareValue+0x80>
    {
    case GPT_COMP0:
        OCR0 = value;
    26d8:	ec e5       	ldi	r30, 0x5C	; 92
    26da:	f0 e0       	ldi	r31, 0x00	; 0
    26dc:	8a 81       	ldd	r24, Y+2	; 0x02
    26de:	80 83       	st	Z, r24
    26e0:	12 c0       	rjmp	.+36     	; 0x2706 <Gpt_SetCompareValue+0x80>
        break;
    case GPT_COMP1A:
        OCR1A = value;
    26e2:	ea e4       	ldi	r30, 0x4A	; 74
    26e4:	f0 e0       	ldi	r31, 0x00	; 0
    26e6:	8a 81       	ldd	r24, Y+2	; 0x02
    26e8:	9b 81       	ldd	r25, Y+3	; 0x03
    26ea:	91 83       	std	Z+1, r25	; 0x01
    26ec:	80 83       	st	Z, r24
    26ee:	0b c0       	rjmp	.+22     	; 0x2706 <Gpt_SetCompareValue+0x80>
        break;
    case GPT_COMP1B:
        OCR1B = value;
    26f0:	e8 e4       	ldi	r30, 0x48	; 72
    26f2:	f0 e0       	ldi	r31, 0x00	; 0
    26f4:	8a 81       	ldd	r24, Y+2	; 0x02
    26f6:	9b 81       	ldd	r25, Y+3	; 0x03
    26f8:	91 83       	std	Z+1, r25	; 0x01
    26fa:	80 83       	st	Z, r24
    26fc:	04 c0       	rjmp	.+8      	; 0x2706 <Gpt_SetCompareValue+0x80>
        break;
    case GPT_COMP2:
        OCR2 = value;
    26fe:	e3 e4       	ldi	r30, 0x43	; 67
    2700:	f0 e0       	ldi	r31, 0x00	; 0
    2702:	8a 81       	ldd	r24, Y+2	; 0x02
    2704:	80 83       	st	Z, r24
        break;
    default:
        break;
    }
}
    2706:	0f 90       	pop	r0
    2708:	0f 90       	pop	r0
    270a:	0f 90       	pop	r0
    270c:	0f 90       	pop	r0
    270e:	0f 90       	pop	r0
    2710:	cf 91       	pop	r28
    2712:	df 91       	pop	r29
    2714:	08 95       	ret

00002716 <Gpt_SetCounterValue>:
void Gpt_SetCounterValue (Gpt_ChannelType channel, u16 value)
{
    2716:	df 93       	push	r29
    2718:	cf 93       	push	r28
    271a:	00 d0       	rcall	.+0      	; 0x271c <Gpt_SetCounterValue+0x6>
    271c:	00 d0       	rcall	.+0      	; 0x271e <Gpt_SetCounterValue+0x8>
    271e:	0f 92       	push	r0
    2720:	cd b7       	in	r28, 0x3d	; 61
    2722:	de b7       	in	r29, 0x3e	; 62
    2724:	89 83       	std	Y+1, r24	; 0x01
    2726:	7b 83       	std	Y+3, r23	; 0x03
    2728:	6a 83       	std	Y+2, r22	; 0x02
    switch (channel)
    272a:	89 81       	ldd	r24, Y+1	; 0x01
    272c:	28 2f       	mov	r18, r24
    272e:	30 e0       	ldi	r19, 0x00	; 0
    2730:	3d 83       	std	Y+5, r19	; 0x05
    2732:	2c 83       	std	Y+4, r18	; 0x04
    2734:	8c 81       	ldd	r24, Y+4	; 0x04
    2736:	9d 81       	ldd	r25, Y+5	; 0x05
    2738:	81 30       	cpi	r24, 0x01	; 1
    273a:	91 05       	cpc	r25, r1
    273c:	71 f0       	breq	.+28     	; 0x275a <Gpt_SetCounterValue+0x44>
    273e:	2c 81       	ldd	r18, Y+4	; 0x04
    2740:	3d 81       	ldd	r19, Y+5	; 0x05
    2742:	22 30       	cpi	r18, 0x02	; 2
    2744:	31 05       	cpc	r19, r1
    2746:	81 f0       	breq	.+32     	; 0x2768 <Gpt_SetCounterValue+0x52>
    2748:	8c 81       	ldd	r24, Y+4	; 0x04
    274a:	9d 81       	ldd	r25, Y+5	; 0x05
    274c:	00 97       	sbiw	r24, 0x00	; 0
    274e:	81 f4       	brne	.+32     	; 0x2770 <Gpt_SetCounterValue+0x5a>
    {
    case GPT_CHANNEL_TIM0:
        TCNT0 = value;
    2750:	e2 e5       	ldi	r30, 0x52	; 82
    2752:	f0 e0       	ldi	r31, 0x00	; 0
    2754:	8a 81       	ldd	r24, Y+2	; 0x02
    2756:	80 83       	st	Z, r24
    2758:	0b c0       	rjmp	.+22     	; 0x2770 <Gpt_SetCounterValue+0x5a>
        break;
    case GPT_CHANNEL_TIM1:
        TCNT1 = value;
    275a:	ec e4       	ldi	r30, 0x4C	; 76
    275c:	f0 e0       	ldi	r31, 0x00	; 0
    275e:	8a 81       	ldd	r24, Y+2	; 0x02
    2760:	9b 81       	ldd	r25, Y+3	; 0x03
    2762:	91 83       	std	Z+1, r25	; 0x01
    2764:	80 83       	st	Z, r24
    2766:	04 c0       	rjmp	.+8      	; 0x2770 <Gpt_SetCounterValue+0x5a>
        break;
    case GPT_CHANNEL_TIM2:
        TCNT2 = value;
    2768:	e4 e4       	ldi	r30, 0x44	; 68
    276a:	f0 e0       	ldi	r31, 0x00	; 0
    276c:	8a 81       	ldd	r24, Y+2	; 0x02
    276e:	80 83       	st	Z, r24
        break;
    default:
        break;
    }
}
    2770:	0f 90       	pop	r0
    2772:	0f 90       	pop	r0
    2774:	0f 90       	pop	r0
    2776:	0f 90       	pop	r0
    2778:	0f 90       	pop	r0
    277a:	cf 91       	pop	r28
    277c:	df 91       	pop	r29
    277e:	08 95       	ret

00002780 <Gpt_GetElapsedTime>:

u16 Gpt_GetElapsedTime (Gpt_ChannelType channel)
{
    2780:	df 93       	push	r29
    2782:	cf 93       	push	r28
    2784:	00 d0       	rcall	.+0      	; 0x2786 <Gpt_GetElapsedTime+0x6>
    2786:	0f 92       	push	r0
    2788:	cd b7       	in	r28, 0x3d	; 61
    278a:	de b7       	in	r29, 0x3e	; 62
    278c:	8b 83       	std	Y+3, r24	; 0x03
    u16 value = 0;
    278e:	1a 82       	std	Y+2, r1	; 0x02
    2790:	19 82       	std	Y+1, r1	; 0x01
    if (GPT_CHANNEL_TIM0 == channel)
    2792:	8b 81       	ldd	r24, Y+3	; 0x03
    2794:	88 23       	and	r24, r24
    2796:	41 f4       	brne	.+16     	; 0x27a8 <Gpt_GetElapsedTime+0x28>
    {
        value = TCNT0;
    2798:	e2 e5       	ldi	r30, 0x52	; 82
    279a:	f0 e0       	ldi	r31, 0x00	; 0
    279c:	80 81       	ld	r24, Z
    279e:	88 2f       	mov	r24, r24
    27a0:	90 e0       	ldi	r25, 0x00	; 0
    27a2:	9a 83       	std	Y+2, r25	; 0x02
    27a4:	89 83       	std	Y+1, r24	; 0x01
    27a6:	14 c0       	rjmp	.+40     	; 0x27d0 <Gpt_GetElapsedTime+0x50>
    }
    else if (GPT_CHANNEL_TIM1 == channel)
    27a8:	8b 81       	ldd	r24, Y+3	; 0x03
    27aa:	81 30       	cpi	r24, 0x01	; 1
    27ac:	39 f4       	brne	.+14     	; 0x27bc <Gpt_GetElapsedTime+0x3c>
    {
        value = TCNT1;
    27ae:	ec e4       	ldi	r30, 0x4C	; 76
    27b0:	f0 e0       	ldi	r31, 0x00	; 0
    27b2:	80 81       	ld	r24, Z
    27b4:	91 81       	ldd	r25, Z+1	; 0x01
    27b6:	9a 83       	std	Y+2, r25	; 0x02
    27b8:	89 83       	std	Y+1, r24	; 0x01
    27ba:	0a c0       	rjmp	.+20     	; 0x27d0 <Gpt_GetElapsedTime+0x50>
    }
    else if (GPT_CHANNEL_TIM2 == channel)
    27bc:	8b 81       	ldd	r24, Y+3	; 0x03
    27be:	82 30       	cpi	r24, 0x02	; 2
    27c0:	39 f4       	brne	.+14     	; 0x27d0 <Gpt_GetElapsedTime+0x50>
    {
        value = TCNT2;
    27c2:	e4 e4       	ldi	r30, 0x44	; 68
    27c4:	f0 e0       	ldi	r31, 0x00	; 0
    27c6:	80 81       	ld	r24, Z
    27c8:	88 2f       	mov	r24, r24
    27ca:	90 e0       	ldi	r25, 0x00	; 0
    27cc:	9a 83       	std	Y+2, r25	; 0x02
    27ce:	89 83       	std	Y+1, r24	; 0x01
    }
    return value;
    27d0:	89 81       	ldd	r24, Y+1	; 0x01
    27d2:	9a 81       	ldd	r25, Y+2	; 0x02
}
    27d4:	0f 90       	pop	r0
    27d6:	0f 90       	pop	r0
    27d8:	0f 90       	pop	r0
    27da:	cf 91       	pop	r28
    27dc:	df 91       	pop	r29
    27de:	08 95       	ret

000027e0 <Gpt_EnableInterrupt>:

void Gpt_EnableInterrupt(Gpt_InterruptSourceType source)
{
    27e0:	df 93       	push	r29
    27e2:	cf 93       	push	r28
    27e4:	00 d0       	rcall	.+0      	; 0x27e6 <Gpt_EnableInterrupt+0x6>
    27e6:	0f 92       	push	r0
    27e8:	cd b7       	in	r28, 0x3d	; 61
    27ea:	de b7       	in	r29, 0x3e	; 62
    27ec:	89 83       	std	Y+1, r24	; 0x01
    switch (source)
    27ee:	89 81       	ldd	r24, Y+1	; 0x01
    27f0:	28 2f       	mov	r18, r24
    27f2:	30 e0       	ldi	r19, 0x00	; 0
    27f4:	3b 83       	std	Y+3, r19	; 0x03
    27f6:	2a 83       	std	Y+2, r18	; 0x02
    27f8:	8a 81       	ldd	r24, Y+2	; 0x02
    27fa:	9b 81       	ldd	r25, Y+3	; 0x03
    27fc:	83 30       	cpi	r24, 0x03	; 3
    27fe:	91 05       	cpc	r25, r1
    2800:	e1 f1       	breq	.+120    	; 0x287a <Gpt_EnableInterrupt+0x9a>
    2802:	2a 81       	ldd	r18, Y+2	; 0x02
    2804:	3b 81       	ldd	r19, Y+3	; 0x03
    2806:	24 30       	cpi	r18, 0x04	; 4
    2808:	31 05       	cpc	r19, r1
    280a:	7c f4       	brge	.+30     	; 0x282a <Gpt_EnableInterrupt+0x4a>
    280c:	8a 81       	ldd	r24, Y+2	; 0x02
    280e:	9b 81       	ldd	r25, Y+3	; 0x03
    2810:	81 30       	cpi	r24, 0x01	; 1
    2812:	91 05       	cpc	r25, r1
    2814:	11 f1       	breq	.+68     	; 0x285a <Gpt_EnableInterrupt+0x7a>
    2816:	2a 81       	ldd	r18, Y+2	; 0x02
    2818:	3b 81       	ldd	r19, Y+3	; 0x03
    281a:	22 30       	cpi	r18, 0x02	; 2
    281c:	31 05       	cpc	r19, r1
    281e:	2c f5       	brge	.+74     	; 0x286a <Gpt_EnableInterrupt+0x8a>
    2820:	8a 81       	ldd	r24, Y+2	; 0x02
    2822:	9b 81       	ldd	r25, Y+3	; 0x03
    2824:	00 97       	sbiw	r24, 0x00	; 0
    2826:	89 f0       	breq	.+34     	; 0x284a <Gpt_EnableInterrupt+0x6a>
    2828:	47 c0       	rjmp	.+142    	; 0x28b8 <Gpt_EnableInterrupt+0xd8>
    282a:	2a 81       	ldd	r18, Y+2	; 0x02
    282c:	3b 81       	ldd	r19, Y+3	; 0x03
    282e:	25 30       	cpi	r18, 0x05	; 5
    2830:	31 05       	cpc	r19, r1
    2832:	99 f1       	breq	.+102    	; 0x289a <Gpt_EnableInterrupt+0xba>
    2834:	8a 81       	ldd	r24, Y+2	; 0x02
    2836:	9b 81       	ldd	r25, Y+3	; 0x03
    2838:	85 30       	cpi	r24, 0x05	; 5
    283a:	91 05       	cpc	r25, r1
    283c:	34 f1       	brlt	.+76     	; 0x288a <Gpt_EnableInterrupt+0xaa>
    283e:	2a 81       	ldd	r18, Y+2	; 0x02
    2840:	3b 81       	ldd	r19, Y+3	; 0x03
    2842:	26 30       	cpi	r18, 0x06	; 6
    2844:	31 05       	cpc	r19, r1
    2846:	89 f1       	breq	.+98     	; 0x28aa <Gpt_EnableInterrupt+0xca>
    2848:	37 c0       	rjmp	.+110    	; 0x28b8 <Gpt_EnableInterrupt+0xd8>
    {
    case GPT_INT_SOURCE_TIM0_OVF:
        SET_BIT(TIMSK, 0);
    284a:	a9 e5       	ldi	r26, 0x59	; 89
    284c:	b0 e0       	ldi	r27, 0x00	; 0
    284e:	e9 e5       	ldi	r30, 0x59	; 89
    2850:	f0 e0       	ldi	r31, 0x00	; 0
    2852:	80 81       	ld	r24, Z
    2854:	81 60       	ori	r24, 0x01	; 1
    2856:	8c 93       	st	X, r24
    2858:	2f c0       	rjmp	.+94     	; 0x28b8 <Gpt_EnableInterrupt+0xd8>
        break;
    case GPT_INT_SOURCE_TIM0_COMP:
        SET_BIT(TIMSK, 1);
    285a:	a9 e5       	ldi	r26, 0x59	; 89
    285c:	b0 e0       	ldi	r27, 0x00	; 0
    285e:	e9 e5       	ldi	r30, 0x59	; 89
    2860:	f0 e0       	ldi	r31, 0x00	; 0
    2862:	80 81       	ld	r24, Z
    2864:	82 60       	ori	r24, 0x02	; 2
    2866:	8c 93       	st	X, r24
    2868:	27 c0       	rjmp	.+78     	; 0x28b8 <Gpt_EnableInterrupt+0xd8>
        break;
    case GPT_INT_SOURCE_TIM1_OVF:
        SET_BIT(TIMSK, 2);
    286a:	a9 e5       	ldi	r26, 0x59	; 89
    286c:	b0 e0       	ldi	r27, 0x00	; 0
    286e:	e9 e5       	ldi	r30, 0x59	; 89
    2870:	f0 e0       	ldi	r31, 0x00	; 0
    2872:	80 81       	ld	r24, Z
    2874:	84 60       	ori	r24, 0x04	; 4
    2876:	8c 93       	st	X, r24
    2878:	1f c0       	rjmp	.+62     	; 0x28b8 <Gpt_EnableInterrupt+0xd8>
        break;
    case GPT_INT_SOURCE_TIM1_COMPA:
        SET_BIT(TIMSK, 4);
    287a:	a9 e5       	ldi	r26, 0x59	; 89
    287c:	b0 e0       	ldi	r27, 0x00	; 0
    287e:	e9 e5       	ldi	r30, 0x59	; 89
    2880:	f0 e0       	ldi	r31, 0x00	; 0
    2882:	80 81       	ld	r24, Z
    2884:	80 61       	ori	r24, 0x10	; 16
    2886:	8c 93       	st	X, r24
    2888:	17 c0       	rjmp	.+46     	; 0x28b8 <Gpt_EnableInterrupt+0xd8>
        break;
    case GPT_INT_SOURCE_TIM1_COMPB:
        SET_BIT(TIMSK, 3);
    288a:	a9 e5       	ldi	r26, 0x59	; 89
    288c:	b0 e0       	ldi	r27, 0x00	; 0
    288e:	e9 e5       	ldi	r30, 0x59	; 89
    2890:	f0 e0       	ldi	r31, 0x00	; 0
    2892:	80 81       	ld	r24, Z
    2894:	88 60       	ori	r24, 0x08	; 8
    2896:	8c 93       	st	X, r24
    2898:	0f c0       	rjmp	.+30     	; 0x28b8 <Gpt_EnableInterrupt+0xd8>
        break;
    case GPT_INT_SOURCE_TIM2_OVF:
        SET_BIT(TIMSK, 6);
    289a:	a9 e5       	ldi	r26, 0x59	; 89
    289c:	b0 e0       	ldi	r27, 0x00	; 0
    289e:	e9 e5       	ldi	r30, 0x59	; 89
    28a0:	f0 e0       	ldi	r31, 0x00	; 0
    28a2:	80 81       	ld	r24, Z
    28a4:	80 64       	ori	r24, 0x40	; 64
    28a6:	8c 93       	st	X, r24
    28a8:	07 c0       	rjmp	.+14     	; 0x28b8 <Gpt_EnableInterrupt+0xd8>
        break;
    case GPT_INT_SOURCE_TIM2_COMP:
        SET_BIT(TIMSK, 7);
    28aa:	a9 e5       	ldi	r26, 0x59	; 89
    28ac:	b0 e0       	ldi	r27, 0x00	; 0
    28ae:	e9 e5       	ldi	r30, 0x59	; 89
    28b0:	f0 e0       	ldi	r31, 0x00	; 0
    28b2:	80 81       	ld	r24, Z
    28b4:	80 68       	ori	r24, 0x80	; 128
    28b6:	8c 93       	st	X, r24
        break;
    default:
        break;
    }
}
    28b8:	0f 90       	pop	r0
    28ba:	0f 90       	pop	r0
    28bc:	0f 90       	pop	r0
    28be:	cf 91       	pop	r28
    28c0:	df 91       	pop	r29
    28c2:	08 95       	ret

000028c4 <Gpt_DisableInterrupt>:

void Gpt_DisableInterrupt(Gpt_InterruptSourceType source)
{
    28c4:	df 93       	push	r29
    28c6:	cf 93       	push	r28
    28c8:	00 d0       	rcall	.+0      	; 0x28ca <Gpt_DisableInterrupt+0x6>
    28ca:	0f 92       	push	r0
    28cc:	cd b7       	in	r28, 0x3d	; 61
    28ce:	de b7       	in	r29, 0x3e	; 62
    28d0:	89 83       	std	Y+1, r24	; 0x01
    switch (source)
    28d2:	89 81       	ldd	r24, Y+1	; 0x01
    28d4:	28 2f       	mov	r18, r24
    28d6:	30 e0       	ldi	r19, 0x00	; 0
    28d8:	3b 83       	std	Y+3, r19	; 0x03
    28da:	2a 83       	std	Y+2, r18	; 0x02
    28dc:	8a 81       	ldd	r24, Y+2	; 0x02
    28de:	9b 81       	ldd	r25, Y+3	; 0x03
    28e0:	83 30       	cpi	r24, 0x03	; 3
    28e2:	91 05       	cpc	r25, r1
    28e4:	e1 f1       	breq	.+120    	; 0x295e <Gpt_DisableInterrupt+0x9a>
    28e6:	2a 81       	ldd	r18, Y+2	; 0x02
    28e8:	3b 81       	ldd	r19, Y+3	; 0x03
    28ea:	24 30       	cpi	r18, 0x04	; 4
    28ec:	31 05       	cpc	r19, r1
    28ee:	7c f4       	brge	.+30     	; 0x290e <Gpt_DisableInterrupt+0x4a>
    28f0:	8a 81       	ldd	r24, Y+2	; 0x02
    28f2:	9b 81       	ldd	r25, Y+3	; 0x03
    28f4:	81 30       	cpi	r24, 0x01	; 1
    28f6:	91 05       	cpc	r25, r1
    28f8:	11 f1       	breq	.+68     	; 0x293e <Gpt_DisableInterrupt+0x7a>
    28fa:	2a 81       	ldd	r18, Y+2	; 0x02
    28fc:	3b 81       	ldd	r19, Y+3	; 0x03
    28fe:	22 30       	cpi	r18, 0x02	; 2
    2900:	31 05       	cpc	r19, r1
    2902:	2c f5       	brge	.+74     	; 0x294e <Gpt_DisableInterrupt+0x8a>
    2904:	8a 81       	ldd	r24, Y+2	; 0x02
    2906:	9b 81       	ldd	r25, Y+3	; 0x03
    2908:	00 97       	sbiw	r24, 0x00	; 0
    290a:	89 f0       	breq	.+34     	; 0x292e <Gpt_DisableInterrupt+0x6a>
    290c:	47 c0       	rjmp	.+142    	; 0x299c <Gpt_DisableInterrupt+0xd8>
    290e:	2a 81       	ldd	r18, Y+2	; 0x02
    2910:	3b 81       	ldd	r19, Y+3	; 0x03
    2912:	25 30       	cpi	r18, 0x05	; 5
    2914:	31 05       	cpc	r19, r1
    2916:	99 f1       	breq	.+102    	; 0x297e <Gpt_DisableInterrupt+0xba>
    2918:	8a 81       	ldd	r24, Y+2	; 0x02
    291a:	9b 81       	ldd	r25, Y+3	; 0x03
    291c:	85 30       	cpi	r24, 0x05	; 5
    291e:	91 05       	cpc	r25, r1
    2920:	34 f1       	brlt	.+76     	; 0x296e <Gpt_DisableInterrupt+0xaa>
    2922:	2a 81       	ldd	r18, Y+2	; 0x02
    2924:	3b 81       	ldd	r19, Y+3	; 0x03
    2926:	26 30       	cpi	r18, 0x06	; 6
    2928:	31 05       	cpc	r19, r1
    292a:	89 f1       	breq	.+98     	; 0x298e <Gpt_DisableInterrupt+0xca>
    292c:	37 c0       	rjmp	.+110    	; 0x299c <Gpt_DisableInterrupt+0xd8>
    {
    case GPT_INT_SOURCE_TIM0_OVF:
        CLR_BIT(TIMSK, 0);
    292e:	a9 e5       	ldi	r26, 0x59	; 89
    2930:	b0 e0       	ldi	r27, 0x00	; 0
    2932:	e9 e5       	ldi	r30, 0x59	; 89
    2934:	f0 e0       	ldi	r31, 0x00	; 0
    2936:	80 81       	ld	r24, Z
    2938:	8e 7f       	andi	r24, 0xFE	; 254
    293a:	8c 93       	st	X, r24
    293c:	2f c0       	rjmp	.+94     	; 0x299c <Gpt_DisableInterrupt+0xd8>
        break;
    case GPT_INT_SOURCE_TIM0_COMP:
        CLR_BIT(TIMSK, 1);
    293e:	a9 e5       	ldi	r26, 0x59	; 89
    2940:	b0 e0       	ldi	r27, 0x00	; 0
    2942:	e9 e5       	ldi	r30, 0x59	; 89
    2944:	f0 e0       	ldi	r31, 0x00	; 0
    2946:	80 81       	ld	r24, Z
    2948:	8d 7f       	andi	r24, 0xFD	; 253
    294a:	8c 93       	st	X, r24
    294c:	27 c0       	rjmp	.+78     	; 0x299c <Gpt_DisableInterrupt+0xd8>
        break;
    case GPT_INT_SOURCE_TIM1_OVF:
        CLR_BIT(TIMSK, 2);
    294e:	a9 e5       	ldi	r26, 0x59	; 89
    2950:	b0 e0       	ldi	r27, 0x00	; 0
    2952:	e9 e5       	ldi	r30, 0x59	; 89
    2954:	f0 e0       	ldi	r31, 0x00	; 0
    2956:	80 81       	ld	r24, Z
    2958:	8b 7f       	andi	r24, 0xFB	; 251
    295a:	8c 93       	st	X, r24
    295c:	1f c0       	rjmp	.+62     	; 0x299c <Gpt_DisableInterrupt+0xd8>
        break;
    case GPT_INT_SOURCE_TIM1_COMPA:
        CLR_BIT(TIMSK, 4);
    295e:	a9 e5       	ldi	r26, 0x59	; 89
    2960:	b0 e0       	ldi	r27, 0x00	; 0
    2962:	e9 e5       	ldi	r30, 0x59	; 89
    2964:	f0 e0       	ldi	r31, 0x00	; 0
    2966:	80 81       	ld	r24, Z
    2968:	8f 7e       	andi	r24, 0xEF	; 239
    296a:	8c 93       	st	X, r24
    296c:	17 c0       	rjmp	.+46     	; 0x299c <Gpt_DisableInterrupt+0xd8>
        break;
    case GPT_INT_SOURCE_TIM1_COMPB:
        CLR_BIT(TIMSK, 3);
    296e:	a9 e5       	ldi	r26, 0x59	; 89
    2970:	b0 e0       	ldi	r27, 0x00	; 0
    2972:	e9 e5       	ldi	r30, 0x59	; 89
    2974:	f0 e0       	ldi	r31, 0x00	; 0
    2976:	80 81       	ld	r24, Z
    2978:	87 7f       	andi	r24, 0xF7	; 247
    297a:	8c 93       	st	X, r24
    297c:	0f c0       	rjmp	.+30     	; 0x299c <Gpt_DisableInterrupt+0xd8>
        break;
    case GPT_INT_SOURCE_TIM2_OVF:
        CLR_BIT(TIMSK, 6);
    297e:	a9 e5       	ldi	r26, 0x59	; 89
    2980:	b0 e0       	ldi	r27, 0x00	; 0
    2982:	e9 e5       	ldi	r30, 0x59	; 89
    2984:	f0 e0       	ldi	r31, 0x00	; 0
    2986:	80 81       	ld	r24, Z
    2988:	8f 7b       	andi	r24, 0xBF	; 191
    298a:	8c 93       	st	X, r24
    298c:	07 c0       	rjmp	.+14     	; 0x299c <Gpt_DisableInterrupt+0xd8>
        break;
    case GPT_INT_SOURCE_TIM2_COMP:
        CLR_BIT(TIMSK, 7);
    298e:	a9 e5       	ldi	r26, 0x59	; 89
    2990:	b0 e0       	ldi	r27, 0x00	; 0
    2992:	e9 e5       	ldi	r30, 0x59	; 89
    2994:	f0 e0       	ldi	r31, 0x00	; 0
    2996:	80 81       	ld	r24, Z
    2998:	8f 77       	andi	r24, 0x7F	; 127
    299a:	8c 93       	st	X, r24
        break;
    default:
        break;
    }
}
    299c:	0f 90       	pop	r0
    299e:	0f 90       	pop	r0
    29a0:	0f 90       	pop	r0
    29a2:	cf 91       	pop	r28
    29a4:	df 91       	pop	r29
    29a6:	08 95       	ret

000029a8 <Gpt_SetCallback>:

void Gpt_SetCallback(Gpt_InterruptSourceType source, void (*callbackPtr) (void))
{
    29a8:	df 93       	push	r29
    29aa:	cf 93       	push	r28
    29ac:	00 d0       	rcall	.+0      	; 0x29ae <Gpt_SetCallback+0x6>
    29ae:	00 d0       	rcall	.+0      	; 0x29b0 <Gpt_SetCallback+0x8>
    29b0:	0f 92       	push	r0
    29b2:	cd b7       	in	r28, 0x3d	; 61
    29b4:	de b7       	in	r29, 0x3e	; 62
    29b6:	89 83       	std	Y+1, r24	; 0x01
    29b8:	7b 83       	std	Y+3, r23	; 0x03
    29ba:	6a 83       	std	Y+2, r22	; 0x02
    switch (source)
    29bc:	89 81       	ldd	r24, Y+1	; 0x01
    29be:	28 2f       	mov	r18, r24
    29c0:	30 e0       	ldi	r19, 0x00	; 0
    29c2:	3d 83       	std	Y+5, r19	; 0x05
    29c4:	2c 83       	std	Y+4, r18	; 0x04
    29c6:	8c 81       	ldd	r24, Y+4	; 0x04
    29c8:	9d 81       	ldd	r25, Y+5	; 0x05
    29ca:	83 30       	cpi	r24, 0x03	; 3
    29cc:	91 05       	cpc	r25, r1
    29ce:	c9 f1       	breq	.+114    	; 0x2a42 <Gpt_SetCallback+0x9a>
    29d0:	2c 81       	ldd	r18, Y+4	; 0x04
    29d2:	3d 81       	ldd	r19, Y+5	; 0x05
    29d4:	24 30       	cpi	r18, 0x04	; 4
    29d6:	31 05       	cpc	r19, r1
    29d8:	7c f4       	brge	.+30     	; 0x29f8 <Gpt_SetCallback+0x50>
    29da:	8c 81       	ldd	r24, Y+4	; 0x04
    29dc:	9d 81       	ldd	r25, Y+5	; 0x05
    29de:	81 30       	cpi	r24, 0x01	; 1
    29e0:	91 05       	cpc	r25, r1
    29e2:	09 f1       	breq	.+66     	; 0x2a26 <Gpt_SetCallback+0x7e>
    29e4:	2c 81       	ldd	r18, Y+4	; 0x04
    29e6:	3d 81       	ldd	r19, Y+5	; 0x05
    29e8:	22 30       	cpi	r18, 0x02	; 2
    29ea:	31 05       	cpc	r19, r1
    29ec:	1c f5       	brge	.+70     	; 0x2a34 <Gpt_SetCallback+0x8c>
    29ee:	8c 81       	ldd	r24, Y+4	; 0x04
    29f0:	9d 81       	ldd	r25, Y+5	; 0x05
    29f2:	00 97       	sbiw	r24, 0x00	; 0
    29f4:	89 f0       	breq	.+34     	; 0x2a18 <Gpt_SetCallback+0x70>
    29f6:	40 c0       	rjmp	.+128    	; 0x2a78 <Gpt_SetCallback+0xd0>
    29f8:	2c 81       	ldd	r18, Y+4	; 0x04
    29fa:	3d 81       	ldd	r19, Y+5	; 0x05
    29fc:	25 30       	cpi	r18, 0x05	; 5
    29fe:	31 05       	cpc	r19, r1
    2a00:	71 f1       	breq	.+92     	; 0x2a5e <Gpt_SetCallback+0xb6>
    2a02:	8c 81       	ldd	r24, Y+4	; 0x04
    2a04:	9d 81       	ldd	r25, Y+5	; 0x05
    2a06:	85 30       	cpi	r24, 0x05	; 5
    2a08:	91 05       	cpc	r25, r1
    2a0a:	14 f1       	brlt	.+68     	; 0x2a50 <Gpt_SetCallback+0xa8>
    2a0c:	2c 81       	ldd	r18, Y+4	; 0x04
    2a0e:	3d 81       	ldd	r19, Y+5	; 0x05
    2a10:	26 30       	cpi	r18, 0x06	; 6
    2a12:	31 05       	cpc	r19, r1
    2a14:	59 f1       	breq	.+86     	; 0x2a6c <Gpt_SetCallback+0xc4>
    2a16:	30 c0       	rjmp	.+96     	; 0x2a78 <Gpt_SetCallback+0xd0>
    {
    case GPT_INT_SOURCE_TIM0_OVF:
        Callback_Gpt_TIM0_OVF = callbackPtr;
    2a18:	8a 81       	ldd	r24, Y+2	; 0x02
    2a1a:	9b 81       	ldd	r25, Y+3	; 0x03
    2a1c:	90 93 83 00 	sts	0x0083, r25
    2a20:	80 93 82 00 	sts	0x0082, r24
    2a24:	29 c0       	rjmp	.+82     	; 0x2a78 <Gpt_SetCallback+0xd0>
        break;
    case GPT_INT_SOURCE_TIM0_COMP:
        Callback_Gpt_TIM0_COMP = callbackPtr;
    2a26:	8a 81       	ldd	r24, Y+2	; 0x02
    2a28:	9b 81       	ldd	r25, Y+3	; 0x03
    2a2a:	90 93 85 00 	sts	0x0085, r25
    2a2e:	80 93 84 00 	sts	0x0084, r24
    2a32:	22 c0       	rjmp	.+68     	; 0x2a78 <Gpt_SetCallback+0xd0>
        break;
    case GPT_INT_SOURCE_TIM1_OVF:
        Callback_Gpt_TIM1_OVF = callbackPtr;
    2a34:	8a 81       	ldd	r24, Y+2	; 0x02
    2a36:	9b 81       	ldd	r25, Y+3	; 0x03
    2a38:	90 93 87 00 	sts	0x0087, r25
    2a3c:	80 93 86 00 	sts	0x0086, r24
    2a40:	1b c0       	rjmp	.+54     	; 0x2a78 <Gpt_SetCallback+0xd0>
        break;
    case GPT_INT_SOURCE_TIM1_COMPA:
        Callback_Gpt_TIM1_COMPA = callbackPtr;
    2a42:	8a 81       	ldd	r24, Y+2	; 0x02
    2a44:	9b 81       	ldd	r25, Y+3	; 0x03
    2a46:	90 93 89 00 	sts	0x0089, r25
    2a4a:	80 93 88 00 	sts	0x0088, r24
    2a4e:	14 c0       	rjmp	.+40     	; 0x2a78 <Gpt_SetCallback+0xd0>
        break;
    case GPT_INT_SOURCE_TIM1_COMPB:
        Callback_Gpt_TIM1_COMPB = callbackPtr;
    2a50:	8a 81       	ldd	r24, Y+2	; 0x02
    2a52:	9b 81       	ldd	r25, Y+3	; 0x03
    2a54:	90 93 8b 00 	sts	0x008B, r25
    2a58:	80 93 8a 00 	sts	0x008A, r24
    2a5c:	0d c0       	rjmp	.+26     	; 0x2a78 <Gpt_SetCallback+0xd0>
        break;
    case GPT_INT_SOURCE_TIM2_OVF:
        Callback_Gpt_TIM2_OVF = callbackPtr;
    2a5e:	8a 81       	ldd	r24, Y+2	; 0x02
    2a60:	9b 81       	ldd	r25, Y+3	; 0x03
    2a62:	90 93 8d 00 	sts	0x008D, r25
    2a66:	80 93 8c 00 	sts	0x008C, r24
    2a6a:	06 c0       	rjmp	.+12     	; 0x2a78 <Gpt_SetCallback+0xd0>
        break;
    case GPT_INT_SOURCE_TIM2_COMP:
        Callback_Gpt_TIM2_COMP = callbackPtr;
    2a6c:	8a 81       	ldd	r24, Y+2	; 0x02
    2a6e:	9b 81       	ldd	r25, Y+3	; 0x03
    2a70:	90 93 8f 00 	sts	0x008F, r25
    2a74:	80 93 8e 00 	sts	0x008E, r24
        break;
    default:
        break;
    }
}
    2a78:	0f 90       	pop	r0
    2a7a:	0f 90       	pop	r0
    2a7c:	0f 90       	pop	r0
    2a7e:	0f 90       	pop	r0
    2a80:	0f 90       	pop	r0
    2a82:	cf 91       	pop	r28
    2a84:	df 91       	pop	r29
    2a86:	08 95       	ret

00002a88 <Pwm_Init>:
#include "Registers.h"
#include "Dio.h"
#include "Pwm.h"

StdReturnType Pwm_Init (Pwm_ConfigurationType* config)
{
    2a88:	df 93       	push	r29
    2a8a:	cf 93       	push	r28
    2a8c:	00 d0       	rcall	.+0      	; 0x2a8e <Pwm_Init+0x6>
    2a8e:	0f 92       	push	r0
    2a90:	cd b7       	in	r28, 0x3d	; 61
    2a92:	de b7       	in	r29, 0x3e	; 62
    2a94:	9b 83       	std	Y+3, r25	; 0x03
    2a96:	8a 83       	std	Y+2, r24	; 0x02
    StdReturnType retVal = E_OK;
    2a98:	19 82       	std	Y+1, r1	; 0x01

    if (PWM_MODE_OFF != config->OC0_mode)
    2a9a:	ea 81       	ldd	r30, Y+2	; 0x02
    2a9c:	fb 81       	ldd	r31, Y+3	; 0x03
    2a9e:	80 81       	ld	r24, Z
    2aa0:	88 23       	and	r24, r24
    2aa2:	09 f4       	brne	.+2      	; 0x2aa6 <Pwm_Init+0x1e>
    2aa4:	60 c0       	rjmp	.+192    	; 0x2b66 <Pwm_Init+0xde>
    {
        /* Set OC0 Pin to Output */
        Dio_SetPinMode(PWM_PIN_OC0, DIO_MODE_OUTPUT);
    2aa6:	81 e0       	ldi	r24, 0x01	; 1
    2aa8:	63 e0       	ldi	r22, 0x03	; 3
    2aaa:	40 e0       	ldi	r20, 0x00	; 0
    2aac:	0e 94 a3 05 	call	0xb46	; 0xb46 <Dio_SetPinMode>

        /* Waveform Generation Mode */
        if (config->OC0_mode == PWM_MODE_FAST)
    2ab0:	ea 81       	ldd	r30, Y+2	; 0x02
    2ab2:	fb 81       	ldd	r31, Y+3	; 0x03
    2ab4:	80 81       	ld	r24, Z
    2ab6:	81 30       	cpi	r24, 0x01	; 1
    2ab8:	79 f4       	brne	.+30     	; 0x2ad8 <Pwm_Init+0x50>
        {
            SET_BIT(TCCR0, 3);
    2aba:	a3 e5       	ldi	r26, 0x53	; 83
    2abc:	b0 e0       	ldi	r27, 0x00	; 0
    2abe:	e3 e5       	ldi	r30, 0x53	; 83
    2ac0:	f0 e0       	ldi	r31, 0x00	; 0
    2ac2:	80 81       	ld	r24, Z
    2ac4:	88 60       	ori	r24, 0x08	; 8
    2ac6:	8c 93       	st	X, r24
            SET_BIT(TCCR0, 6);
    2ac8:	a3 e5       	ldi	r26, 0x53	; 83
    2aca:	b0 e0       	ldi	r27, 0x00	; 0
    2acc:	e3 e5       	ldi	r30, 0x53	; 83
    2ace:	f0 e0       	ldi	r31, 0x00	; 0
    2ad0:	80 81       	ld	r24, Z
    2ad2:	80 64       	ori	r24, 0x40	; 64
    2ad4:	8c 93       	st	X, r24
    2ad6:	16 c0       	rjmp	.+44     	; 0x2b04 <Pwm_Init+0x7c>
        }
        else if (config->OC0_mode == PWM_MODE_PHASE_CORRECT)
    2ad8:	ea 81       	ldd	r30, Y+2	; 0x02
    2ada:	fb 81       	ldd	r31, Y+3	; 0x03
    2adc:	80 81       	ld	r24, Z
    2ade:	82 30       	cpi	r24, 0x02	; 2
    2ae0:	79 f4       	brne	.+30     	; 0x2b00 <Pwm_Init+0x78>
        {
            SET_BIT(TCCR0, 3);
    2ae2:	a3 e5       	ldi	r26, 0x53	; 83
    2ae4:	b0 e0       	ldi	r27, 0x00	; 0
    2ae6:	e3 e5       	ldi	r30, 0x53	; 83
    2ae8:	f0 e0       	ldi	r31, 0x00	; 0
    2aea:	80 81       	ld	r24, Z
    2aec:	88 60       	ori	r24, 0x08	; 8
    2aee:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, 6);
    2af0:	a3 e5       	ldi	r26, 0x53	; 83
    2af2:	b0 e0       	ldi	r27, 0x00	; 0
    2af4:	e3 e5       	ldi	r30, 0x53	; 83
    2af6:	f0 e0       	ldi	r31, 0x00	; 0
    2af8:	80 81       	ld	r24, Z
    2afa:	8f 7b       	andi	r24, 0xBF	; 191
    2afc:	8c 93       	st	X, r24
    2afe:	02 c0       	rjmp	.+4      	; 0x2b04 <Pwm_Init+0x7c>
        }
        else
        {
            retVal = E_NOT_OK;
    2b00:	81 e0       	ldi	r24, 0x01	; 1
    2b02:	89 83       	std	Y+1, r24	; 0x01
        }

        /* Compare Match Output Mode */
        if (config->OC0_out == PWM_OUT_CLR_THEN_SET)
    2b04:	ea 81       	ldd	r30, Y+2	; 0x02
    2b06:	fb 81       	ldd	r31, Y+3	; 0x03
    2b08:	82 81       	ldd	r24, Z+2	; 0x02
    2b0a:	81 30       	cpi	r24, 0x01	; 1
    2b0c:	79 f4       	brne	.+30     	; 0x2b2c <Pwm_Init+0xa4>
        {
            CLR_BIT(TCCR0, 4);
    2b0e:	a3 e5       	ldi	r26, 0x53	; 83
    2b10:	b0 e0       	ldi	r27, 0x00	; 0
    2b12:	e3 e5       	ldi	r30, 0x53	; 83
    2b14:	f0 e0       	ldi	r31, 0x00	; 0
    2b16:	80 81       	ld	r24, Z
    2b18:	8f 7e       	andi	r24, 0xEF	; 239
    2b1a:	8c 93       	st	X, r24
            SET_BIT(TCCR0, 5);
    2b1c:	a3 e5       	ldi	r26, 0x53	; 83
    2b1e:	b0 e0       	ldi	r27, 0x00	; 0
    2b20:	e3 e5       	ldi	r30, 0x53	; 83
    2b22:	f0 e0       	ldi	r31, 0x00	; 0
    2b24:	80 81       	ld	r24, Z
    2b26:	80 62       	ori	r24, 0x20	; 32
    2b28:	8c 93       	st	X, r24
    2b2a:	16 c0       	rjmp	.+44     	; 0x2b58 <Pwm_Init+0xd0>
        }
        else if (config->OC0_out == PWM_OUT_SET_THEN_CLR)
    2b2c:	ea 81       	ldd	r30, Y+2	; 0x02
    2b2e:	fb 81       	ldd	r31, Y+3	; 0x03
    2b30:	82 81       	ldd	r24, Z+2	; 0x02
    2b32:	82 30       	cpi	r24, 0x02	; 2
    2b34:	79 f4       	brne	.+30     	; 0x2b54 <Pwm_Init+0xcc>
        {
            SET_BIT(TCCR0, 4);
    2b36:	a3 e5       	ldi	r26, 0x53	; 83
    2b38:	b0 e0       	ldi	r27, 0x00	; 0
    2b3a:	e3 e5       	ldi	r30, 0x53	; 83
    2b3c:	f0 e0       	ldi	r31, 0x00	; 0
    2b3e:	80 81       	ld	r24, Z
    2b40:	80 61       	ori	r24, 0x10	; 16
    2b42:	8c 93       	st	X, r24
            SET_BIT(TCCR0, 5);
    2b44:	a3 e5       	ldi	r26, 0x53	; 83
    2b46:	b0 e0       	ldi	r27, 0x00	; 0
    2b48:	e3 e5       	ldi	r30, 0x53	; 83
    2b4a:	f0 e0       	ldi	r31, 0x00	; 0
    2b4c:	80 81       	ld	r24, Z
    2b4e:	80 62       	ori	r24, 0x20	; 32
    2b50:	8c 93       	st	X, r24
    2b52:	02 c0       	rjmp	.+4      	; 0x2b58 <Pwm_Init+0xd0>
        }
        else
        {
            retVal = E_NOT_OK;
    2b54:	81 e0       	ldi	r24, 0x01	; 1
    2b56:	89 83       	std	Y+1, r24	; 0x01
        }

        /* Clock Select */
        Pwm_SetClockSource(PWM_CH0, config->OC0_clk);
    2b58:	ea 81       	ldd	r30, Y+2	; 0x02
    2b5a:	fb 81       	ldd	r31, Y+3	; 0x03
    2b5c:	91 81       	ldd	r25, Z+1	; 0x01
    2b5e:	80 e0       	ldi	r24, 0x00	; 0
    2b60:	69 2f       	mov	r22, r25
    2b62:	0e 94 f7 16 	call	0x2dee	; 0x2dee <Pwm_SetClockSource>
    }
    if (PWM_MODE_OFF != config->OC1_mode)
    2b66:	ea 81       	ldd	r30, Y+2	; 0x02
    2b68:	fb 81       	ldd	r31, Y+3	; 0x03
    2b6a:	83 81       	ldd	r24, Z+3	; 0x03
    2b6c:	88 23       	and	r24, r24
    2b6e:	09 f4       	brne	.+2      	; 0x2b72 <Pwm_Init+0xea>
    2b70:	37 c1       	rjmp	.+622    	; 0x2de0 <Pwm_Init+0x358>
    {
        /* Waveform Generation Mode */
        if (config->OC1_mode == PWM_MODE_FAST)
    2b72:	ea 81       	ldd	r30, Y+2	; 0x02
    2b74:	fb 81       	ldd	r31, Y+3	; 0x03
    2b76:	83 81       	ldd	r24, Z+3	; 0x03
    2b78:	81 30       	cpi	r24, 0x01	; 1
    2b7a:	e9 f4       	brne	.+58     	; 0x2bb6 <Pwm_Init+0x12e>
        {
            SET_BIT(TCCR1A, 0);
    2b7c:	af e4       	ldi	r26, 0x4F	; 79
    2b7e:	b0 e0       	ldi	r27, 0x00	; 0
    2b80:	ef e4       	ldi	r30, 0x4F	; 79
    2b82:	f0 e0       	ldi	r31, 0x00	; 0
    2b84:	80 81       	ld	r24, Z
    2b86:	81 60       	ori	r24, 0x01	; 1
    2b88:	8c 93       	st	X, r24
            SET_BIT(TCCR1A, 1);
    2b8a:	af e4       	ldi	r26, 0x4F	; 79
    2b8c:	b0 e0       	ldi	r27, 0x00	; 0
    2b8e:	ef e4       	ldi	r30, 0x4F	; 79
    2b90:	f0 e0       	ldi	r31, 0x00	; 0
    2b92:	80 81       	ld	r24, Z
    2b94:	82 60       	ori	r24, 0x02	; 2
    2b96:	8c 93       	st	X, r24
            SET_BIT(TCCR1B, 3);
    2b98:	ae e4       	ldi	r26, 0x4E	; 78
    2b9a:	b0 e0       	ldi	r27, 0x00	; 0
    2b9c:	ee e4       	ldi	r30, 0x4E	; 78
    2b9e:	f0 e0       	ldi	r31, 0x00	; 0
    2ba0:	80 81       	ld	r24, Z
    2ba2:	88 60       	ori	r24, 0x08	; 8
    2ba4:	8c 93       	st	X, r24
            SET_BIT(TCCR1B, 4);
    2ba6:	ae e4       	ldi	r26, 0x4E	; 78
    2ba8:	b0 e0       	ldi	r27, 0x00	; 0
    2baa:	ee e4       	ldi	r30, 0x4E	; 78
    2bac:	f0 e0       	ldi	r31, 0x00	; 0
    2bae:	80 81       	ld	r24, Z
    2bb0:	80 61       	ori	r24, 0x10	; 16
    2bb2:	8c 93       	st	X, r24
    2bb4:	ac c0       	rjmp	.+344    	; 0x2d0e <Pwm_Init+0x286>
        }
        else if (config->OC1_mode == PWM_MODE_PHASE_CORRECT)
    2bb6:	ea 81       	ldd	r30, Y+2	; 0x02
    2bb8:	fb 81       	ldd	r31, Y+3	; 0x03
    2bba:	83 81       	ldd	r24, Z+3	; 0x03
    2bbc:	82 30       	cpi	r24, 0x02	; 2
    2bbe:	e9 f4       	brne	.+58     	; 0x2bfa <Pwm_Init+0x172>
        {
            SET_BIT(TCCR1A, 0);
    2bc0:	af e4       	ldi	r26, 0x4F	; 79
    2bc2:	b0 e0       	ldi	r27, 0x00	; 0
    2bc4:	ef e4       	ldi	r30, 0x4F	; 79
    2bc6:	f0 e0       	ldi	r31, 0x00	; 0
    2bc8:	80 81       	ld	r24, Z
    2bca:	81 60       	ori	r24, 0x01	; 1
    2bcc:	8c 93       	st	X, r24
            SET_BIT(TCCR1A, 1);
    2bce:	af e4       	ldi	r26, 0x4F	; 79
    2bd0:	b0 e0       	ldi	r27, 0x00	; 0
    2bd2:	ef e4       	ldi	r30, 0x4F	; 79
    2bd4:	f0 e0       	ldi	r31, 0x00	; 0
    2bd6:	80 81       	ld	r24, Z
    2bd8:	82 60       	ori	r24, 0x02	; 2
    2bda:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B, 3);
    2bdc:	ae e4       	ldi	r26, 0x4E	; 78
    2bde:	b0 e0       	ldi	r27, 0x00	; 0
    2be0:	ee e4       	ldi	r30, 0x4E	; 78
    2be2:	f0 e0       	ldi	r31, 0x00	; 0
    2be4:	80 81       	ld	r24, Z
    2be6:	87 7f       	andi	r24, 0xF7	; 247
    2be8:	8c 93       	st	X, r24
            SET_BIT(TCCR1B, 4);
    2bea:	ae e4       	ldi	r26, 0x4E	; 78
    2bec:	b0 e0       	ldi	r27, 0x00	; 0
    2bee:	ee e4       	ldi	r30, 0x4E	; 78
    2bf0:	f0 e0       	ldi	r31, 0x00	; 0
    2bf2:	80 81       	ld	r24, Z
    2bf4:	80 61       	ori	r24, 0x10	; 16
    2bf6:	8c 93       	st	X, r24
    2bf8:	8a c0       	rjmp	.+276    	; 0x2d0e <Pwm_Init+0x286>
        }
        else if (config->OC1_mode == PWM_MODE_FAST_ICR1)
    2bfa:	ea 81       	ldd	r30, Y+2	; 0x02
    2bfc:	fb 81       	ldd	r31, Y+3	; 0x03
    2bfe:	83 81       	ldd	r24, Z+3	; 0x03
    2c00:	8a 30       	cpi	r24, 0x0A	; 10
    2c02:	e9 f4       	brne	.+58     	; 0x2c3e <Pwm_Init+0x1b6>
        {
            CLR_BIT(TCCR1A, 0);
    2c04:	af e4       	ldi	r26, 0x4F	; 79
    2c06:	b0 e0       	ldi	r27, 0x00	; 0
    2c08:	ef e4       	ldi	r30, 0x4F	; 79
    2c0a:	f0 e0       	ldi	r31, 0x00	; 0
    2c0c:	80 81       	ld	r24, Z
    2c0e:	8e 7f       	andi	r24, 0xFE	; 254
    2c10:	8c 93       	st	X, r24
            SET_BIT(TCCR1A, 1);
    2c12:	af e4       	ldi	r26, 0x4F	; 79
    2c14:	b0 e0       	ldi	r27, 0x00	; 0
    2c16:	ef e4       	ldi	r30, 0x4F	; 79
    2c18:	f0 e0       	ldi	r31, 0x00	; 0
    2c1a:	80 81       	ld	r24, Z
    2c1c:	82 60       	ori	r24, 0x02	; 2
    2c1e:	8c 93       	st	X, r24
            SET_BIT(TCCR1B, 3);
    2c20:	ae e4       	ldi	r26, 0x4E	; 78
    2c22:	b0 e0       	ldi	r27, 0x00	; 0
    2c24:	ee e4       	ldi	r30, 0x4E	; 78
    2c26:	f0 e0       	ldi	r31, 0x00	; 0
    2c28:	80 81       	ld	r24, Z
    2c2a:	88 60       	ori	r24, 0x08	; 8
    2c2c:	8c 93       	st	X, r24
            SET_BIT(TCCR1B, 4);
    2c2e:	ae e4       	ldi	r26, 0x4E	; 78
    2c30:	b0 e0       	ldi	r27, 0x00	; 0
    2c32:	ee e4       	ldi	r30, 0x4E	; 78
    2c34:	f0 e0       	ldi	r31, 0x00	; 0
    2c36:	80 81       	ld	r24, Z
    2c38:	80 61       	ori	r24, 0x10	; 16
    2c3a:	8c 93       	st	X, r24
    2c3c:	68 c0       	rjmp	.+208    	; 0x2d0e <Pwm_Init+0x286>
        }
        else if (config->OC1_mode == PWM_MODE_FAST_8_BIT)
    2c3e:	ea 81       	ldd	r30, Y+2	; 0x02
    2c40:	fb 81       	ldd	r31, Y+3	; 0x03
    2c42:	83 81       	ldd	r24, Z+3	; 0x03
    2c44:	87 30       	cpi	r24, 0x07	; 7
    2c46:	e9 f4       	brne	.+58     	; 0x2c82 <Pwm_Init+0x1fa>
        {
            SET_BIT(TCCR1A, 0);
    2c48:	af e4       	ldi	r26, 0x4F	; 79
    2c4a:	b0 e0       	ldi	r27, 0x00	; 0
    2c4c:	ef e4       	ldi	r30, 0x4F	; 79
    2c4e:	f0 e0       	ldi	r31, 0x00	; 0
    2c50:	80 81       	ld	r24, Z
    2c52:	81 60       	ori	r24, 0x01	; 1
    2c54:	8c 93       	st	X, r24
            CLR_BIT(TCCR1A, 1);
    2c56:	af e4       	ldi	r26, 0x4F	; 79
    2c58:	b0 e0       	ldi	r27, 0x00	; 0
    2c5a:	ef e4       	ldi	r30, 0x4F	; 79
    2c5c:	f0 e0       	ldi	r31, 0x00	; 0
    2c5e:	80 81       	ld	r24, Z
    2c60:	8d 7f       	andi	r24, 0xFD	; 253
    2c62:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B, 3);
    2c64:	ae e4       	ldi	r26, 0x4E	; 78
    2c66:	b0 e0       	ldi	r27, 0x00	; 0
    2c68:	ee e4       	ldi	r30, 0x4E	; 78
    2c6a:	f0 e0       	ldi	r31, 0x00	; 0
    2c6c:	80 81       	ld	r24, Z
    2c6e:	87 7f       	andi	r24, 0xF7	; 247
    2c70:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B, 4);
    2c72:	ae e4       	ldi	r26, 0x4E	; 78
    2c74:	b0 e0       	ldi	r27, 0x00	; 0
    2c76:	ee e4       	ldi	r30, 0x4E	; 78
    2c78:	f0 e0       	ldi	r31, 0x00	; 0
    2c7a:	80 81       	ld	r24, Z
    2c7c:	8f 7e       	andi	r24, 0xEF	; 239
    2c7e:	8c 93       	st	X, r24
    2c80:	46 c0       	rjmp	.+140    	; 0x2d0e <Pwm_Init+0x286>
        }
        else if (config->OC1_mode == PWM_MODE_FAST_9_BIT)
    2c82:	ea 81       	ldd	r30, Y+2	; 0x02
    2c84:	fb 81       	ldd	r31, Y+3	; 0x03
    2c86:	83 81       	ldd	r24, Z+3	; 0x03
    2c88:	88 30       	cpi	r24, 0x08	; 8
    2c8a:	e9 f4       	brne	.+58     	; 0x2cc6 <Pwm_Init+0x23e>
        {
            CLR_BIT(TCCR1A, 0);
    2c8c:	af e4       	ldi	r26, 0x4F	; 79
    2c8e:	b0 e0       	ldi	r27, 0x00	; 0
    2c90:	ef e4       	ldi	r30, 0x4F	; 79
    2c92:	f0 e0       	ldi	r31, 0x00	; 0
    2c94:	80 81       	ld	r24, Z
    2c96:	8e 7f       	andi	r24, 0xFE	; 254
    2c98:	8c 93       	st	X, r24
            SET_BIT(TCCR1A, 1);
    2c9a:	af e4       	ldi	r26, 0x4F	; 79
    2c9c:	b0 e0       	ldi	r27, 0x00	; 0
    2c9e:	ef e4       	ldi	r30, 0x4F	; 79
    2ca0:	f0 e0       	ldi	r31, 0x00	; 0
    2ca2:	80 81       	ld	r24, Z
    2ca4:	82 60       	ori	r24, 0x02	; 2
    2ca6:	8c 93       	st	X, r24
            SET_BIT(TCCR1B, 3);
    2ca8:	ae e4       	ldi	r26, 0x4E	; 78
    2caa:	b0 e0       	ldi	r27, 0x00	; 0
    2cac:	ee e4       	ldi	r30, 0x4E	; 78
    2cae:	f0 e0       	ldi	r31, 0x00	; 0
    2cb0:	80 81       	ld	r24, Z
    2cb2:	88 60       	ori	r24, 0x08	; 8
    2cb4:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B, 4);
    2cb6:	ae e4       	ldi	r26, 0x4E	; 78
    2cb8:	b0 e0       	ldi	r27, 0x00	; 0
    2cba:	ee e4       	ldi	r30, 0x4E	; 78
    2cbc:	f0 e0       	ldi	r31, 0x00	; 0
    2cbe:	80 81       	ld	r24, Z
    2cc0:	8f 7e       	andi	r24, 0xEF	; 239
    2cc2:	8c 93       	st	X, r24
    2cc4:	24 c0       	rjmp	.+72     	; 0x2d0e <Pwm_Init+0x286>
        }
        else if (config->OC1_mode == PWM_MODE_FAST_10_BIT)
    2cc6:	ea 81       	ldd	r30, Y+2	; 0x02
    2cc8:	fb 81       	ldd	r31, Y+3	; 0x03
    2cca:	83 81       	ldd	r24, Z+3	; 0x03
    2ccc:	89 30       	cpi	r24, 0x09	; 9
    2cce:	e9 f4       	brne	.+58     	; 0x2d0a <Pwm_Init+0x282>
        {
            SET_BIT(TCCR1A, 0);
    2cd0:	af e4       	ldi	r26, 0x4F	; 79
    2cd2:	b0 e0       	ldi	r27, 0x00	; 0
    2cd4:	ef e4       	ldi	r30, 0x4F	; 79
    2cd6:	f0 e0       	ldi	r31, 0x00	; 0
    2cd8:	80 81       	ld	r24, Z
    2cda:	81 60       	ori	r24, 0x01	; 1
    2cdc:	8c 93       	st	X, r24
            SET_BIT(TCCR1A, 1);
    2cde:	af e4       	ldi	r26, 0x4F	; 79
    2ce0:	b0 e0       	ldi	r27, 0x00	; 0
    2ce2:	ef e4       	ldi	r30, 0x4F	; 79
    2ce4:	f0 e0       	ldi	r31, 0x00	; 0
    2ce6:	80 81       	ld	r24, Z
    2ce8:	82 60       	ori	r24, 0x02	; 2
    2cea:	8c 93       	st	X, r24
            SET_BIT(TCCR1B, 3);
    2cec:	ae e4       	ldi	r26, 0x4E	; 78
    2cee:	b0 e0       	ldi	r27, 0x00	; 0
    2cf0:	ee e4       	ldi	r30, 0x4E	; 78
    2cf2:	f0 e0       	ldi	r31, 0x00	; 0
    2cf4:	80 81       	ld	r24, Z
    2cf6:	88 60       	ori	r24, 0x08	; 8
    2cf8:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B, 4);
    2cfa:	ae e4       	ldi	r26, 0x4E	; 78
    2cfc:	b0 e0       	ldi	r27, 0x00	; 0
    2cfe:	ee e4       	ldi	r30, 0x4E	; 78
    2d00:	f0 e0       	ldi	r31, 0x00	; 0
    2d02:	80 81       	ld	r24, Z
    2d04:	8f 7e       	andi	r24, 0xEF	; 239
    2d06:	8c 93       	st	X, r24
    2d08:	02 c0       	rjmp	.+4      	; 0x2d0e <Pwm_Init+0x286>
        }
        /** TODO: Complete all PWM1 Modes */
        else
        {
            retVal = E_NOT_OK;
    2d0a:	81 e0       	ldi	r24, 0x01	; 1
    2d0c:	89 83       	std	Y+1, r24	; 0x01
        }

        /* Compare Match Output Mode */
        if (config->OC1A_out == PWM_OUT_CLR_THEN_SET)
    2d0e:	ea 81       	ldd	r30, Y+2	; 0x02
    2d10:	fb 81       	ldd	r31, Y+3	; 0x03
    2d12:	85 81       	ldd	r24, Z+5	; 0x05
    2d14:	81 30       	cpi	r24, 0x01	; 1
    2d16:	a1 f4       	brne	.+40     	; 0x2d40 <Pwm_Init+0x2b8>
        {
            Dio_SetPinMode(PWM_PIN_OC1A, DIO_MODE_OUTPUT);
    2d18:	83 e0       	ldi	r24, 0x03	; 3
    2d1a:	65 e0       	ldi	r22, 0x05	; 5
    2d1c:	40 e0       	ldi	r20, 0x00	; 0
    2d1e:	0e 94 a3 05 	call	0xb46	; 0xb46 <Dio_SetPinMode>
            CLR_BIT(TCCR1A, 6);
    2d22:	af e4       	ldi	r26, 0x4F	; 79
    2d24:	b0 e0       	ldi	r27, 0x00	; 0
    2d26:	ef e4       	ldi	r30, 0x4F	; 79
    2d28:	f0 e0       	ldi	r31, 0x00	; 0
    2d2a:	80 81       	ld	r24, Z
    2d2c:	8f 7b       	andi	r24, 0xBF	; 191
    2d2e:	8c 93       	st	X, r24
            SET_BIT(TCCR1A, 7);
    2d30:	af e4       	ldi	r26, 0x4F	; 79
    2d32:	b0 e0       	ldi	r27, 0x00	; 0
    2d34:	ef e4       	ldi	r30, 0x4F	; 79
    2d36:	f0 e0       	ldi	r31, 0x00	; 0
    2d38:	80 81       	ld	r24, Z
    2d3a:	80 68       	ori	r24, 0x80	; 128
    2d3c:	8c 93       	st	X, r24
    2d3e:	18 c0       	rjmp	.+48     	; 0x2d70 <Pwm_Init+0x2e8>
        }
        else if (config->OC1A_out == PWM_OUT_SET_THEN_CLR)
    2d40:	ea 81       	ldd	r30, Y+2	; 0x02
    2d42:	fb 81       	ldd	r31, Y+3	; 0x03
    2d44:	85 81       	ldd	r24, Z+5	; 0x05
    2d46:	82 30       	cpi	r24, 0x02	; 2
    2d48:	99 f4       	brne	.+38     	; 0x2d70 <Pwm_Init+0x2e8>
        {
            Dio_SetPinMode(PWM_PIN_OC1A, DIO_MODE_OUTPUT);
    2d4a:	83 e0       	ldi	r24, 0x03	; 3
    2d4c:	65 e0       	ldi	r22, 0x05	; 5
    2d4e:	40 e0       	ldi	r20, 0x00	; 0
    2d50:	0e 94 a3 05 	call	0xb46	; 0xb46 <Dio_SetPinMode>
            SET_BIT(TCCR1A, 6);
    2d54:	af e4       	ldi	r26, 0x4F	; 79
    2d56:	b0 e0       	ldi	r27, 0x00	; 0
    2d58:	ef e4       	ldi	r30, 0x4F	; 79
    2d5a:	f0 e0       	ldi	r31, 0x00	; 0
    2d5c:	80 81       	ld	r24, Z
    2d5e:	80 64       	ori	r24, 0x40	; 64
    2d60:	8c 93       	st	X, r24
            SET_BIT(TCCR1A, 7);
    2d62:	af e4       	ldi	r26, 0x4F	; 79
    2d64:	b0 e0       	ldi	r27, 0x00	; 0
    2d66:	ef e4       	ldi	r30, 0x4F	; 79
    2d68:	f0 e0       	ldi	r31, 0x00	; 0
    2d6a:	80 81       	ld	r24, Z
    2d6c:	80 68       	ori	r24, 0x80	; 128
    2d6e:	8c 93       	st	X, r24
        }

        if (config->OC1B_out == PWM_OUT_CLR_THEN_SET)
    2d70:	ea 81       	ldd	r30, Y+2	; 0x02
    2d72:	fb 81       	ldd	r31, Y+3	; 0x03
    2d74:	86 81       	ldd	r24, Z+6	; 0x06
    2d76:	81 30       	cpi	r24, 0x01	; 1
    2d78:	a1 f4       	brne	.+40     	; 0x2da2 <Pwm_Init+0x31a>
        {
            Dio_SetPinMode(PWM_PIN_OC1B, DIO_MODE_OUTPUT);
    2d7a:	83 e0       	ldi	r24, 0x03	; 3
    2d7c:	64 e0       	ldi	r22, 0x04	; 4
    2d7e:	40 e0       	ldi	r20, 0x00	; 0
    2d80:	0e 94 a3 05 	call	0xb46	; 0xb46 <Dio_SetPinMode>
            CLR_BIT(TCCR1A, 4);
    2d84:	af e4       	ldi	r26, 0x4F	; 79
    2d86:	b0 e0       	ldi	r27, 0x00	; 0
    2d88:	ef e4       	ldi	r30, 0x4F	; 79
    2d8a:	f0 e0       	ldi	r31, 0x00	; 0
    2d8c:	80 81       	ld	r24, Z
    2d8e:	8f 7e       	andi	r24, 0xEF	; 239
    2d90:	8c 93       	st	X, r24
            SET_BIT(TCCR1A, 5);
    2d92:	af e4       	ldi	r26, 0x4F	; 79
    2d94:	b0 e0       	ldi	r27, 0x00	; 0
    2d96:	ef e4       	ldi	r30, 0x4F	; 79
    2d98:	f0 e0       	ldi	r31, 0x00	; 0
    2d9a:	80 81       	ld	r24, Z
    2d9c:	80 62       	ori	r24, 0x20	; 32
    2d9e:	8c 93       	st	X, r24
    2da0:	18 c0       	rjmp	.+48     	; 0x2dd2 <Pwm_Init+0x34a>
        }
        else if (config->OC1B_out == PWM_OUT_SET_THEN_CLR)
    2da2:	ea 81       	ldd	r30, Y+2	; 0x02
    2da4:	fb 81       	ldd	r31, Y+3	; 0x03
    2da6:	86 81       	ldd	r24, Z+6	; 0x06
    2da8:	82 30       	cpi	r24, 0x02	; 2
    2daa:	99 f4       	brne	.+38     	; 0x2dd2 <Pwm_Init+0x34a>
        {
            Dio_SetPinMode(PWM_PIN_OC1B, DIO_MODE_OUTPUT);
    2dac:	83 e0       	ldi	r24, 0x03	; 3
    2dae:	64 e0       	ldi	r22, 0x04	; 4
    2db0:	40 e0       	ldi	r20, 0x00	; 0
    2db2:	0e 94 a3 05 	call	0xb46	; 0xb46 <Dio_SetPinMode>
            SET_BIT(TCCR1A, 4);
    2db6:	af e4       	ldi	r26, 0x4F	; 79
    2db8:	b0 e0       	ldi	r27, 0x00	; 0
    2dba:	ef e4       	ldi	r30, 0x4F	; 79
    2dbc:	f0 e0       	ldi	r31, 0x00	; 0
    2dbe:	80 81       	ld	r24, Z
    2dc0:	80 61       	ori	r24, 0x10	; 16
    2dc2:	8c 93       	st	X, r24
            SET_BIT(TCCR1A, 5);
    2dc4:	af e4       	ldi	r26, 0x4F	; 79
    2dc6:	b0 e0       	ldi	r27, 0x00	; 0
    2dc8:	ef e4       	ldi	r30, 0x4F	; 79
    2dca:	f0 e0       	ldi	r31, 0x00	; 0
    2dcc:	80 81       	ld	r24, Z
    2dce:	80 62       	ori	r24, 0x20	; 32
    2dd0:	8c 93       	st	X, r24
        }

        /* Clock Select */
        Pwm_SetClockSource(PWM_CH1, config->OC1_clk);
    2dd2:	ea 81       	ldd	r30, Y+2	; 0x02
    2dd4:	fb 81       	ldd	r31, Y+3	; 0x03
    2dd6:	94 81       	ldd	r25, Z+4	; 0x04
    2dd8:	81 e0       	ldi	r24, 0x01	; 1
    2dda:	69 2f       	mov	r22, r25
    2ddc:	0e 94 f7 16 	call	0x2dee	; 0x2dee <Pwm_SetClockSource>
    }
    return retVal;
    2de0:	89 81       	ldd	r24, Y+1	; 0x01
}
    2de2:	0f 90       	pop	r0
    2de4:	0f 90       	pop	r0
    2de6:	0f 90       	pop	r0
    2de8:	cf 91       	pop	r28
    2dea:	df 91       	pop	r29
    2dec:	08 95       	ret

00002dee <Pwm_SetClockSource>:

void Pwm_SetClockSource(Pwm_ChannelType channel, Pwm_ClkSourceType clk)
{
    2dee:	df 93       	push	r29
    2df0:	cf 93       	push	r28
    2df2:	00 d0       	rcall	.+0      	; 0x2df4 <Pwm_SetClockSource+0x6>
    2df4:	00 d0       	rcall	.+0      	; 0x2df6 <Pwm_SetClockSource+0x8>
    2df6:	00 d0       	rcall	.+0      	; 0x2df8 <Pwm_SetClockSource+0xa>
    2df8:	cd b7       	in	r28, 0x3d	; 61
    2dfa:	de b7       	in	r29, 0x3e	; 62
    2dfc:	89 83       	std	Y+1, r24	; 0x01
    2dfe:	6a 83       	std	Y+2, r22	; 0x02
    if (PWM_CH0 == channel)
    2e00:	89 81       	ldd	r24, Y+1	; 0x01
    2e02:	88 23       	and	r24, r24
    2e04:	09 f0       	breq	.+2      	; 0x2e08 <Pwm_SetClockSource+0x1a>
    2e06:	f0 c0       	rjmp	.+480    	; 0x2fe8 <Pwm_SetClockSource+0x1fa>
    {
        switch (clk)
    2e08:	8a 81       	ldd	r24, Y+2	; 0x02
    2e0a:	28 2f       	mov	r18, r24
    2e0c:	30 e0       	ldi	r19, 0x00	; 0
    2e0e:	3e 83       	std	Y+6, r19	; 0x06
    2e10:	2d 83       	std	Y+5, r18	; 0x05
    2e12:	8d 81       	ldd	r24, Y+5	; 0x05
    2e14:	9e 81       	ldd	r25, Y+6	; 0x06
    2e16:	84 30       	cpi	r24, 0x04	; 4
    2e18:	91 05       	cpc	r25, r1
    2e1a:	09 f4       	brne	.+2      	; 0x2e1e <Pwm_SetClockSource+0x30>
    2e1c:	77 c0       	rjmp	.+238    	; 0x2f0c <Pwm_SetClockSource+0x11e>
    2e1e:	2d 81       	ldd	r18, Y+5	; 0x05
    2e20:	3e 81       	ldd	r19, Y+6	; 0x06
    2e22:	25 30       	cpi	r18, 0x05	; 5
    2e24:	31 05       	cpc	r19, r1
    2e26:	8c f4       	brge	.+34     	; 0x2e4a <Pwm_SetClockSource+0x5c>
    2e28:	8d 81       	ldd	r24, Y+5	; 0x05
    2e2a:	9e 81       	ldd	r25, Y+6	; 0x06
    2e2c:	81 30       	cpi	r24, 0x01	; 1
    2e2e:	91 05       	cpc	r25, r1
    2e30:	09 f4       	brne	.+2      	; 0x2e34 <Pwm_SetClockSource+0x46>
    2e32:	40 c0       	rjmp	.+128    	; 0x2eb4 <Pwm_SetClockSource+0xc6>
    2e34:	2d 81       	ldd	r18, Y+5	; 0x05
    2e36:	3e 81       	ldd	r19, Y+6	; 0x06
    2e38:	22 30       	cpi	r18, 0x02	; 2
    2e3a:	31 05       	cpc	r19, r1
    2e3c:	09 f4       	brne	.+2      	; 0x2e40 <Pwm_SetClockSource+0x52>
    2e3e:	50 c0       	rjmp	.+160    	; 0x2ee0 <Pwm_SetClockSource+0xf2>
    2e40:	8d 81       	ldd	r24, Y+5	; 0x05
    2e42:	9e 81       	ldd	r25, Y+6	; 0x06
    2e44:	00 97       	sbiw	r24, 0x00	; 0
    2e46:	01 f1       	breq	.+64     	; 0x2e88 <Pwm_SetClockSource+0x9a>
    2e48:	c2 c1       	rjmp	.+900    	; 0x31ce <Pwm_SetClockSource+0x3e0>
    2e4a:	2d 81       	ldd	r18, Y+5	; 0x05
    2e4c:	3e 81       	ldd	r19, Y+6	; 0x06
    2e4e:	27 30       	cpi	r18, 0x07	; 7
    2e50:	31 05       	cpc	r19, r1
    2e52:	09 f4       	brne	.+2      	; 0x2e56 <Pwm_SetClockSource+0x68>
    2e54:	87 c0       	rjmp	.+270    	; 0x2f64 <Pwm_SetClockSource+0x176>
    2e56:	8d 81       	ldd	r24, Y+5	; 0x05
    2e58:	9e 81       	ldd	r25, Y+6	; 0x06
    2e5a:	88 30       	cpi	r24, 0x08	; 8
    2e5c:	91 05       	cpc	r25, r1
    2e5e:	3c f4       	brge	.+14     	; 0x2e6e <Pwm_SetClockSource+0x80>
    2e60:	2d 81       	ldd	r18, Y+5	; 0x05
    2e62:	3e 81       	ldd	r19, Y+6	; 0x06
    2e64:	26 30       	cpi	r18, 0x06	; 6
    2e66:	31 05       	cpc	r19, r1
    2e68:	09 f4       	brne	.+2      	; 0x2e6c <Pwm_SetClockSource+0x7e>
    2e6a:	66 c0       	rjmp	.+204    	; 0x2f38 <Pwm_SetClockSource+0x14a>
    2e6c:	b0 c1       	rjmp	.+864    	; 0x31ce <Pwm_SetClockSource+0x3e0>
    2e6e:	8d 81       	ldd	r24, Y+5	; 0x05
    2e70:	9e 81       	ldd	r25, Y+6	; 0x06
    2e72:	88 30       	cpi	r24, 0x08	; 8
    2e74:	91 05       	cpc	r25, r1
    2e76:	09 f4       	brne	.+2      	; 0x2e7a <Pwm_SetClockSource+0x8c>
    2e78:	8b c0       	rjmp	.+278    	; 0x2f90 <Pwm_SetClockSource+0x1a2>
    2e7a:	2d 81       	ldd	r18, Y+5	; 0x05
    2e7c:	3e 81       	ldd	r19, Y+6	; 0x06
    2e7e:	29 30       	cpi	r18, 0x09	; 9
    2e80:	31 05       	cpc	r19, r1
    2e82:	09 f4       	brne	.+2      	; 0x2e86 <Pwm_SetClockSource+0x98>
    2e84:	9b c0       	rjmp	.+310    	; 0x2fbc <Pwm_SetClockSource+0x1ce>
    2e86:	a3 c1       	rjmp	.+838    	; 0x31ce <Pwm_SetClockSource+0x3e0>
        {
        case PWM_CLK_OFF:
            CLR_BIT(TCCR0, 0);
    2e88:	a3 e5       	ldi	r26, 0x53	; 83
    2e8a:	b0 e0       	ldi	r27, 0x00	; 0
    2e8c:	e3 e5       	ldi	r30, 0x53	; 83
    2e8e:	f0 e0       	ldi	r31, 0x00	; 0
    2e90:	80 81       	ld	r24, Z
    2e92:	8e 7f       	andi	r24, 0xFE	; 254
    2e94:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, 1);
    2e96:	a3 e5       	ldi	r26, 0x53	; 83
    2e98:	b0 e0       	ldi	r27, 0x00	; 0
    2e9a:	e3 e5       	ldi	r30, 0x53	; 83
    2e9c:	f0 e0       	ldi	r31, 0x00	; 0
    2e9e:	80 81       	ld	r24, Z
    2ea0:	8d 7f       	andi	r24, 0xFD	; 253
    2ea2:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, 2);
    2ea4:	a3 e5       	ldi	r26, 0x53	; 83
    2ea6:	b0 e0       	ldi	r27, 0x00	; 0
    2ea8:	e3 e5       	ldi	r30, 0x53	; 83
    2eaa:	f0 e0       	ldi	r31, 0x00	; 0
    2eac:	80 81       	ld	r24, Z
    2eae:	8b 7f       	andi	r24, 0xFB	; 251
    2eb0:	8c 93       	st	X, r24
    2eb2:	8d c1       	rjmp	.+794    	; 0x31ce <Pwm_SetClockSource+0x3e0>
            break;
        case PWM_CLK_PRESCALER_1:
            SET_BIT(TCCR0, 0);
    2eb4:	a3 e5       	ldi	r26, 0x53	; 83
    2eb6:	b0 e0       	ldi	r27, 0x00	; 0
    2eb8:	e3 e5       	ldi	r30, 0x53	; 83
    2eba:	f0 e0       	ldi	r31, 0x00	; 0
    2ebc:	80 81       	ld	r24, Z
    2ebe:	81 60       	ori	r24, 0x01	; 1
    2ec0:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, 1);
    2ec2:	a3 e5       	ldi	r26, 0x53	; 83
    2ec4:	b0 e0       	ldi	r27, 0x00	; 0
    2ec6:	e3 e5       	ldi	r30, 0x53	; 83
    2ec8:	f0 e0       	ldi	r31, 0x00	; 0
    2eca:	80 81       	ld	r24, Z
    2ecc:	8d 7f       	andi	r24, 0xFD	; 253
    2ece:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, 2);
    2ed0:	a3 e5       	ldi	r26, 0x53	; 83
    2ed2:	b0 e0       	ldi	r27, 0x00	; 0
    2ed4:	e3 e5       	ldi	r30, 0x53	; 83
    2ed6:	f0 e0       	ldi	r31, 0x00	; 0
    2ed8:	80 81       	ld	r24, Z
    2eda:	8b 7f       	andi	r24, 0xFB	; 251
    2edc:	8c 93       	st	X, r24
    2ede:	77 c1       	rjmp	.+750    	; 0x31ce <Pwm_SetClockSource+0x3e0>
            break;
        case PWM_CLK_PRESCALER_8:
            CLR_BIT(TCCR0, 0);
    2ee0:	a3 e5       	ldi	r26, 0x53	; 83
    2ee2:	b0 e0       	ldi	r27, 0x00	; 0
    2ee4:	e3 e5       	ldi	r30, 0x53	; 83
    2ee6:	f0 e0       	ldi	r31, 0x00	; 0
    2ee8:	80 81       	ld	r24, Z
    2eea:	8e 7f       	andi	r24, 0xFE	; 254
    2eec:	8c 93       	st	X, r24
            SET_BIT(TCCR0, 1);
    2eee:	a3 e5       	ldi	r26, 0x53	; 83
    2ef0:	b0 e0       	ldi	r27, 0x00	; 0
    2ef2:	e3 e5       	ldi	r30, 0x53	; 83
    2ef4:	f0 e0       	ldi	r31, 0x00	; 0
    2ef6:	80 81       	ld	r24, Z
    2ef8:	82 60       	ori	r24, 0x02	; 2
    2efa:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, 2);
    2efc:	a3 e5       	ldi	r26, 0x53	; 83
    2efe:	b0 e0       	ldi	r27, 0x00	; 0
    2f00:	e3 e5       	ldi	r30, 0x53	; 83
    2f02:	f0 e0       	ldi	r31, 0x00	; 0
    2f04:	80 81       	ld	r24, Z
    2f06:	8b 7f       	andi	r24, 0xFB	; 251
    2f08:	8c 93       	st	X, r24
    2f0a:	61 c1       	rjmp	.+706    	; 0x31ce <Pwm_SetClockSource+0x3e0>
            break;
        case PWM_CLK_PRESCALER_64:
            SET_BIT(TCCR0, 0);
    2f0c:	a3 e5       	ldi	r26, 0x53	; 83
    2f0e:	b0 e0       	ldi	r27, 0x00	; 0
    2f10:	e3 e5       	ldi	r30, 0x53	; 83
    2f12:	f0 e0       	ldi	r31, 0x00	; 0
    2f14:	80 81       	ld	r24, Z
    2f16:	81 60       	ori	r24, 0x01	; 1
    2f18:	8c 93       	st	X, r24
            SET_BIT(TCCR0, 1);
    2f1a:	a3 e5       	ldi	r26, 0x53	; 83
    2f1c:	b0 e0       	ldi	r27, 0x00	; 0
    2f1e:	e3 e5       	ldi	r30, 0x53	; 83
    2f20:	f0 e0       	ldi	r31, 0x00	; 0
    2f22:	80 81       	ld	r24, Z
    2f24:	82 60       	ori	r24, 0x02	; 2
    2f26:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, 2);
    2f28:	a3 e5       	ldi	r26, 0x53	; 83
    2f2a:	b0 e0       	ldi	r27, 0x00	; 0
    2f2c:	e3 e5       	ldi	r30, 0x53	; 83
    2f2e:	f0 e0       	ldi	r31, 0x00	; 0
    2f30:	80 81       	ld	r24, Z
    2f32:	8b 7f       	andi	r24, 0xFB	; 251
    2f34:	8c 93       	st	X, r24
    2f36:	4b c1       	rjmp	.+662    	; 0x31ce <Pwm_SetClockSource+0x3e0>
            break;
        case PWM_CLK_PRESCALER_256:
            CLR_BIT(TCCR0, 0);
    2f38:	a3 e5       	ldi	r26, 0x53	; 83
    2f3a:	b0 e0       	ldi	r27, 0x00	; 0
    2f3c:	e3 e5       	ldi	r30, 0x53	; 83
    2f3e:	f0 e0       	ldi	r31, 0x00	; 0
    2f40:	80 81       	ld	r24, Z
    2f42:	8e 7f       	andi	r24, 0xFE	; 254
    2f44:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, 1);
    2f46:	a3 e5       	ldi	r26, 0x53	; 83
    2f48:	b0 e0       	ldi	r27, 0x00	; 0
    2f4a:	e3 e5       	ldi	r30, 0x53	; 83
    2f4c:	f0 e0       	ldi	r31, 0x00	; 0
    2f4e:	80 81       	ld	r24, Z
    2f50:	8d 7f       	andi	r24, 0xFD	; 253
    2f52:	8c 93       	st	X, r24
            SET_BIT(TCCR0, 2);
    2f54:	a3 e5       	ldi	r26, 0x53	; 83
    2f56:	b0 e0       	ldi	r27, 0x00	; 0
    2f58:	e3 e5       	ldi	r30, 0x53	; 83
    2f5a:	f0 e0       	ldi	r31, 0x00	; 0
    2f5c:	80 81       	ld	r24, Z
    2f5e:	84 60       	ori	r24, 0x04	; 4
    2f60:	8c 93       	st	X, r24
    2f62:	35 c1       	rjmp	.+618    	; 0x31ce <Pwm_SetClockSource+0x3e0>
            break;
        case PWM_CLK_PRESCALER_1024:
            SET_BIT(TCCR0, 0);
    2f64:	a3 e5       	ldi	r26, 0x53	; 83
    2f66:	b0 e0       	ldi	r27, 0x00	; 0
    2f68:	e3 e5       	ldi	r30, 0x53	; 83
    2f6a:	f0 e0       	ldi	r31, 0x00	; 0
    2f6c:	80 81       	ld	r24, Z
    2f6e:	81 60       	ori	r24, 0x01	; 1
    2f70:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, 1);
    2f72:	a3 e5       	ldi	r26, 0x53	; 83
    2f74:	b0 e0       	ldi	r27, 0x00	; 0
    2f76:	e3 e5       	ldi	r30, 0x53	; 83
    2f78:	f0 e0       	ldi	r31, 0x00	; 0
    2f7a:	80 81       	ld	r24, Z
    2f7c:	8d 7f       	andi	r24, 0xFD	; 253
    2f7e:	8c 93       	st	X, r24
            SET_BIT(TCCR0, 2);
    2f80:	a3 e5       	ldi	r26, 0x53	; 83
    2f82:	b0 e0       	ldi	r27, 0x00	; 0
    2f84:	e3 e5       	ldi	r30, 0x53	; 83
    2f86:	f0 e0       	ldi	r31, 0x00	; 0
    2f88:	80 81       	ld	r24, Z
    2f8a:	84 60       	ori	r24, 0x04	; 4
    2f8c:	8c 93       	st	X, r24
    2f8e:	1f c1       	rjmp	.+574    	; 0x31ce <Pwm_SetClockSource+0x3e0>
            break;
        case PWM_CLK_EXT_FALLING:
            CLR_BIT(TCCR0, 0);
    2f90:	a3 e5       	ldi	r26, 0x53	; 83
    2f92:	b0 e0       	ldi	r27, 0x00	; 0
    2f94:	e3 e5       	ldi	r30, 0x53	; 83
    2f96:	f0 e0       	ldi	r31, 0x00	; 0
    2f98:	80 81       	ld	r24, Z
    2f9a:	8e 7f       	andi	r24, 0xFE	; 254
    2f9c:	8c 93       	st	X, r24
            SET_BIT(TCCR0, 1);
    2f9e:	a3 e5       	ldi	r26, 0x53	; 83
    2fa0:	b0 e0       	ldi	r27, 0x00	; 0
    2fa2:	e3 e5       	ldi	r30, 0x53	; 83
    2fa4:	f0 e0       	ldi	r31, 0x00	; 0
    2fa6:	80 81       	ld	r24, Z
    2fa8:	82 60       	ori	r24, 0x02	; 2
    2faa:	8c 93       	st	X, r24
            SET_BIT(TCCR0, 2);
    2fac:	a3 e5       	ldi	r26, 0x53	; 83
    2fae:	b0 e0       	ldi	r27, 0x00	; 0
    2fb0:	e3 e5       	ldi	r30, 0x53	; 83
    2fb2:	f0 e0       	ldi	r31, 0x00	; 0
    2fb4:	80 81       	ld	r24, Z
    2fb6:	84 60       	ori	r24, 0x04	; 4
    2fb8:	8c 93       	st	X, r24
    2fba:	09 c1       	rjmp	.+530    	; 0x31ce <Pwm_SetClockSource+0x3e0>
            break;
        case PWM_CLK_EXT_RISING:
            SET_BIT(TCCR0, 0);
    2fbc:	a3 e5       	ldi	r26, 0x53	; 83
    2fbe:	b0 e0       	ldi	r27, 0x00	; 0
    2fc0:	e3 e5       	ldi	r30, 0x53	; 83
    2fc2:	f0 e0       	ldi	r31, 0x00	; 0
    2fc4:	80 81       	ld	r24, Z
    2fc6:	81 60       	ori	r24, 0x01	; 1
    2fc8:	8c 93       	st	X, r24
            SET_BIT(TCCR0, 1);
    2fca:	a3 e5       	ldi	r26, 0x53	; 83
    2fcc:	b0 e0       	ldi	r27, 0x00	; 0
    2fce:	e3 e5       	ldi	r30, 0x53	; 83
    2fd0:	f0 e0       	ldi	r31, 0x00	; 0
    2fd2:	80 81       	ld	r24, Z
    2fd4:	82 60       	ori	r24, 0x02	; 2
    2fd6:	8c 93       	st	X, r24
            SET_BIT(TCCR0, 2);
    2fd8:	a3 e5       	ldi	r26, 0x53	; 83
    2fda:	b0 e0       	ldi	r27, 0x00	; 0
    2fdc:	e3 e5       	ldi	r30, 0x53	; 83
    2fde:	f0 e0       	ldi	r31, 0x00	; 0
    2fe0:	80 81       	ld	r24, Z
    2fe2:	84 60       	ori	r24, 0x04	; 4
    2fe4:	8c 93       	st	X, r24
    2fe6:	f3 c0       	rjmp	.+486    	; 0x31ce <Pwm_SetClockSource+0x3e0>
            break;
        default:
            break;
        }
    }
    else if (PWM_CH1 == channel)
    2fe8:	89 81       	ldd	r24, Y+1	; 0x01
    2fea:	81 30       	cpi	r24, 0x01	; 1
    2fec:	09 f0       	breq	.+2      	; 0x2ff0 <Pwm_SetClockSource+0x202>
    2fee:	ef c0       	rjmp	.+478    	; 0x31ce <Pwm_SetClockSource+0x3e0>
    {
        switch (clk)
    2ff0:	8a 81       	ldd	r24, Y+2	; 0x02
    2ff2:	28 2f       	mov	r18, r24
    2ff4:	30 e0       	ldi	r19, 0x00	; 0
    2ff6:	3c 83       	std	Y+4, r19	; 0x04
    2ff8:	2b 83       	std	Y+3, r18	; 0x03
    2ffa:	8b 81       	ldd	r24, Y+3	; 0x03
    2ffc:	9c 81       	ldd	r25, Y+4	; 0x04
    2ffe:	84 30       	cpi	r24, 0x04	; 4
    3000:	91 05       	cpc	r25, r1
    3002:	09 f4       	brne	.+2      	; 0x3006 <Pwm_SetClockSource+0x218>
    3004:	77 c0       	rjmp	.+238    	; 0x30f4 <Pwm_SetClockSource+0x306>
    3006:	2b 81       	ldd	r18, Y+3	; 0x03
    3008:	3c 81       	ldd	r19, Y+4	; 0x04
    300a:	25 30       	cpi	r18, 0x05	; 5
    300c:	31 05       	cpc	r19, r1
    300e:	8c f4       	brge	.+34     	; 0x3032 <Pwm_SetClockSource+0x244>
    3010:	8b 81       	ldd	r24, Y+3	; 0x03
    3012:	9c 81       	ldd	r25, Y+4	; 0x04
    3014:	81 30       	cpi	r24, 0x01	; 1
    3016:	91 05       	cpc	r25, r1
    3018:	09 f4       	brne	.+2      	; 0x301c <Pwm_SetClockSource+0x22e>
    301a:	40 c0       	rjmp	.+128    	; 0x309c <Pwm_SetClockSource+0x2ae>
    301c:	2b 81       	ldd	r18, Y+3	; 0x03
    301e:	3c 81       	ldd	r19, Y+4	; 0x04
    3020:	22 30       	cpi	r18, 0x02	; 2
    3022:	31 05       	cpc	r19, r1
    3024:	09 f4       	brne	.+2      	; 0x3028 <Pwm_SetClockSource+0x23a>
    3026:	50 c0       	rjmp	.+160    	; 0x30c8 <Pwm_SetClockSource+0x2da>
    3028:	8b 81       	ldd	r24, Y+3	; 0x03
    302a:	9c 81       	ldd	r25, Y+4	; 0x04
    302c:	00 97       	sbiw	r24, 0x00	; 0
    302e:	01 f1       	breq	.+64     	; 0x3070 <Pwm_SetClockSource+0x282>
    3030:	ce c0       	rjmp	.+412    	; 0x31ce <Pwm_SetClockSource+0x3e0>
    3032:	2b 81       	ldd	r18, Y+3	; 0x03
    3034:	3c 81       	ldd	r19, Y+4	; 0x04
    3036:	27 30       	cpi	r18, 0x07	; 7
    3038:	31 05       	cpc	r19, r1
    303a:	09 f4       	brne	.+2      	; 0x303e <Pwm_SetClockSource+0x250>
    303c:	87 c0       	rjmp	.+270    	; 0x314c <Pwm_SetClockSource+0x35e>
    303e:	8b 81       	ldd	r24, Y+3	; 0x03
    3040:	9c 81       	ldd	r25, Y+4	; 0x04
    3042:	88 30       	cpi	r24, 0x08	; 8
    3044:	91 05       	cpc	r25, r1
    3046:	3c f4       	brge	.+14     	; 0x3056 <Pwm_SetClockSource+0x268>
    3048:	2b 81       	ldd	r18, Y+3	; 0x03
    304a:	3c 81       	ldd	r19, Y+4	; 0x04
    304c:	26 30       	cpi	r18, 0x06	; 6
    304e:	31 05       	cpc	r19, r1
    3050:	09 f4       	brne	.+2      	; 0x3054 <Pwm_SetClockSource+0x266>
    3052:	66 c0       	rjmp	.+204    	; 0x3120 <Pwm_SetClockSource+0x332>
    3054:	bc c0       	rjmp	.+376    	; 0x31ce <Pwm_SetClockSource+0x3e0>
    3056:	8b 81       	ldd	r24, Y+3	; 0x03
    3058:	9c 81       	ldd	r25, Y+4	; 0x04
    305a:	88 30       	cpi	r24, 0x08	; 8
    305c:	91 05       	cpc	r25, r1
    305e:	09 f4       	brne	.+2      	; 0x3062 <Pwm_SetClockSource+0x274>
    3060:	8b c0       	rjmp	.+278    	; 0x3178 <Pwm_SetClockSource+0x38a>
    3062:	2b 81       	ldd	r18, Y+3	; 0x03
    3064:	3c 81       	ldd	r19, Y+4	; 0x04
    3066:	29 30       	cpi	r18, 0x09	; 9
    3068:	31 05       	cpc	r19, r1
    306a:	09 f4       	brne	.+2      	; 0x306e <Pwm_SetClockSource+0x280>
    306c:	9b c0       	rjmp	.+310    	; 0x31a4 <Pwm_SetClockSource+0x3b6>
    306e:	af c0       	rjmp	.+350    	; 0x31ce <Pwm_SetClockSource+0x3e0>
        {
        case PWM_CLK_OFF:
            CLR_BIT(TCCR1B, 0);
    3070:	ae e4       	ldi	r26, 0x4E	; 78
    3072:	b0 e0       	ldi	r27, 0x00	; 0
    3074:	ee e4       	ldi	r30, 0x4E	; 78
    3076:	f0 e0       	ldi	r31, 0x00	; 0
    3078:	80 81       	ld	r24, Z
    307a:	8e 7f       	andi	r24, 0xFE	; 254
    307c:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B, 1);
    307e:	ae e4       	ldi	r26, 0x4E	; 78
    3080:	b0 e0       	ldi	r27, 0x00	; 0
    3082:	ee e4       	ldi	r30, 0x4E	; 78
    3084:	f0 e0       	ldi	r31, 0x00	; 0
    3086:	80 81       	ld	r24, Z
    3088:	8d 7f       	andi	r24, 0xFD	; 253
    308a:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B, 2);
    308c:	ae e4       	ldi	r26, 0x4E	; 78
    308e:	b0 e0       	ldi	r27, 0x00	; 0
    3090:	ee e4       	ldi	r30, 0x4E	; 78
    3092:	f0 e0       	ldi	r31, 0x00	; 0
    3094:	80 81       	ld	r24, Z
    3096:	8b 7f       	andi	r24, 0xFB	; 251
    3098:	8c 93       	st	X, r24
    309a:	99 c0       	rjmp	.+306    	; 0x31ce <Pwm_SetClockSource+0x3e0>
            break;
        case PWM_CLK_PRESCALER_1:
            SET_BIT(TCCR1B, 0);
    309c:	ae e4       	ldi	r26, 0x4E	; 78
    309e:	b0 e0       	ldi	r27, 0x00	; 0
    30a0:	ee e4       	ldi	r30, 0x4E	; 78
    30a2:	f0 e0       	ldi	r31, 0x00	; 0
    30a4:	80 81       	ld	r24, Z
    30a6:	81 60       	ori	r24, 0x01	; 1
    30a8:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B, 1);
    30aa:	ae e4       	ldi	r26, 0x4E	; 78
    30ac:	b0 e0       	ldi	r27, 0x00	; 0
    30ae:	ee e4       	ldi	r30, 0x4E	; 78
    30b0:	f0 e0       	ldi	r31, 0x00	; 0
    30b2:	80 81       	ld	r24, Z
    30b4:	8d 7f       	andi	r24, 0xFD	; 253
    30b6:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B, 2);
    30b8:	ae e4       	ldi	r26, 0x4E	; 78
    30ba:	b0 e0       	ldi	r27, 0x00	; 0
    30bc:	ee e4       	ldi	r30, 0x4E	; 78
    30be:	f0 e0       	ldi	r31, 0x00	; 0
    30c0:	80 81       	ld	r24, Z
    30c2:	8b 7f       	andi	r24, 0xFB	; 251
    30c4:	8c 93       	st	X, r24
    30c6:	83 c0       	rjmp	.+262    	; 0x31ce <Pwm_SetClockSource+0x3e0>
            break;
        case PWM_CLK_PRESCALER_8:
            CLR_BIT(TCCR1B, 0);
    30c8:	ae e4       	ldi	r26, 0x4E	; 78
    30ca:	b0 e0       	ldi	r27, 0x00	; 0
    30cc:	ee e4       	ldi	r30, 0x4E	; 78
    30ce:	f0 e0       	ldi	r31, 0x00	; 0
    30d0:	80 81       	ld	r24, Z
    30d2:	8e 7f       	andi	r24, 0xFE	; 254
    30d4:	8c 93       	st	X, r24
            SET_BIT(TCCR1B, 1);
    30d6:	ae e4       	ldi	r26, 0x4E	; 78
    30d8:	b0 e0       	ldi	r27, 0x00	; 0
    30da:	ee e4       	ldi	r30, 0x4E	; 78
    30dc:	f0 e0       	ldi	r31, 0x00	; 0
    30de:	80 81       	ld	r24, Z
    30e0:	82 60       	ori	r24, 0x02	; 2
    30e2:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B, 2);
    30e4:	ae e4       	ldi	r26, 0x4E	; 78
    30e6:	b0 e0       	ldi	r27, 0x00	; 0
    30e8:	ee e4       	ldi	r30, 0x4E	; 78
    30ea:	f0 e0       	ldi	r31, 0x00	; 0
    30ec:	80 81       	ld	r24, Z
    30ee:	8b 7f       	andi	r24, 0xFB	; 251
    30f0:	8c 93       	st	X, r24
    30f2:	6d c0       	rjmp	.+218    	; 0x31ce <Pwm_SetClockSource+0x3e0>
            break;
        case PWM_CLK_PRESCALER_64:
            SET_BIT(TCCR1B, 0);
    30f4:	ae e4       	ldi	r26, 0x4E	; 78
    30f6:	b0 e0       	ldi	r27, 0x00	; 0
    30f8:	ee e4       	ldi	r30, 0x4E	; 78
    30fa:	f0 e0       	ldi	r31, 0x00	; 0
    30fc:	80 81       	ld	r24, Z
    30fe:	81 60       	ori	r24, 0x01	; 1
    3100:	8c 93       	st	X, r24
            SET_BIT(TCCR1B, 1);
    3102:	ae e4       	ldi	r26, 0x4E	; 78
    3104:	b0 e0       	ldi	r27, 0x00	; 0
    3106:	ee e4       	ldi	r30, 0x4E	; 78
    3108:	f0 e0       	ldi	r31, 0x00	; 0
    310a:	80 81       	ld	r24, Z
    310c:	82 60       	ori	r24, 0x02	; 2
    310e:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B, 2);
    3110:	ae e4       	ldi	r26, 0x4E	; 78
    3112:	b0 e0       	ldi	r27, 0x00	; 0
    3114:	ee e4       	ldi	r30, 0x4E	; 78
    3116:	f0 e0       	ldi	r31, 0x00	; 0
    3118:	80 81       	ld	r24, Z
    311a:	8b 7f       	andi	r24, 0xFB	; 251
    311c:	8c 93       	st	X, r24
    311e:	57 c0       	rjmp	.+174    	; 0x31ce <Pwm_SetClockSource+0x3e0>
            break;
        case PWM_CLK_PRESCALER_256:
            CLR_BIT(TCCR1B, 0);
    3120:	ae e4       	ldi	r26, 0x4E	; 78
    3122:	b0 e0       	ldi	r27, 0x00	; 0
    3124:	ee e4       	ldi	r30, 0x4E	; 78
    3126:	f0 e0       	ldi	r31, 0x00	; 0
    3128:	80 81       	ld	r24, Z
    312a:	8e 7f       	andi	r24, 0xFE	; 254
    312c:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B, 1);
    312e:	ae e4       	ldi	r26, 0x4E	; 78
    3130:	b0 e0       	ldi	r27, 0x00	; 0
    3132:	ee e4       	ldi	r30, 0x4E	; 78
    3134:	f0 e0       	ldi	r31, 0x00	; 0
    3136:	80 81       	ld	r24, Z
    3138:	8d 7f       	andi	r24, 0xFD	; 253
    313a:	8c 93       	st	X, r24
            SET_BIT(TCCR1B, 2);
    313c:	ae e4       	ldi	r26, 0x4E	; 78
    313e:	b0 e0       	ldi	r27, 0x00	; 0
    3140:	ee e4       	ldi	r30, 0x4E	; 78
    3142:	f0 e0       	ldi	r31, 0x00	; 0
    3144:	80 81       	ld	r24, Z
    3146:	84 60       	ori	r24, 0x04	; 4
    3148:	8c 93       	st	X, r24
    314a:	41 c0       	rjmp	.+130    	; 0x31ce <Pwm_SetClockSource+0x3e0>
            break;
        case PWM_CLK_PRESCALER_1024:
            SET_BIT(TCCR1B, 0);
    314c:	ae e4       	ldi	r26, 0x4E	; 78
    314e:	b0 e0       	ldi	r27, 0x00	; 0
    3150:	ee e4       	ldi	r30, 0x4E	; 78
    3152:	f0 e0       	ldi	r31, 0x00	; 0
    3154:	80 81       	ld	r24, Z
    3156:	81 60       	ori	r24, 0x01	; 1
    3158:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B, 1);
    315a:	ae e4       	ldi	r26, 0x4E	; 78
    315c:	b0 e0       	ldi	r27, 0x00	; 0
    315e:	ee e4       	ldi	r30, 0x4E	; 78
    3160:	f0 e0       	ldi	r31, 0x00	; 0
    3162:	80 81       	ld	r24, Z
    3164:	8d 7f       	andi	r24, 0xFD	; 253
    3166:	8c 93       	st	X, r24
            SET_BIT(TCCR1B, 2);
    3168:	ae e4       	ldi	r26, 0x4E	; 78
    316a:	b0 e0       	ldi	r27, 0x00	; 0
    316c:	ee e4       	ldi	r30, 0x4E	; 78
    316e:	f0 e0       	ldi	r31, 0x00	; 0
    3170:	80 81       	ld	r24, Z
    3172:	84 60       	ori	r24, 0x04	; 4
    3174:	8c 93       	st	X, r24
    3176:	2b c0       	rjmp	.+86     	; 0x31ce <Pwm_SetClockSource+0x3e0>
            break;
        case PWM_CLK_EXT_FALLING:
            CLR_BIT(TCCR1B, 0);
    3178:	ae e4       	ldi	r26, 0x4E	; 78
    317a:	b0 e0       	ldi	r27, 0x00	; 0
    317c:	ee e4       	ldi	r30, 0x4E	; 78
    317e:	f0 e0       	ldi	r31, 0x00	; 0
    3180:	80 81       	ld	r24, Z
    3182:	8e 7f       	andi	r24, 0xFE	; 254
    3184:	8c 93       	st	X, r24
            SET_BIT(TCCR1B, 1);
    3186:	ae e4       	ldi	r26, 0x4E	; 78
    3188:	b0 e0       	ldi	r27, 0x00	; 0
    318a:	ee e4       	ldi	r30, 0x4E	; 78
    318c:	f0 e0       	ldi	r31, 0x00	; 0
    318e:	80 81       	ld	r24, Z
    3190:	82 60       	ori	r24, 0x02	; 2
    3192:	8c 93       	st	X, r24
            SET_BIT(TCCR1B, 2);
    3194:	ae e4       	ldi	r26, 0x4E	; 78
    3196:	b0 e0       	ldi	r27, 0x00	; 0
    3198:	ee e4       	ldi	r30, 0x4E	; 78
    319a:	f0 e0       	ldi	r31, 0x00	; 0
    319c:	80 81       	ld	r24, Z
    319e:	84 60       	ori	r24, 0x04	; 4
    31a0:	8c 93       	st	X, r24
    31a2:	15 c0       	rjmp	.+42     	; 0x31ce <Pwm_SetClockSource+0x3e0>
            break;
        case PWM_CLK_EXT_RISING:
            SET_BIT(TCCR1B, 0);
    31a4:	ae e4       	ldi	r26, 0x4E	; 78
    31a6:	b0 e0       	ldi	r27, 0x00	; 0
    31a8:	ee e4       	ldi	r30, 0x4E	; 78
    31aa:	f0 e0       	ldi	r31, 0x00	; 0
    31ac:	80 81       	ld	r24, Z
    31ae:	81 60       	ori	r24, 0x01	; 1
    31b0:	8c 93       	st	X, r24
            SET_BIT(TCCR1B, 1);
    31b2:	ae e4       	ldi	r26, 0x4E	; 78
    31b4:	b0 e0       	ldi	r27, 0x00	; 0
    31b6:	ee e4       	ldi	r30, 0x4E	; 78
    31b8:	f0 e0       	ldi	r31, 0x00	; 0
    31ba:	80 81       	ld	r24, Z
    31bc:	82 60       	ori	r24, 0x02	; 2
    31be:	8c 93       	st	X, r24
            SET_BIT(TCCR1B, 2);
    31c0:	ae e4       	ldi	r26, 0x4E	; 78
    31c2:	b0 e0       	ldi	r27, 0x00	; 0
    31c4:	ee e4       	ldi	r30, 0x4E	; 78
    31c6:	f0 e0       	ldi	r31, 0x00	; 0
    31c8:	80 81       	ld	r24, Z
    31ca:	84 60       	ori	r24, 0x04	; 4
    31cc:	8c 93       	st	X, r24
    }
    else
    {
        /* Do Nothing */
    }
}
    31ce:	26 96       	adiw	r28, 0x06	; 6
    31d0:	0f b6       	in	r0, 0x3f	; 63
    31d2:	f8 94       	cli
    31d4:	de bf       	out	0x3e, r29	; 62
    31d6:	0f be       	out	0x3f, r0	; 63
    31d8:	cd bf       	out	0x3d, r28	; 61
    31da:	cf 91       	pop	r28
    31dc:	df 91       	pop	r29
    31de:	08 95       	ret

000031e0 <Pwm_SetTimeOn>:

void Pwm_SetTimeOn (Pwm_OutChannelType out, u16 time)
{
    31e0:	df 93       	push	r29
    31e2:	cf 93       	push	r28
    31e4:	00 d0       	rcall	.+0      	; 0x31e6 <Pwm_SetTimeOn+0x6>
    31e6:	00 d0       	rcall	.+0      	; 0x31e8 <Pwm_SetTimeOn+0x8>
    31e8:	0f 92       	push	r0
    31ea:	cd b7       	in	r28, 0x3d	; 61
    31ec:	de b7       	in	r29, 0x3e	; 62
    31ee:	89 83       	std	Y+1, r24	; 0x01
    31f0:	7b 83       	std	Y+3, r23	; 0x03
    31f2:	6a 83       	std	Y+2, r22	; 0x02
    switch (out)
    31f4:	89 81       	ldd	r24, Y+1	; 0x01
    31f6:	28 2f       	mov	r18, r24
    31f8:	30 e0       	ldi	r19, 0x00	; 0
    31fa:	3d 83       	std	Y+5, r19	; 0x05
    31fc:	2c 83       	std	Y+4, r18	; 0x04
    31fe:	8c 81       	ldd	r24, Y+4	; 0x04
    3200:	9d 81       	ldd	r25, Y+5	; 0x05
    3202:	81 30       	cpi	r24, 0x01	; 1
    3204:	91 05       	cpc	r25, r1
    3206:	d1 f0       	breq	.+52     	; 0x323c <Pwm_SetTimeOn+0x5c>
    3208:	2c 81       	ldd	r18, Y+4	; 0x04
    320a:	3d 81       	ldd	r19, Y+5	; 0x05
    320c:	22 30       	cpi	r18, 0x02	; 2
    320e:	31 05       	cpc	r19, r1
    3210:	2c f4       	brge	.+10     	; 0x321c <Pwm_SetTimeOn+0x3c>
    3212:	8c 81       	ldd	r24, Y+4	; 0x04
    3214:	9d 81       	ldd	r25, Y+5	; 0x05
    3216:	00 97       	sbiw	r24, 0x00	; 0
    3218:	61 f0       	breq	.+24     	; 0x3232 <Pwm_SetTimeOn+0x52>
    321a:	22 c0       	rjmp	.+68     	; 0x3260 <Pwm_SetTimeOn+0x80>
    321c:	2c 81       	ldd	r18, Y+4	; 0x04
    321e:	3d 81       	ldd	r19, Y+5	; 0x05
    3220:	22 30       	cpi	r18, 0x02	; 2
    3222:	31 05       	cpc	r19, r1
    3224:	91 f0       	breq	.+36     	; 0x324a <Pwm_SetTimeOn+0x6a>
    3226:	8c 81       	ldd	r24, Y+4	; 0x04
    3228:	9d 81       	ldd	r25, Y+5	; 0x05
    322a:	83 30       	cpi	r24, 0x03	; 3
    322c:	91 05       	cpc	r25, r1
    322e:	a1 f0       	breq	.+40     	; 0x3258 <Pwm_SetTimeOn+0x78>
    3230:	17 c0       	rjmp	.+46     	; 0x3260 <Pwm_SetTimeOn+0x80>
    {
    case PWM_OUT_OC0:
        OCR0 = time;
    3232:	ec e5       	ldi	r30, 0x5C	; 92
    3234:	f0 e0       	ldi	r31, 0x00	; 0
    3236:	8a 81       	ldd	r24, Y+2	; 0x02
    3238:	80 83       	st	Z, r24
    323a:	12 c0       	rjmp	.+36     	; 0x3260 <Pwm_SetTimeOn+0x80>
        break;
    case PWM_OUT_OC1A:
        OCR1A = time;
    323c:	ea e4       	ldi	r30, 0x4A	; 74
    323e:	f0 e0       	ldi	r31, 0x00	; 0
    3240:	8a 81       	ldd	r24, Y+2	; 0x02
    3242:	9b 81       	ldd	r25, Y+3	; 0x03
    3244:	91 83       	std	Z+1, r25	; 0x01
    3246:	80 83       	st	Z, r24
    3248:	0b c0       	rjmp	.+22     	; 0x3260 <Pwm_SetTimeOn+0x80>
        break;
    case PWM_OUT_OC1B:
        OCR1B = time;
    324a:	e8 e4       	ldi	r30, 0x48	; 72
    324c:	f0 e0       	ldi	r31, 0x00	; 0
    324e:	8a 81       	ldd	r24, Y+2	; 0x02
    3250:	9b 81       	ldd	r25, Y+3	; 0x03
    3252:	91 83       	std	Z+1, r25	; 0x01
    3254:	80 83       	st	Z, r24
    3256:	04 c0       	rjmp	.+8      	; 0x3260 <Pwm_SetTimeOn+0x80>
        break;
    case PWM_OUT_OC2:
        OCR2 = time;
    3258:	e3 e4       	ldi	r30, 0x43	; 67
    325a:	f0 e0       	ldi	r31, 0x00	; 0
    325c:	8a 81       	ldd	r24, Y+2	; 0x02
    325e:	80 83       	st	Z, r24
        break;
    default:
        break;
    }
}
    3260:	0f 90       	pop	r0
    3262:	0f 90       	pop	r0
    3264:	0f 90       	pop	r0
    3266:	0f 90       	pop	r0
    3268:	0f 90       	pop	r0
    326a:	cf 91       	pop	r28
    326c:	df 91       	pop	r29
    326e:	08 95       	ret

00003270 <Pwm_SetDutyCycle>:

void Pwm_SetDutyCycle (Pwm_OutChannelType out, u8 dutyCycle)
{
    3270:	0f 93       	push	r16
    3272:	1f 93       	push	r17
    3274:	df 93       	push	r29
    3276:	cf 93       	push	r28
    3278:	00 d0       	rcall	.+0      	; 0x327a <Pwm_SetDutyCycle+0xa>
    327a:	00 d0       	rcall	.+0      	; 0x327c <Pwm_SetDutyCycle+0xc>
    327c:	cd b7       	in	r28, 0x3d	; 61
    327e:	de b7       	in	r29, 0x3e	; 62
    3280:	89 83       	std	Y+1, r24	; 0x01
    3282:	6a 83       	std	Y+2, r22	; 0x02
    switch (out)
    3284:	89 81       	ldd	r24, Y+1	; 0x01
    3286:	28 2f       	mov	r18, r24
    3288:	30 e0       	ldi	r19, 0x00	; 0
    328a:	3c 83       	std	Y+4, r19	; 0x04
    328c:	2b 83       	std	Y+3, r18	; 0x03
    328e:	8b 81       	ldd	r24, Y+3	; 0x03
    3290:	9c 81       	ldd	r25, Y+4	; 0x04
    3292:	81 30       	cpi	r24, 0x01	; 1
    3294:	91 05       	cpc	r25, r1
    3296:	b1 f1       	breq	.+108    	; 0x3304 <Pwm_SetDutyCycle+0x94>
    3298:	eb 81       	ldd	r30, Y+3	; 0x03
    329a:	fc 81       	ldd	r31, Y+4	; 0x04
    329c:	e2 30       	cpi	r30, 0x02	; 2
    329e:	f1 05       	cpc	r31, r1
    32a0:	34 f4       	brge	.+12     	; 0x32ae <Pwm_SetDutyCycle+0x3e>
    32a2:	2b 81       	ldd	r18, Y+3	; 0x03
    32a4:	3c 81       	ldd	r19, Y+4	; 0x04
    32a6:	21 15       	cp	r18, r1
    32a8:	31 05       	cpc	r19, r1
    32aa:	71 f0       	breq	.+28     	; 0x32c8 <Pwm_SetDutyCycle+0x58>
    32ac:	86 c0       	rjmp	.+268    	; 0x33ba <Pwm_SetDutyCycle+0x14a>
    32ae:	8b 81       	ldd	r24, Y+3	; 0x03
    32b0:	9c 81       	ldd	r25, Y+4	; 0x04
    32b2:	82 30       	cpi	r24, 0x02	; 2
    32b4:	91 05       	cpc	r25, r1
    32b6:	09 f4       	brne	.+2      	; 0x32ba <Pwm_SetDutyCycle+0x4a>
    32b8:	44 c0       	rjmp	.+136    	; 0x3342 <Pwm_SetDutyCycle+0xd2>
    32ba:	eb 81       	ldd	r30, Y+3	; 0x03
    32bc:	fc 81       	ldd	r31, Y+4	; 0x04
    32be:	e3 30       	cpi	r30, 0x03	; 3
    32c0:	f1 05       	cpc	r31, r1
    32c2:	09 f4       	brne	.+2      	; 0x32c6 <Pwm_SetDutyCycle+0x56>
    32c4:	5d c0       	rjmp	.+186    	; 0x3380 <Pwm_SetDutyCycle+0x110>
    32c6:	79 c0       	rjmp	.+242    	; 0x33ba <Pwm_SetDutyCycle+0x14a>
    {
    case PWM_OUT_OC0:
        OCR0 = ((u32)dutyCycle*0xFF/100);
    32c8:	0c e5       	ldi	r16, 0x5C	; 92
    32ca:	10 e0       	ldi	r17, 0x00	; 0
    32cc:	8a 81       	ldd	r24, Y+2	; 0x02
    32ce:	88 2f       	mov	r24, r24
    32d0:	90 e0       	ldi	r25, 0x00	; 0
    32d2:	a0 e0       	ldi	r26, 0x00	; 0
    32d4:	b0 e0       	ldi	r27, 0x00	; 0
    32d6:	2f ef       	ldi	r18, 0xFF	; 255
    32d8:	30 e0       	ldi	r19, 0x00	; 0
    32da:	40 e0       	ldi	r20, 0x00	; 0
    32dc:	50 e0       	ldi	r21, 0x00	; 0
    32de:	bc 01       	movw	r22, r24
    32e0:	cd 01       	movw	r24, r26
    32e2:	0e 94 f0 1d 	call	0x3be0	; 0x3be0 <__mulsi3>
    32e6:	dc 01       	movw	r26, r24
    32e8:	cb 01       	movw	r24, r22
    32ea:	24 e6       	ldi	r18, 0x64	; 100
    32ec:	30 e0       	ldi	r19, 0x00	; 0
    32ee:	40 e0       	ldi	r20, 0x00	; 0
    32f0:	50 e0       	ldi	r21, 0x00	; 0
    32f2:	bc 01       	movw	r22, r24
    32f4:	cd 01       	movw	r24, r26
    32f6:	0e 94 0f 1e 	call	0x3c1e	; 0x3c1e <__udivmodsi4>
    32fa:	da 01       	movw	r26, r20
    32fc:	c9 01       	movw	r24, r18
    32fe:	f8 01       	movw	r30, r16
    3300:	80 83       	st	Z, r24
    3302:	5b c0       	rjmp	.+182    	; 0x33ba <Pwm_SetDutyCycle+0x14a>
        break;
    case PWM_OUT_OC1A:
        OCR1A = ((u32)dutyCycle*0xFFFF/100);
    3304:	0a e4       	ldi	r16, 0x4A	; 74
    3306:	10 e0       	ldi	r17, 0x00	; 0
    3308:	8a 81       	ldd	r24, Y+2	; 0x02
    330a:	88 2f       	mov	r24, r24
    330c:	90 e0       	ldi	r25, 0x00	; 0
    330e:	a0 e0       	ldi	r26, 0x00	; 0
    3310:	b0 e0       	ldi	r27, 0x00	; 0
    3312:	2f ef       	ldi	r18, 0xFF	; 255
    3314:	3f ef       	ldi	r19, 0xFF	; 255
    3316:	40 e0       	ldi	r20, 0x00	; 0
    3318:	50 e0       	ldi	r21, 0x00	; 0
    331a:	bc 01       	movw	r22, r24
    331c:	cd 01       	movw	r24, r26
    331e:	0e 94 f0 1d 	call	0x3be0	; 0x3be0 <__mulsi3>
    3322:	dc 01       	movw	r26, r24
    3324:	cb 01       	movw	r24, r22
    3326:	24 e6       	ldi	r18, 0x64	; 100
    3328:	30 e0       	ldi	r19, 0x00	; 0
    332a:	40 e0       	ldi	r20, 0x00	; 0
    332c:	50 e0       	ldi	r21, 0x00	; 0
    332e:	bc 01       	movw	r22, r24
    3330:	cd 01       	movw	r24, r26
    3332:	0e 94 0f 1e 	call	0x3c1e	; 0x3c1e <__udivmodsi4>
    3336:	da 01       	movw	r26, r20
    3338:	c9 01       	movw	r24, r18
    333a:	f8 01       	movw	r30, r16
    333c:	91 83       	std	Z+1, r25	; 0x01
    333e:	80 83       	st	Z, r24
    3340:	3c c0       	rjmp	.+120    	; 0x33ba <Pwm_SetDutyCycle+0x14a>
        break;
    case PWM_OUT_OC1B:
        OCR1B = ((u32)dutyCycle*0xFFFF/100);
    3342:	08 e4       	ldi	r16, 0x48	; 72
    3344:	10 e0       	ldi	r17, 0x00	; 0
    3346:	8a 81       	ldd	r24, Y+2	; 0x02
    3348:	88 2f       	mov	r24, r24
    334a:	90 e0       	ldi	r25, 0x00	; 0
    334c:	a0 e0       	ldi	r26, 0x00	; 0
    334e:	b0 e0       	ldi	r27, 0x00	; 0
    3350:	2f ef       	ldi	r18, 0xFF	; 255
    3352:	3f ef       	ldi	r19, 0xFF	; 255
    3354:	40 e0       	ldi	r20, 0x00	; 0
    3356:	50 e0       	ldi	r21, 0x00	; 0
    3358:	bc 01       	movw	r22, r24
    335a:	cd 01       	movw	r24, r26
    335c:	0e 94 f0 1d 	call	0x3be0	; 0x3be0 <__mulsi3>
    3360:	dc 01       	movw	r26, r24
    3362:	cb 01       	movw	r24, r22
    3364:	24 e6       	ldi	r18, 0x64	; 100
    3366:	30 e0       	ldi	r19, 0x00	; 0
    3368:	40 e0       	ldi	r20, 0x00	; 0
    336a:	50 e0       	ldi	r21, 0x00	; 0
    336c:	bc 01       	movw	r22, r24
    336e:	cd 01       	movw	r24, r26
    3370:	0e 94 0f 1e 	call	0x3c1e	; 0x3c1e <__udivmodsi4>
    3374:	da 01       	movw	r26, r20
    3376:	c9 01       	movw	r24, r18
    3378:	f8 01       	movw	r30, r16
    337a:	91 83       	std	Z+1, r25	; 0x01
    337c:	80 83       	st	Z, r24
    337e:	1d c0       	rjmp	.+58     	; 0x33ba <Pwm_SetDutyCycle+0x14a>
        break;
    case PWM_OUT_OC2:
        OCR2 = ((u32)dutyCycle*0xFF/100);
    3380:	03 e4       	ldi	r16, 0x43	; 67
    3382:	10 e0       	ldi	r17, 0x00	; 0
    3384:	8a 81       	ldd	r24, Y+2	; 0x02
    3386:	88 2f       	mov	r24, r24
    3388:	90 e0       	ldi	r25, 0x00	; 0
    338a:	a0 e0       	ldi	r26, 0x00	; 0
    338c:	b0 e0       	ldi	r27, 0x00	; 0
    338e:	2f ef       	ldi	r18, 0xFF	; 255
    3390:	30 e0       	ldi	r19, 0x00	; 0
    3392:	40 e0       	ldi	r20, 0x00	; 0
    3394:	50 e0       	ldi	r21, 0x00	; 0
    3396:	bc 01       	movw	r22, r24
    3398:	cd 01       	movw	r24, r26
    339a:	0e 94 f0 1d 	call	0x3be0	; 0x3be0 <__mulsi3>
    339e:	dc 01       	movw	r26, r24
    33a0:	cb 01       	movw	r24, r22
    33a2:	24 e6       	ldi	r18, 0x64	; 100
    33a4:	30 e0       	ldi	r19, 0x00	; 0
    33a6:	40 e0       	ldi	r20, 0x00	; 0
    33a8:	50 e0       	ldi	r21, 0x00	; 0
    33aa:	bc 01       	movw	r22, r24
    33ac:	cd 01       	movw	r24, r26
    33ae:	0e 94 0f 1e 	call	0x3c1e	; 0x3c1e <__udivmodsi4>
    33b2:	da 01       	movw	r26, r20
    33b4:	c9 01       	movw	r24, r18
    33b6:	f8 01       	movw	r30, r16
    33b8:	80 83       	st	Z, r24
        break;
    default:
        break;
    }
}
    33ba:	0f 90       	pop	r0
    33bc:	0f 90       	pop	r0
    33be:	0f 90       	pop	r0
    33c0:	0f 90       	pop	r0
    33c2:	cf 91       	pop	r28
    33c4:	df 91       	pop	r29
    33c6:	1f 91       	pop	r17
    33c8:	0f 91       	pop	r16
    33ca:	08 95       	ret

000033cc <Pwm_SetICR1>:

void Pwm_SetICR1 (u16 value)
{
    33cc:	df 93       	push	r29
    33ce:	cf 93       	push	r28
    33d0:	00 d0       	rcall	.+0      	; 0x33d2 <Pwm_SetICR1+0x6>
    33d2:	cd b7       	in	r28, 0x3d	; 61
    33d4:	de b7       	in	r29, 0x3e	; 62
    33d6:	9a 83       	std	Y+2, r25	; 0x02
    33d8:	89 83       	std	Y+1, r24	; 0x01
    ICR1 = value;
    33da:	e6 e4       	ldi	r30, 0x46	; 70
    33dc:	f0 e0       	ldi	r31, 0x00	; 0
    33de:	89 81       	ldd	r24, Y+1	; 0x01
    33e0:	9a 81       	ldd	r25, Y+2	; 0x02
    33e2:	91 83       	std	Z+1, r25	; 0x01
    33e4:	80 83       	st	Z, r24
}
    33e6:	0f 90       	pop	r0
    33e8:	0f 90       	pop	r0
    33ea:	cf 91       	pop	r28
    33ec:	df 91       	pop	r29
    33ee:	08 95       	ret

000033f0 <Timer_Handler>:
 u8 steps = 0;
 u8 Total_Steps= 0;


void Timer_Handler (void)
{
    33f0:	df 93       	push	r29
    33f2:	cf 93       	push	r28
    33f4:	cd b7       	in	r28, 0x3d	; 61
    33f6:	de b7       	in	r29, 0x3e	; 62
	Gpt_SetCounterValue (GPT_INT_SOURCE_TIM0_OVF, 6);
    33f8:	80 e0       	ldi	r24, 0x00	; 0
    33fa:	66 e0       	ldi	r22, 0x06	; 6
    33fc:	70 e0       	ldi	r23, 0x00	; 0
    33fe:	0e 94 8b 13 	call	0x2716	; 0x2716 <Gpt_SetCounterValue>
	Timer_Counter++;
    3402:	80 91 90 00 	lds	r24, 0x0090
    3406:	90 91 91 00 	lds	r25, 0x0091
    340a:	01 96       	adiw	r24, 0x01	; 1
    340c:	90 93 91 00 	sts	0x0091, r25
    3410:	80 93 90 00 	sts	0x0090, r24

	if (Timer_Counter == 2000)
    3414:	80 91 90 00 	lds	r24, 0x0090
    3418:	90 91 91 00 	lds	r25, 0x0091
    341c:	27 e0       	ldi	r18, 0x07	; 7
    341e:	80 3d       	cpi	r24, 0xD0	; 208
    3420:	92 07       	cpc	r25, r18
    3422:	19 f4       	brne	.+6      	; 0x342a <Timer_Handler+0x3a>
	{
		flag1 = 1;
    3424:	81 e0       	ldi	r24, 0x01	; 1
    3426:	80 93 95 00 	sts	0x0095, r24
	}
	if (Timer_Counter == 2000)
    342a:	80 91 90 00 	lds	r24, 0x0090
    342e:	90 91 91 00 	lds	r25, 0x0091
    3432:	27 e0       	ldi	r18, 0x07	; 7
    3434:	80 3d       	cpi	r24, 0xD0	; 208
    3436:	92 07       	cpc	r25, r18
    3438:	19 f4       	brne	.+6      	; 0x3440 <Timer_Handler+0x50>
	{
        flag2 = 1;
    343a:	81 e0       	ldi	r24, 0x01	; 1
    343c:	80 93 96 00 	sts	0x0096, r24
	}
	if (Timer_Counter == 4000)
    3440:	80 91 90 00 	lds	r24, 0x0090
    3444:	90 91 91 00 	lds	r25, 0x0091
    3448:	2f e0       	ldi	r18, 0x0F	; 15
    344a:	80 3a       	cpi	r24, 0xA0	; 160
    344c:	92 07       	cpc	r25, r18
    344e:	19 f4       	brne	.+6      	; 0x3456 <Timer_Handler+0x66>
	{
		flag3 = 1;
    3450:	81 e0       	ldi	r24, 0x01	; 1
    3452:	80 93 97 00 	sts	0x0097, r24
	}
}
    3456:	cf 91       	pop	r28
    3458:	df 91       	pop	r29
    345a:	08 95       	ret

0000345c <main>:


int main (void)
{
    345c:	df 93       	push	r29
    345e:	cf 93       	push	r28
    3460:	cd b7       	in	r28, 0x3d	; 61
    3462:	de b7       	in	r29, 0x3e	; 62
    3464:	6c 97       	sbiw	r28, 0x1c	; 28
    3466:	0f b6       	in	r0, 0x3f	; 63
    3468:	f8 94       	cli
    346a:	de bf       	out	0x3e, r29	; 62
    346c:	0f be       	out	0x3f, r0	; 63
    346e:	cd bf       	out	0x3d, r28	; 61
	Pwm_Init(&Pwm_Configuration);
    3470:	82 e7       	ldi	r24, 0x72	; 114
    3472:	90 e0       	ldi	r25, 0x00	; 0
    3474:	0e 94 44 15 	call	0x2a88	; 0x2a88 <Pwm_Init>

	Gpt_Init(&Gpt_Configuration);
    3478:	88 e6       	ldi	r24, 0x68	; 104
    347a:	90 e0       	ldi	r25, 0x00	; 0
    347c:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <Gpt_Init>
    Gpt_EnableInterrupt(GPT_INT_SOURCE_TIM0_OVF);
    3480:	80 e0       	ldi	r24, 0x00	; 0
    3482:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <Gpt_EnableInterrupt>
    Gpt_SetCallback(GPT_INT_SOURCE_TIM0_OVF, Timer_Handler);
    3486:	28 ef       	ldi	r18, 0xF8	; 248
    3488:	39 e1       	ldi	r19, 0x19	; 25
    348a:	80 e0       	ldi	r24, 0x00	; 0
    348c:	b9 01       	movw	r22, r18
    348e:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <Gpt_SetCallback>
    Gpt_SetCounterValue (GPT_INT_SOURCE_TIM0_OVF, 6);
    3492:	80 e0       	ldi	r24, 0x00	; 0
    3494:	66 e0       	ldi	r22, 0x06	; 6
    3496:	70 e0       	ldi	r23, 0x00	; 0
    3498:	0e 94 8b 13 	call	0x2716	; 0x2716 <Gpt_SetCounterValue>


	Dio_SetPinMode (IN1,DIO_MODE_OUTPUT);
    349c:	83 e0       	ldi	r24, 0x03	; 3
    349e:	60 e0       	ldi	r22, 0x00	; 0
    34a0:	40 e0       	ldi	r20, 0x00	; 0
    34a2:	0e 94 a3 05 	call	0xb46	; 0xb46 <Dio_SetPinMode>
	Dio_SetPinMode (IN2,DIO_MODE_OUTPUT);
    34a6:	83 e0       	ldi	r24, 0x03	; 3
    34a8:	61 e0       	ldi	r22, 0x01	; 1
    34aa:	40 e0       	ldi	r20, 0x00	; 0
    34ac:	0e 94 a3 05 	call	0xb46	; 0xb46 <Dio_SetPinMode>
	Dio_SetPinMode (IN3,DIO_MODE_OUTPUT);
    34b0:	83 e0       	ldi	r24, 0x03	; 3
    34b2:	62 e0       	ldi	r22, 0x02	; 2
    34b4:	40 e0       	ldi	r20, 0x00	; 0
    34b6:	0e 94 a3 05 	call	0xb46	; 0xb46 <Dio_SetPinMode>
	Dio_SetPinMode (IN4,DIO_MODE_OUTPUT);
    34ba:	83 e0       	ldi	r24, 0x03	; 3
    34bc:	63 e0       	ldi	r22, 0x03	; 3
    34be:	40 e0       	ldi	r20, 0x00	; 0
    34c0:	0e 94 a3 05 	call	0xb46	; 0xb46 <Dio_SetPinMode>

	Dio_SetPinMode (BUZZ,DIO_MODE_OUTPUT);
    34c4:	83 e0       	ldi	r24, 0x03	; 3
    34c6:	67 e0       	ldi	r22, 0x07	; 7
    34c8:	40 e0       	ldi	r20, 0x00	; 0
    34ca:	0e 94 a3 05 	call	0xb46	; 0xb46 <Dio_SetPinMode>
	Dio_SetPinMode(IR,DIO_MODE_INPUT_PULLUP);
    34ce:	82 e0       	ldi	r24, 0x02	; 2
    34d0:	60 e0       	ldi	r22, 0x00	; 0
    34d2:	42 e0       	ldi	r20, 0x02	; 2
    34d4:	0e 94 a3 05 	call	0xb46	; 0xb46 <Dio_SetPinMode>
	// Dio_SetPinMode (LED,DIO_MODE_INPUT_PULLUP);


	Pwm_SetICR1(20000);
    34d8:	80 e2       	ldi	r24, 0x20	; 32
    34da:	9e e4       	ldi	r25, 0x4E	; 78
    34dc:	0e 94 e6 19 	call	0x33cc	; 0x33cc <Pwm_SetICR1>

	Gie_Enable();
    34e0:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <Gie_Enable>
    34e4:	3d c1       	rjmp	.+634    	; 0x3760 <main+0x304>
	while(1)
	{

	  while(steps<4)
	  {
	    flag1 = 0;
    34e6:	10 92 95 00 	sts	0x0095, r1
	    flag2 = 0;
    34ea:	10 92 96 00 	sts	0x0096, r1
	    flag3 = 0;
    34ee:	10 92 97 00 	sts	0x0097, r1
		Car_Detected();
    34f2:	0e 94 8b 1c 	call	0x3916	; 0x3916 <Car_Detected>

		if(Detected_Mine == 1)
    34f6:	80 91 92 00 	lds	r24, 0x0092
    34fa:	81 30       	cpi	r24, 0x01	; 1
    34fc:	09 f0       	breq	.+2      	; 0x3500 <main+0xa4>
    34fe:	1a c1       	rjmp	.+564    	; 0x3734 <main+0x2d8>
		{
			Detected_Mine=0;
    3500:	10 92 92 00 	sts	0x0092, r1

		     flag2 = 0;
    3504:	10 92 96 00 	sts	0x0096, r1
			Timer_Counter = 0;
    3508:	10 92 91 00 	sts	0x0091, r1
    350c:	10 92 90 00 	sts	0x0090, r1
    3510:	03 c0       	rjmp	.+6      	; 0x3518 <main+0xbc>
			while(!flag2)
			{
				Car_direction(BACKWORD);
    3512:	82 e0       	ldi	r24, 0x02	; 2
    3514:	0e 94 da 1b 	call	0x37b4	; 0x37b4 <Car_direction>
		{
			Detected_Mine=0;

		     flag2 = 0;
			Timer_Counter = 0;
			while(!flag2)
    3518:	80 91 96 00 	lds	r24, 0x0096
    351c:	88 23       	and	r24, r24
    351e:	c9 f3       	breq	.-14     	; 0x3512 <main+0xb6>
			{
				Car_direction(BACKWORD);
			}
			Car_direction(STOP);
    3520:	80 e0       	ldi	r24, 0x00	; 0
    3522:	0e 94 da 1b 	call	0x37b4	; 0x37b4 <Car_direction>
    3526:	80 e0       	ldi	r24, 0x00	; 0
    3528:	90 e0       	ldi	r25, 0x00	; 0
    352a:	a8 e4       	ldi	r26, 0x48	; 72
    352c:	b2 e4       	ldi	r27, 0x42	; 66
    352e:	89 8f       	std	Y+25, r24	; 0x19
    3530:	9a 8f       	std	Y+26, r25	; 0x1a
    3532:	ab 8f       	std	Y+27, r26	; 0x1b
    3534:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3536:	69 8d       	ldd	r22, Y+25	; 0x19
    3538:	7a 8d       	ldd	r23, Y+26	; 0x1a
    353a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    353c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    353e:	20 e0       	ldi	r18, 0x00	; 0
    3540:	30 e0       	ldi	r19, 0x00	; 0
    3542:	4a ef       	ldi	r20, 0xFA	; 250
    3544:	54 e4       	ldi	r21, 0x44	; 68
    3546:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    354a:	dc 01       	movw	r26, r24
    354c:	cb 01       	movw	r24, r22
    354e:	8d 8b       	std	Y+21, r24	; 0x15
    3550:	9e 8b       	std	Y+22, r25	; 0x16
    3552:	af 8b       	std	Y+23, r26	; 0x17
    3554:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3556:	6d 89       	ldd	r22, Y+21	; 0x15
    3558:	7e 89       	ldd	r23, Y+22	; 0x16
    355a:	8f 89       	ldd	r24, Y+23	; 0x17
    355c:	98 8d       	ldd	r25, Y+24	; 0x18
    355e:	20 e0       	ldi	r18, 0x00	; 0
    3560:	30 e0       	ldi	r19, 0x00	; 0
    3562:	40 e8       	ldi	r20, 0x80	; 128
    3564:	5f e3       	ldi	r21, 0x3F	; 63
    3566:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    356a:	88 23       	and	r24, r24
    356c:	2c f4       	brge	.+10     	; 0x3578 <main+0x11c>
		__ticks = 1;
    356e:	81 e0       	ldi	r24, 0x01	; 1
    3570:	90 e0       	ldi	r25, 0x00	; 0
    3572:	9c 8b       	std	Y+20, r25	; 0x14
    3574:	8b 8b       	std	Y+19, r24	; 0x13
    3576:	3f c0       	rjmp	.+126    	; 0x35f6 <main+0x19a>
	else if (__tmp > 65535)
    3578:	6d 89       	ldd	r22, Y+21	; 0x15
    357a:	7e 89       	ldd	r23, Y+22	; 0x16
    357c:	8f 89       	ldd	r24, Y+23	; 0x17
    357e:	98 8d       	ldd	r25, Y+24	; 0x18
    3580:	20 e0       	ldi	r18, 0x00	; 0
    3582:	3f ef       	ldi	r19, 0xFF	; 255
    3584:	4f e7       	ldi	r20, 0x7F	; 127
    3586:	57 e4       	ldi	r21, 0x47	; 71
    3588:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    358c:	18 16       	cp	r1, r24
    358e:	4c f5       	brge	.+82     	; 0x35e2 <main+0x186>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3590:	69 8d       	ldd	r22, Y+25	; 0x19
    3592:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3594:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3596:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3598:	20 e0       	ldi	r18, 0x00	; 0
    359a:	30 e0       	ldi	r19, 0x00	; 0
    359c:	40 e2       	ldi	r20, 0x20	; 32
    359e:	51 e4       	ldi	r21, 0x41	; 65
    35a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35a4:	dc 01       	movw	r26, r24
    35a6:	cb 01       	movw	r24, r22
    35a8:	bc 01       	movw	r22, r24
    35aa:	cd 01       	movw	r24, r26
    35ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35b0:	dc 01       	movw	r26, r24
    35b2:	cb 01       	movw	r24, r22
    35b4:	9c 8b       	std	Y+20, r25	; 0x14
    35b6:	8b 8b       	std	Y+19, r24	; 0x13
    35b8:	0f c0       	rjmp	.+30     	; 0x35d8 <main+0x17c>
    35ba:	88 ec       	ldi	r24, 0xC8	; 200
    35bc:	90 e0       	ldi	r25, 0x00	; 0
    35be:	9a 8b       	std	Y+18, r25	; 0x12
    35c0:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    35c2:	89 89       	ldd	r24, Y+17	; 0x11
    35c4:	9a 89       	ldd	r25, Y+18	; 0x12
    35c6:	01 97       	sbiw	r24, 0x01	; 1
    35c8:	f1 f7       	brne	.-4      	; 0x35c6 <main+0x16a>
    35ca:	9a 8b       	std	Y+18, r25	; 0x12
    35cc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35ce:	8b 89       	ldd	r24, Y+19	; 0x13
    35d0:	9c 89       	ldd	r25, Y+20	; 0x14
    35d2:	01 97       	sbiw	r24, 0x01	; 1
    35d4:	9c 8b       	std	Y+20, r25	; 0x14
    35d6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35d8:	8b 89       	ldd	r24, Y+19	; 0x13
    35da:	9c 89       	ldd	r25, Y+20	; 0x14
    35dc:	00 97       	sbiw	r24, 0x00	; 0
    35de:	69 f7       	brne	.-38     	; 0x35ba <main+0x15e>
    35e0:	14 c0       	rjmp	.+40     	; 0x360a <main+0x1ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35e2:	6d 89       	ldd	r22, Y+21	; 0x15
    35e4:	7e 89       	ldd	r23, Y+22	; 0x16
    35e6:	8f 89       	ldd	r24, Y+23	; 0x17
    35e8:	98 8d       	ldd	r25, Y+24	; 0x18
    35ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35ee:	dc 01       	movw	r26, r24
    35f0:	cb 01       	movw	r24, r22
    35f2:	9c 8b       	std	Y+20, r25	; 0x14
    35f4:	8b 8b       	std	Y+19, r24	; 0x13
    35f6:	8b 89       	ldd	r24, Y+19	; 0x13
    35f8:	9c 89       	ldd	r25, Y+20	; 0x14
    35fa:	98 8b       	std	Y+16, r25	; 0x10
    35fc:	8f 87       	std	Y+15, r24	; 0x0f
    35fe:	8f 85       	ldd	r24, Y+15	; 0x0f
    3600:	98 89       	ldd	r25, Y+16	; 0x10
    3602:	01 97       	sbiw	r24, 0x01	; 1
    3604:	f1 f7       	brne	.-4      	; 0x3602 <main+0x1a6>
    3606:	98 8b       	std	Y+16, r25	; 0x10
    3608:	8f 87       	std	Y+15, r24	; 0x0f

            _delay_ms(50);
		     flag3 = 0;
    360a:	10 92 97 00 	sts	0x0097, r1
			Timer_Counter = 0;
    360e:	10 92 91 00 	sts	0x0091, r1
    3612:	10 92 90 00 	sts	0x0090, r1
    3616:	03 c0       	rjmp	.+6      	; 0x361e <main+0x1c2>
		    while(!flag3)
			{
				Car_direction(RIGHT);
    3618:	83 e0       	ldi	r24, 0x03	; 3
    361a:	0e 94 da 1b 	call	0x37b4	; 0x37b4 <Car_direction>
			Car_direction(STOP);

            _delay_ms(50);
		     flag3 = 0;
			Timer_Counter = 0;
		    while(!flag3)
    361e:	80 91 97 00 	lds	r24, 0x0097
    3622:	88 23       	and	r24, r24
    3624:	c9 f3       	breq	.-14     	; 0x3618 <main+0x1bc>
			{
				Car_direction(RIGHT);
			}
			Car_direction(STOP);
    3626:	80 e0       	ldi	r24, 0x00	; 0
    3628:	0e 94 da 1b 	call	0x37b4	; 0x37b4 <Car_direction>
    362c:	80 e0       	ldi	r24, 0x00	; 0
    362e:	90 e0       	ldi	r25, 0x00	; 0
    3630:	a8 e4       	ldi	r26, 0x48	; 72
    3632:	b2 e4       	ldi	r27, 0x42	; 66
    3634:	8b 87       	std	Y+11, r24	; 0x0b
    3636:	9c 87       	std	Y+12, r25	; 0x0c
    3638:	ad 87       	std	Y+13, r26	; 0x0d
    363a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    363c:	6b 85       	ldd	r22, Y+11	; 0x0b
    363e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3640:	8d 85       	ldd	r24, Y+13	; 0x0d
    3642:	9e 85       	ldd	r25, Y+14	; 0x0e
    3644:	20 e0       	ldi	r18, 0x00	; 0
    3646:	30 e0       	ldi	r19, 0x00	; 0
    3648:	4a ef       	ldi	r20, 0xFA	; 250
    364a:	54 e4       	ldi	r21, 0x44	; 68
    364c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3650:	dc 01       	movw	r26, r24
    3652:	cb 01       	movw	r24, r22
    3654:	8f 83       	std	Y+7, r24	; 0x07
    3656:	98 87       	std	Y+8, r25	; 0x08
    3658:	a9 87       	std	Y+9, r26	; 0x09
    365a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    365c:	6f 81       	ldd	r22, Y+7	; 0x07
    365e:	78 85       	ldd	r23, Y+8	; 0x08
    3660:	89 85       	ldd	r24, Y+9	; 0x09
    3662:	9a 85       	ldd	r25, Y+10	; 0x0a
    3664:	20 e0       	ldi	r18, 0x00	; 0
    3666:	30 e0       	ldi	r19, 0x00	; 0
    3668:	40 e8       	ldi	r20, 0x80	; 128
    366a:	5f e3       	ldi	r21, 0x3F	; 63
    366c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3670:	88 23       	and	r24, r24
    3672:	2c f4       	brge	.+10     	; 0x367e <main+0x222>
		__ticks = 1;
    3674:	81 e0       	ldi	r24, 0x01	; 1
    3676:	90 e0       	ldi	r25, 0x00	; 0
    3678:	9e 83       	std	Y+6, r25	; 0x06
    367a:	8d 83       	std	Y+5, r24	; 0x05
    367c:	3f c0       	rjmp	.+126    	; 0x36fc <main+0x2a0>
	else if (__tmp > 65535)
    367e:	6f 81       	ldd	r22, Y+7	; 0x07
    3680:	78 85       	ldd	r23, Y+8	; 0x08
    3682:	89 85       	ldd	r24, Y+9	; 0x09
    3684:	9a 85       	ldd	r25, Y+10	; 0x0a
    3686:	20 e0       	ldi	r18, 0x00	; 0
    3688:	3f ef       	ldi	r19, 0xFF	; 255
    368a:	4f e7       	ldi	r20, 0x7F	; 127
    368c:	57 e4       	ldi	r21, 0x47	; 71
    368e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3692:	18 16       	cp	r1, r24
    3694:	4c f5       	brge	.+82     	; 0x36e8 <main+0x28c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3696:	6b 85       	ldd	r22, Y+11	; 0x0b
    3698:	7c 85       	ldd	r23, Y+12	; 0x0c
    369a:	8d 85       	ldd	r24, Y+13	; 0x0d
    369c:	9e 85       	ldd	r25, Y+14	; 0x0e
    369e:	20 e0       	ldi	r18, 0x00	; 0
    36a0:	30 e0       	ldi	r19, 0x00	; 0
    36a2:	40 e2       	ldi	r20, 0x20	; 32
    36a4:	51 e4       	ldi	r21, 0x41	; 65
    36a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36aa:	dc 01       	movw	r26, r24
    36ac:	cb 01       	movw	r24, r22
    36ae:	bc 01       	movw	r22, r24
    36b0:	cd 01       	movw	r24, r26
    36b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36b6:	dc 01       	movw	r26, r24
    36b8:	cb 01       	movw	r24, r22
    36ba:	9e 83       	std	Y+6, r25	; 0x06
    36bc:	8d 83       	std	Y+5, r24	; 0x05
    36be:	0f c0       	rjmp	.+30     	; 0x36de <main+0x282>
    36c0:	88 ec       	ldi	r24, 0xC8	; 200
    36c2:	90 e0       	ldi	r25, 0x00	; 0
    36c4:	9c 83       	std	Y+4, r25	; 0x04
    36c6:	8b 83       	std	Y+3, r24	; 0x03
    36c8:	8b 81       	ldd	r24, Y+3	; 0x03
    36ca:	9c 81       	ldd	r25, Y+4	; 0x04
    36cc:	01 97       	sbiw	r24, 0x01	; 1
    36ce:	f1 f7       	brne	.-4      	; 0x36cc <main+0x270>
    36d0:	9c 83       	std	Y+4, r25	; 0x04
    36d2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36d4:	8d 81       	ldd	r24, Y+5	; 0x05
    36d6:	9e 81       	ldd	r25, Y+6	; 0x06
    36d8:	01 97       	sbiw	r24, 0x01	; 1
    36da:	9e 83       	std	Y+6, r25	; 0x06
    36dc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    36de:	8d 81       	ldd	r24, Y+5	; 0x05
    36e0:	9e 81       	ldd	r25, Y+6	; 0x06
    36e2:	00 97       	sbiw	r24, 0x00	; 0
    36e4:	69 f7       	brne	.-38     	; 0x36c0 <main+0x264>
    36e6:	14 c0       	rjmp	.+40     	; 0x3710 <main+0x2b4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36e8:	6f 81       	ldd	r22, Y+7	; 0x07
    36ea:	78 85       	ldd	r23, Y+8	; 0x08
    36ec:	89 85       	ldd	r24, Y+9	; 0x09
    36ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    36f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36f4:	dc 01       	movw	r26, r24
    36f6:	cb 01       	movw	r24, r22
    36f8:	9e 83       	std	Y+6, r25	; 0x06
    36fa:	8d 83       	std	Y+5, r24	; 0x05
    36fc:	8d 81       	ldd	r24, Y+5	; 0x05
    36fe:	9e 81       	ldd	r25, Y+6	; 0x06
    3700:	9a 83       	std	Y+2, r25	; 0x02
    3702:	89 83       	std	Y+1, r24	; 0x01
    3704:	89 81       	ldd	r24, Y+1	; 0x01
    3706:	9a 81       	ldd	r25, Y+2	; 0x02
    3708:	01 97       	sbiw	r24, 0x01	; 1
    370a:	f1 f7       	brne	.-4      	; 0x3708 <main+0x2ac>
    370c:	9a 83       	std	Y+2, r25	; 0x02
    370e:	89 83       	std	Y+1, r24	; 0x01

            _delay_ms(50);
		     flag3 = 0;
    3710:	10 92 97 00 	sts	0x0097, r1
			Timer_Counter = 0;
    3714:	10 92 91 00 	sts	0x0091, r1
    3718:	10 92 90 00 	sts	0x0090, r1
    371c:	03 c0       	rjmp	.+6      	; 0x3724 <main+0x2c8>
		    while(!flag3)
			{
				Car_direction(LEFT);
    371e:	84 e0       	ldi	r24, 0x04	; 4
    3720:	0e 94 da 1b 	call	0x37b4	; 0x37b4 <Car_direction>
			Car_direction(STOP);

            _delay_ms(50);
		     flag3 = 0;
			Timer_Counter = 0;
		    while(!flag3)
    3724:	80 91 97 00 	lds	r24, 0x0097
    3728:	88 23       	and	r24, r24
    372a:	c9 f3       	breq	.-14     	; 0x371e <main+0x2c2>
			{
				Car_direction(LEFT);
			}
			Car_direction(STOP);
    372c:	80 e0       	ldi	r24, 0x00	; 0
    372e:	0e 94 da 1b 	call	0x37b4	; 0x37b4 <Car_direction>
    3732:	16 c0       	rjmp	.+44     	; 0x3760 <main+0x304>


		}
		else
		{
		    flag1 = 0;
    3734:	10 92 95 00 	sts	0x0095, r1
			Timer_Counter = 0;
    3738:	10 92 91 00 	sts	0x0091, r1
    373c:	10 92 90 00 	sts	0x0090, r1
    3740:	03 c0       	rjmp	.+6      	; 0x3748 <main+0x2ec>

			while(!flag1)
			{
				Car_direction(FORWORD);
    3742:	81 e0       	ldi	r24, 0x01	; 1
    3744:	0e 94 da 1b 	call	0x37b4	; 0x37b4 <Car_direction>
		else
		{
		    flag1 = 0;
			Timer_Counter = 0;

			while(!flag1)
    3748:	80 91 95 00 	lds	r24, 0x0095
    374c:	88 23       	and	r24, r24
    374e:	c9 f3       	breq	.-14     	; 0x3742 <main+0x2e6>
			{
				Car_direction(FORWORD);
			}
			Car_direction(STOP);
    3750:	80 e0       	ldi	r24, 0x00	; 0
    3752:	0e 94 da 1b 	call	0x37b4	; 0x37b4 <Car_direction>
			steps++;
    3756:	80 91 98 00 	lds	r24, 0x0098
    375a:	8f 5f       	subi	r24, 0xFF	; 255
    375c:	80 93 98 00 	sts	0x0098, r24

	Gie_Enable();
	while(1)
	{

	  while(steps<4)
    3760:	80 91 98 00 	lds	r24, 0x0098
    3764:	84 30       	cpi	r24, 0x04	; 4
    3766:	08 f4       	brcc	.+2      	; 0x376a <main+0x30e>
    3768:	be ce       	rjmp	.-644    	; 0x34e6 <main+0x8a>
			steps++;
		}

	  } // end of first part

	  Total_Steps += steps;
    376a:	90 91 99 00 	lds	r25, 0x0099
    376e:	80 91 98 00 	lds	r24, 0x0098
    3772:	89 0f       	add	r24, r25
    3774:	80 93 99 00 	sts	0x0099, r24
	  if(Total_Steps == 4)
    3778:	80 91 99 00 	lds	r24, 0x0099
    377c:	84 30       	cpi	r24, 0x04	; 4
    377e:	49 f4       	brne	.+18     	; 0x3792 <main+0x336>
	  {
		    Car_Round(ROUND_RIGHT);
    3780:	80 e0       	ldi	r24, 0x00	; 0
    3782:	0e 94 c3 1d 	call	0x3b86	; 0x3b86 <Car_Round>
			Car_Detected();
    3786:	0e 94 8b 1c 	call	0x3916	; 0x3916 <Car_Detected>
		    Car_Round(ROUND_RIGHT);
    378a:	80 e0       	ldi	r24, 0x00	; 0
    378c:	0e 94 c3 1d 	call	0x3b86	; 0x3b86 <Car_Round>
    3790:	0e c0       	rjmp	.+28     	; 0x37ae <main+0x352>
	  }
	  else if (Total_Steps == 8)
    3792:	80 91 99 00 	lds	r24, 0x0099
    3796:	88 30       	cpi	r24, 0x08	; 8
    3798:	51 f4       	brne	.+20     	; 0x37ae <main+0x352>
	  {
		    Car_Round(ROUND_LEFT);
    379a:	81 e0       	ldi	r24, 0x01	; 1
    379c:	0e 94 c3 1d 	call	0x3b86	; 0x3b86 <Car_Round>
			Car_Detected();
    37a0:	0e 94 8b 1c 	call	0x3916	; 0x3916 <Car_Detected>
		    Car_Round(ROUND_LEFT);
    37a4:	81 e0       	ldi	r24, 0x01	; 1
    37a6:	0e 94 c3 1d 	call	0x3b86	; 0x3b86 <Car_Round>
		    Total_Steps = 0;
    37aa:	10 92 99 00 	sts	0x0099, r1
	  }

	  steps = 0;
    37ae:	10 92 98 00 	sts	0x0098, r1
    37b2:	d6 cf       	rjmp	.-84     	; 0x3760 <main+0x304>

000037b4 <Car_direction>:
#include "Pwm.h"
#include "mines_detector.h"


void Car_direction(Car_direction_type direction)
{
    37b4:	df 93       	push	r29
    37b6:	cf 93       	push	r28
    37b8:	00 d0       	rcall	.+0      	; 0x37ba <Car_direction+0x6>
    37ba:	0f 92       	push	r0
    37bc:	cd b7       	in	r28, 0x3d	; 61
    37be:	de b7       	in	r29, 0x3e	; 62
    37c0:	89 83       	std	Y+1, r24	; 0x01
    switch (direction)
    37c2:	89 81       	ldd	r24, Y+1	; 0x01
    37c4:	28 2f       	mov	r18, r24
    37c6:	30 e0       	ldi	r19, 0x00	; 0
    37c8:	3b 83       	std	Y+3, r19	; 0x03
    37ca:	2a 83       	std	Y+2, r18	; 0x02
    37cc:	8a 81       	ldd	r24, Y+2	; 0x02
    37ce:	9b 81       	ldd	r25, Y+3	; 0x03
    37d0:	82 30       	cpi	r24, 0x02	; 2
    37d2:	91 05       	cpc	r25, r1
    37d4:	09 f4       	brne	.+2      	; 0x37d8 <Car_direction+0x24>
    37d6:	46 c0       	rjmp	.+140    	; 0x3864 <Car_direction+0xb0>
    37d8:	2a 81       	ldd	r18, Y+2	; 0x02
    37da:	3b 81       	ldd	r19, Y+3	; 0x03
    37dc:	23 30       	cpi	r18, 0x03	; 3
    37de:	31 05       	cpc	r19, r1
    37e0:	54 f4       	brge	.+20     	; 0x37f6 <Car_direction+0x42>
    37e2:	8a 81       	ldd	r24, Y+2	; 0x02
    37e4:	9b 81       	ldd	r25, Y+3	; 0x03
    37e6:	00 97       	sbiw	r24, 0x00	; 0
    37e8:	99 f0       	breq	.+38     	; 0x3810 <Car_direction+0x5c>
    37ea:	2a 81       	ldd	r18, Y+2	; 0x02
    37ec:	3b 81       	ldd	r19, Y+3	; 0x03
    37ee:	21 30       	cpi	r18, 0x01	; 1
    37f0:	31 05       	cpc	r19, r1
    37f2:	19 f1       	breq	.+70     	; 0x383a <Car_direction+0x86>
    37f4:	76 c0       	rjmp	.+236    	; 0x38e2 <Car_direction+0x12e>
    37f6:	8a 81       	ldd	r24, Y+2	; 0x02
    37f8:	9b 81       	ldd	r25, Y+3	; 0x03
    37fa:	83 30       	cpi	r24, 0x03	; 3
    37fc:	91 05       	cpc	r25, r1
    37fe:	09 f4       	brne	.+2      	; 0x3802 <Car_direction+0x4e>
    3800:	46 c0       	rjmp	.+140    	; 0x388e <Car_direction+0xda>
    3802:	2a 81       	ldd	r18, Y+2	; 0x02
    3804:	3b 81       	ldd	r19, Y+3	; 0x03
    3806:	24 30       	cpi	r18, 0x04	; 4
    3808:	31 05       	cpc	r19, r1
    380a:	09 f4       	brne	.+2      	; 0x380e <Car_direction+0x5a>
    380c:	55 c0       	rjmp	.+170    	; 0x38b8 <Car_direction+0x104>
    380e:	69 c0       	rjmp	.+210    	; 0x38e2 <Car_direction+0x12e>
    {
               case STOP :
           		    Dio_SetPinLevel(IN1 , DIO_LOW);
    3810:	83 e0       	ldi	r24, 0x03	; 3
    3812:	60 e0       	ldi	r22, 0x00	; 0
    3814:	40 e0       	ldi	r20, 0x00	; 0
    3816:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <Dio_SetPinLevel>
           		    Dio_SetPinLevel(IN2 , DIO_LOW);
    381a:	83 e0       	ldi	r24, 0x03	; 3
    381c:	61 e0       	ldi	r22, 0x01	; 1
    381e:	40 e0       	ldi	r20, 0x00	; 0
    3820:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <Dio_SetPinLevel>
           		    Dio_SetPinLevel(IN3 , DIO_LOW);
    3824:	83 e0       	ldi	r24, 0x03	; 3
    3826:	62 e0       	ldi	r22, 0x02	; 2
    3828:	40 e0       	ldi	r20, 0x00	; 0
    382a:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <Dio_SetPinLevel>
           	    	Dio_SetPinLevel(IN4 , DIO_LOW);
    382e:	83 e0       	ldi	r24, 0x03	; 3
    3830:	63 e0       	ldi	r22, 0x03	; 3
    3832:	40 e0       	ldi	r20, 0x00	; 0
    3834:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <Dio_SetPinLevel>
    3838:	68 c0       	rjmp	.+208    	; 0x390a <Car_direction+0x156>
            	   break;
               case FORWORD :
           		    Dio_SetPinLevel(IN1 , DIO_HIGH);
    383a:	83 e0       	ldi	r24, 0x03	; 3
    383c:	60 e0       	ldi	r22, 0x00	; 0
    383e:	41 e0       	ldi	r20, 0x01	; 1
    3840:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <Dio_SetPinLevel>
           	     	Dio_SetPinLevel(IN2 , DIO_LOW);
    3844:	83 e0       	ldi	r24, 0x03	; 3
    3846:	61 e0       	ldi	r22, 0x01	; 1
    3848:	40 e0       	ldi	r20, 0x00	; 0
    384a:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <Dio_SetPinLevel>
           	    	Dio_SetPinLevel(IN3 , DIO_LOW);
    384e:	83 e0       	ldi	r24, 0x03	; 3
    3850:	62 e0       	ldi	r22, 0x02	; 2
    3852:	40 e0       	ldi	r20, 0x00	; 0
    3854:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <Dio_SetPinLevel>
           	    	Dio_SetPinLevel(IN4 , DIO_HIGH);
    3858:	83 e0       	ldi	r24, 0x03	; 3
    385a:	63 e0       	ldi	r22, 0x03	; 3
    385c:	41 e0       	ldi	r20, 0x01	; 1
    385e:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <Dio_SetPinLevel>
    3862:	53 c0       	rjmp	.+166    	; 0x390a <Car_direction+0x156>
            	   break;
               case BACKWORD :
              		Dio_SetPinLevel(IN1 , DIO_LOW);
    3864:	83 e0       	ldi	r24, 0x03	; 3
    3866:	60 e0       	ldi	r22, 0x00	; 0
    3868:	40 e0       	ldi	r20, 0x00	; 0
    386a:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <Dio_SetPinLevel>
              		Dio_SetPinLevel(IN2 , DIO_HIGH);
    386e:	83 e0       	ldi	r24, 0x03	; 3
    3870:	61 e0       	ldi	r22, 0x01	; 1
    3872:	41 e0       	ldi	r20, 0x01	; 1
    3874:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <Dio_SetPinLevel>
              		Dio_SetPinLevel(IN3 , DIO_HIGH);
    3878:	83 e0       	ldi	r24, 0x03	; 3
    387a:	62 e0       	ldi	r22, 0x02	; 2
    387c:	41 e0       	ldi	r20, 0x01	; 1
    387e:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <Dio_SetPinLevel>
              		Dio_SetPinLevel(IN4 , DIO_LOW);
    3882:	83 e0       	ldi	r24, 0x03	; 3
    3884:	63 e0       	ldi	r22, 0x03	; 3
    3886:	40 e0       	ldi	r20, 0x00	; 0
    3888:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <Dio_SetPinLevel>
    388c:	3e c0       	rjmp	.+124    	; 0x390a <Car_direction+0x156>
            	   break;
               case RIGHT :
          		    Dio_SetPinLevel(IN1 , DIO_HIGH);
    388e:	83 e0       	ldi	r24, 0x03	; 3
    3890:	60 e0       	ldi	r22, 0x00	; 0
    3892:	41 e0       	ldi	r20, 0x01	; 1
    3894:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <Dio_SetPinLevel>
          	     	Dio_SetPinLevel(IN2 , DIO_LOW);
    3898:	83 e0       	ldi	r24, 0x03	; 3
    389a:	61 e0       	ldi	r22, 0x01	; 1
    389c:	40 e0       	ldi	r20, 0x00	; 0
    389e:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <Dio_SetPinLevel>
             		Dio_SetPinLevel(IN3 , DIO_LOW);
    38a2:	83 e0       	ldi	r24, 0x03	; 3
    38a4:	62 e0       	ldi	r22, 0x02	; 2
    38a6:	40 e0       	ldi	r20, 0x00	; 0
    38a8:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <Dio_SetPinLevel>
             		Dio_SetPinLevel(IN4 , DIO_LOW);
    38ac:	83 e0       	ldi	r24, 0x03	; 3
    38ae:	63 e0       	ldi	r22, 0x03	; 3
    38b0:	40 e0       	ldi	r20, 0x00	; 0
    38b2:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <Dio_SetPinLevel>
    38b6:	29 c0       	rjmp	.+82     	; 0x390a <Car_direction+0x156>
            	   break;
               case LEFT :
            		Dio_SetPinLevel(IN1 , DIO_LOW);
    38b8:	83 e0       	ldi	r24, 0x03	; 3
    38ba:	60 e0       	ldi	r22, 0x00	; 0
    38bc:	40 e0       	ldi	r20, 0x00	; 0
    38be:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <Dio_SetPinLevel>
            		Dio_SetPinLevel(IN2 , DIO_LOW);
    38c2:	83 e0       	ldi	r24, 0x03	; 3
    38c4:	61 e0       	ldi	r22, 0x01	; 1
    38c6:	40 e0       	ldi	r20, 0x00	; 0
    38c8:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <Dio_SetPinLevel>
            		Dio_SetPinLevel(IN3 , DIO_LOW);
    38cc:	83 e0       	ldi	r24, 0x03	; 3
    38ce:	62 e0       	ldi	r22, 0x02	; 2
    38d0:	40 e0       	ldi	r20, 0x00	; 0
    38d2:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <Dio_SetPinLevel>
            		Dio_SetPinLevel(IN4 , DIO_HIGH);
    38d6:	83 e0       	ldi	r24, 0x03	; 3
    38d8:	63 e0       	ldi	r22, 0x03	; 3
    38da:	41 e0       	ldi	r20, 0x01	; 1
    38dc:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <Dio_SetPinLevel>
    38e0:	14 c0       	rjmp	.+40     	; 0x390a <Car_direction+0x156>
            	   break;
               default :
          		    Dio_SetPinLevel(IN1 , DIO_HIGH);
    38e2:	83 e0       	ldi	r24, 0x03	; 3
    38e4:	60 e0       	ldi	r22, 0x00	; 0
    38e6:	41 e0       	ldi	r20, 0x01	; 1
    38e8:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <Dio_SetPinLevel>
          	     	Dio_SetPinLevel(IN2 , DIO_LOW);
    38ec:	83 e0       	ldi	r24, 0x03	; 3
    38ee:	61 e0       	ldi	r22, 0x01	; 1
    38f0:	40 e0       	ldi	r20, 0x00	; 0
    38f2:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <Dio_SetPinLevel>
          	    	Dio_SetPinLevel(IN3 , DIO_LOW);
    38f6:	83 e0       	ldi	r24, 0x03	; 3
    38f8:	62 e0       	ldi	r22, 0x02	; 2
    38fa:	40 e0       	ldi	r20, 0x00	; 0
    38fc:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <Dio_SetPinLevel>
          	    	Dio_SetPinLevel(IN4 , DIO_HIGH);
    3900:	83 e0       	ldi	r24, 0x03	; 3
    3902:	63 e0       	ldi	r22, 0x03	; 3
    3904:	41 e0       	ldi	r20, 0x01	; 1
    3906:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <Dio_SetPinLevel>
			   break;
    }
}
    390a:	0f 90       	pop	r0
    390c:	0f 90       	pop	r0
    390e:	0f 90       	pop	r0
    3910:	cf 91       	pop	r28
    3912:	df 91       	pop	r29
    3914:	08 95       	ret

00003916 <Car_Detected>:



void Car_Detected(void)
{
    3916:	df 93       	push	r29
    3918:	cf 93       	push	r28
    391a:	cd b7       	in	r28, 0x3d	; 61
    391c:	de b7       	in	r29, 0x3e	; 62
    391e:	6c 97       	sbiw	r28, 0x1c	; 28
    3920:	0f b6       	in	r0, 0x3f	; 63
    3922:	f8 94       	cli
    3924:	de bf       	out	0x3e, r29	; 62
    3926:	0f be       	out	0x3f, r0	; 63
    3928:	cd bf       	out	0x3d, r28	; 61
	for (i=300; i<=2000; i+=200)
    392a:	8c e2       	ldi	r24, 0x2C	; 44
    392c:	91 e0       	ldi	r25, 0x01	; 1
    392e:	90 93 94 00 	sts	0x0094, r25
    3932:	80 93 93 00 	sts	0x0093, r24
    3936:	0b c1       	rjmp	.+534    	; 0x3b4e <Car_Detected+0x238>
			      {
				             Pwm_SetTimeOn(PWM_OUT_OC1A, i);
    3938:	20 91 93 00 	lds	r18, 0x0093
    393c:	30 91 94 00 	lds	r19, 0x0094
    3940:	81 e0       	ldi	r24, 0x01	; 1
    3942:	b9 01       	movw	r22, r18
    3944:	0e 94 f0 18 	call	0x31e0	; 0x31e0 <Pwm_SetTimeOn>
    3948:	80 e0       	ldi	r24, 0x00	; 0
    394a:	90 e0       	ldi	r25, 0x00	; 0
    394c:	aa e7       	ldi	r26, 0x7A	; 122
    394e:	b3 e4       	ldi	r27, 0x43	; 67
    3950:	89 8f       	std	Y+25, r24	; 0x19
    3952:	9a 8f       	std	Y+26, r25	; 0x1a
    3954:	ab 8f       	std	Y+27, r26	; 0x1b
    3956:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3958:	69 8d       	ldd	r22, Y+25	; 0x19
    395a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    395c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    395e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3960:	20 e0       	ldi	r18, 0x00	; 0
    3962:	30 e0       	ldi	r19, 0x00	; 0
    3964:	4a ef       	ldi	r20, 0xFA	; 250
    3966:	54 e4       	ldi	r21, 0x44	; 68
    3968:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    396c:	dc 01       	movw	r26, r24
    396e:	cb 01       	movw	r24, r22
    3970:	8d 8b       	std	Y+21, r24	; 0x15
    3972:	9e 8b       	std	Y+22, r25	; 0x16
    3974:	af 8b       	std	Y+23, r26	; 0x17
    3976:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3978:	6d 89       	ldd	r22, Y+21	; 0x15
    397a:	7e 89       	ldd	r23, Y+22	; 0x16
    397c:	8f 89       	ldd	r24, Y+23	; 0x17
    397e:	98 8d       	ldd	r25, Y+24	; 0x18
    3980:	20 e0       	ldi	r18, 0x00	; 0
    3982:	30 e0       	ldi	r19, 0x00	; 0
    3984:	40 e8       	ldi	r20, 0x80	; 128
    3986:	5f e3       	ldi	r21, 0x3F	; 63
    3988:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    398c:	88 23       	and	r24, r24
    398e:	2c f4       	brge	.+10     	; 0x399a <Car_Detected+0x84>
		__ticks = 1;
    3990:	81 e0       	ldi	r24, 0x01	; 1
    3992:	90 e0       	ldi	r25, 0x00	; 0
    3994:	9c 8b       	std	Y+20, r25	; 0x14
    3996:	8b 8b       	std	Y+19, r24	; 0x13
    3998:	3f c0       	rjmp	.+126    	; 0x3a18 <Car_Detected+0x102>
	else if (__tmp > 65535)
    399a:	6d 89       	ldd	r22, Y+21	; 0x15
    399c:	7e 89       	ldd	r23, Y+22	; 0x16
    399e:	8f 89       	ldd	r24, Y+23	; 0x17
    39a0:	98 8d       	ldd	r25, Y+24	; 0x18
    39a2:	20 e0       	ldi	r18, 0x00	; 0
    39a4:	3f ef       	ldi	r19, 0xFF	; 255
    39a6:	4f e7       	ldi	r20, 0x7F	; 127
    39a8:	57 e4       	ldi	r21, 0x47	; 71
    39aa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    39ae:	18 16       	cp	r1, r24
    39b0:	4c f5       	brge	.+82     	; 0x3a04 <Car_Detected+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    39b2:	69 8d       	ldd	r22, Y+25	; 0x19
    39b4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    39b6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    39b8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    39ba:	20 e0       	ldi	r18, 0x00	; 0
    39bc:	30 e0       	ldi	r19, 0x00	; 0
    39be:	40 e2       	ldi	r20, 0x20	; 32
    39c0:	51 e4       	ldi	r21, 0x41	; 65
    39c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39c6:	dc 01       	movw	r26, r24
    39c8:	cb 01       	movw	r24, r22
    39ca:	bc 01       	movw	r22, r24
    39cc:	cd 01       	movw	r24, r26
    39ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39d2:	dc 01       	movw	r26, r24
    39d4:	cb 01       	movw	r24, r22
    39d6:	9c 8b       	std	Y+20, r25	; 0x14
    39d8:	8b 8b       	std	Y+19, r24	; 0x13
    39da:	0f c0       	rjmp	.+30     	; 0x39fa <Car_Detected+0xe4>
    39dc:	88 ec       	ldi	r24, 0xC8	; 200
    39de:	90 e0       	ldi	r25, 0x00	; 0
    39e0:	9a 8b       	std	Y+18, r25	; 0x12
    39e2:	89 8b       	std	Y+17, r24	; 0x11
    39e4:	89 89       	ldd	r24, Y+17	; 0x11
    39e6:	9a 89       	ldd	r25, Y+18	; 0x12
    39e8:	01 97       	sbiw	r24, 0x01	; 1
    39ea:	f1 f7       	brne	.-4      	; 0x39e8 <Car_Detected+0xd2>
    39ec:	9a 8b       	std	Y+18, r25	; 0x12
    39ee:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    39f0:	8b 89       	ldd	r24, Y+19	; 0x13
    39f2:	9c 89       	ldd	r25, Y+20	; 0x14
    39f4:	01 97       	sbiw	r24, 0x01	; 1
    39f6:	9c 8b       	std	Y+20, r25	; 0x14
    39f8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    39fa:	8b 89       	ldd	r24, Y+19	; 0x13
    39fc:	9c 89       	ldd	r25, Y+20	; 0x14
    39fe:	00 97       	sbiw	r24, 0x00	; 0
    3a00:	69 f7       	brne	.-38     	; 0x39dc <Car_Detected+0xc6>
    3a02:	14 c0       	rjmp	.+40     	; 0x3a2c <Car_Detected+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a04:	6d 89       	ldd	r22, Y+21	; 0x15
    3a06:	7e 89       	ldd	r23, Y+22	; 0x16
    3a08:	8f 89       	ldd	r24, Y+23	; 0x17
    3a0a:	98 8d       	ldd	r25, Y+24	; 0x18
    3a0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a10:	dc 01       	movw	r26, r24
    3a12:	cb 01       	movw	r24, r22
    3a14:	9c 8b       	std	Y+20, r25	; 0x14
    3a16:	8b 8b       	std	Y+19, r24	; 0x13
    3a18:	8b 89       	ldd	r24, Y+19	; 0x13
    3a1a:	9c 89       	ldd	r25, Y+20	; 0x14
    3a1c:	98 8b       	std	Y+16, r25	; 0x10
    3a1e:	8f 87       	std	Y+15, r24	; 0x0f
    3a20:	8f 85       	ldd	r24, Y+15	; 0x0f
    3a22:	98 89       	ldd	r25, Y+16	; 0x10
    3a24:	01 97       	sbiw	r24, 0x01	; 1
    3a26:	f1 f7       	brne	.-4      	; 0x3a24 <Car_Detected+0x10e>
    3a28:	98 8b       	std	Y+16, r25	; 0x10
    3a2a:	8f 87       	std	Y+15, r24	; 0x0f
					         _delay_ms(250);
					       if (Dio_ReadPinLevel(IR) == 1)
    3a2c:	82 e0       	ldi	r24, 0x02	; 2
    3a2e:	60 e0       	ldi	r22, 0x00	; 0
    3a30:	0e 94 9d 09 	call	0x133a	; 0x133a <Dio_ReadPinLevel>
    3a34:	81 30       	cpi	r24, 0x01	; 1
    3a36:	09 f0       	breq	.+2      	; 0x3a3a <Car_Detected+0x124>
    3a38:	80 c0       	rjmp	.+256    	; 0x3b3a <Car_Detected+0x224>
					       {
					    	   Detected_Mine = 1;
    3a3a:	81 e0       	ldi	r24, 0x01	; 1
    3a3c:	80 93 92 00 	sts	0x0092, r24
					    	   Dio_SetPinLevel(BUZZ , DIO_HIGH);
    3a40:	83 e0       	ldi	r24, 0x03	; 3
    3a42:	67 e0       	ldi	r22, 0x07	; 7
    3a44:	41 e0       	ldi	r20, 0x01	; 1
    3a46:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <Dio_SetPinLevel>
    3a4a:	80 e0       	ldi	r24, 0x00	; 0
    3a4c:	90 e0       	ldi	r25, 0x00	; 0
    3a4e:	aa ef       	ldi	r26, 0xFA	; 250
    3a50:	b4 e4       	ldi	r27, 0x44	; 68
    3a52:	8b 87       	std	Y+11, r24	; 0x0b
    3a54:	9c 87       	std	Y+12, r25	; 0x0c
    3a56:	ad 87       	std	Y+13, r26	; 0x0d
    3a58:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a5a:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a5c:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a5e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a60:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a62:	20 e0       	ldi	r18, 0x00	; 0
    3a64:	30 e0       	ldi	r19, 0x00	; 0
    3a66:	4a ef       	ldi	r20, 0xFA	; 250
    3a68:	54 e4       	ldi	r21, 0x44	; 68
    3a6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a6e:	dc 01       	movw	r26, r24
    3a70:	cb 01       	movw	r24, r22
    3a72:	8f 83       	std	Y+7, r24	; 0x07
    3a74:	98 87       	std	Y+8, r25	; 0x08
    3a76:	a9 87       	std	Y+9, r26	; 0x09
    3a78:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3a7a:	6f 81       	ldd	r22, Y+7	; 0x07
    3a7c:	78 85       	ldd	r23, Y+8	; 0x08
    3a7e:	89 85       	ldd	r24, Y+9	; 0x09
    3a80:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a82:	20 e0       	ldi	r18, 0x00	; 0
    3a84:	30 e0       	ldi	r19, 0x00	; 0
    3a86:	40 e8       	ldi	r20, 0x80	; 128
    3a88:	5f e3       	ldi	r21, 0x3F	; 63
    3a8a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3a8e:	88 23       	and	r24, r24
    3a90:	2c f4       	brge	.+10     	; 0x3a9c <Car_Detected+0x186>
		__ticks = 1;
    3a92:	81 e0       	ldi	r24, 0x01	; 1
    3a94:	90 e0       	ldi	r25, 0x00	; 0
    3a96:	9e 83       	std	Y+6, r25	; 0x06
    3a98:	8d 83       	std	Y+5, r24	; 0x05
    3a9a:	3f c0       	rjmp	.+126    	; 0x3b1a <Car_Detected+0x204>
	else if (__tmp > 65535)
    3a9c:	6f 81       	ldd	r22, Y+7	; 0x07
    3a9e:	78 85       	ldd	r23, Y+8	; 0x08
    3aa0:	89 85       	ldd	r24, Y+9	; 0x09
    3aa2:	9a 85       	ldd	r25, Y+10	; 0x0a
    3aa4:	20 e0       	ldi	r18, 0x00	; 0
    3aa6:	3f ef       	ldi	r19, 0xFF	; 255
    3aa8:	4f e7       	ldi	r20, 0x7F	; 127
    3aaa:	57 e4       	ldi	r21, 0x47	; 71
    3aac:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3ab0:	18 16       	cp	r1, r24
    3ab2:	4c f5       	brge	.+82     	; 0x3b06 <Car_Detected+0x1f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ab4:	6b 85       	ldd	r22, Y+11	; 0x0b
    3ab6:	7c 85       	ldd	r23, Y+12	; 0x0c
    3ab8:	8d 85       	ldd	r24, Y+13	; 0x0d
    3aba:	9e 85       	ldd	r25, Y+14	; 0x0e
    3abc:	20 e0       	ldi	r18, 0x00	; 0
    3abe:	30 e0       	ldi	r19, 0x00	; 0
    3ac0:	40 e2       	ldi	r20, 0x20	; 32
    3ac2:	51 e4       	ldi	r21, 0x41	; 65
    3ac4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ac8:	dc 01       	movw	r26, r24
    3aca:	cb 01       	movw	r24, r22
    3acc:	bc 01       	movw	r22, r24
    3ace:	cd 01       	movw	r24, r26
    3ad0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ad4:	dc 01       	movw	r26, r24
    3ad6:	cb 01       	movw	r24, r22
    3ad8:	9e 83       	std	Y+6, r25	; 0x06
    3ada:	8d 83       	std	Y+5, r24	; 0x05
    3adc:	0f c0       	rjmp	.+30     	; 0x3afc <Car_Detected+0x1e6>
    3ade:	88 ec       	ldi	r24, 0xC8	; 200
    3ae0:	90 e0       	ldi	r25, 0x00	; 0
    3ae2:	9c 83       	std	Y+4, r25	; 0x04
    3ae4:	8b 83       	std	Y+3, r24	; 0x03
    3ae6:	8b 81       	ldd	r24, Y+3	; 0x03
    3ae8:	9c 81       	ldd	r25, Y+4	; 0x04
    3aea:	01 97       	sbiw	r24, 0x01	; 1
    3aec:	f1 f7       	brne	.-4      	; 0x3aea <Car_Detected+0x1d4>
    3aee:	9c 83       	std	Y+4, r25	; 0x04
    3af0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3af2:	8d 81       	ldd	r24, Y+5	; 0x05
    3af4:	9e 81       	ldd	r25, Y+6	; 0x06
    3af6:	01 97       	sbiw	r24, 0x01	; 1
    3af8:	9e 83       	std	Y+6, r25	; 0x06
    3afa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3afc:	8d 81       	ldd	r24, Y+5	; 0x05
    3afe:	9e 81       	ldd	r25, Y+6	; 0x06
    3b00:	00 97       	sbiw	r24, 0x00	; 0
    3b02:	69 f7       	brne	.-38     	; 0x3ade <Car_Detected+0x1c8>
    3b04:	14 c0       	rjmp	.+40     	; 0x3b2e <Car_Detected+0x218>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b06:	6f 81       	ldd	r22, Y+7	; 0x07
    3b08:	78 85       	ldd	r23, Y+8	; 0x08
    3b0a:	89 85       	ldd	r24, Y+9	; 0x09
    3b0c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b12:	dc 01       	movw	r26, r24
    3b14:	cb 01       	movw	r24, r22
    3b16:	9e 83       	std	Y+6, r25	; 0x06
    3b18:	8d 83       	std	Y+5, r24	; 0x05
    3b1a:	8d 81       	ldd	r24, Y+5	; 0x05
    3b1c:	9e 81       	ldd	r25, Y+6	; 0x06
    3b1e:	9a 83       	std	Y+2, r25	; 0x02
    3b20:	89 83       	std	Y+1, r24	; 0x01
    3b22:	89 81       	ldd	r24, Y+1	; 0x01
    3b24:	9a 81       	ldd	r25, Y+2	; 0x02
    3b26:	01 97       	sbiw	r24, 0x01	; 1
    3b28:	f1 f7       	brne	.-4      	; 0x3b26 <Car_Detected+0x210>
    3b2a:	9a 83       	std	Y+2, r25	; 0x02
    3b2c:	89 83       	std	Y+1, r24	; 0x01
					    	   _delay_ms(2000);
					    	   Dio_SetPinLevel(BUZZ , DIO_LOW);
    3b2e:	83 e0       	ldi	r24, 0x03	; 3
    3b30:	67 e0       	ldi	r22, 0x07	; 7
    3b32:	40 e0       	ldi	r20, 0x00	; 0
    3b34:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <Dio_SetPinLevel>
    3b38:	13 c0       	rjmp	.+38     	; 0x3b60 <Car_Detected+0x24a>



void Car_Detected(void)
{
	for (i=300; i<=2000; i+=200)
    3b3a:	80 91 93 00 	lds	r24, 0x0093
    3b3e:	90 91 94 00 	lds	r25, 0x0094
    3b42:	88 53       	subi	r24, 0x38	; 56
    3b44:	9f 4f       	sbci	r25, 0xFF	; 255
    3b46:	90 93 94 00 	sts	0x0094, r25
    3b4a:	80 93 93 00 	sts	0x0093, r24
    3b4e:	80 91 93 00 	lds	r24, 0x0093
    3b52:	90 91 94 00 	lds	r25, 0x0094
    3b56:	27 e0       	ldi	r18, 0x07	; 7
    3b58:	81 3d       	cpi	r24, 0xD1	; 209
    3b5a:	92 07       	cpc	r25, r18
    3b5c:	08 f4       	brcc	.+2      	; 0x3b60 <Car_Detected+0x24a>
    3b5e:	ec ce       	rjmp	.-552    	; 0x3938 <Car_Detected+0x22>
					    	   break;
					       }

			      }

    Timer_Counter = 0;
    3b60:	10 92 91 00 	sts	0x0091, r1
    3b64:	10 92 90 00 	sts	0x0090, r1
     flag1 = 0;
    3b68:	10 92 95 00 	sts	0x0095, r1
     flag2 = 0;
    3b6c:	10 92 96 00 	sts	0x0096, r1
     flag3 = 0;
    3b70:	10 92 97 00 	sts	0x0097, r1
}
    3b74:	6c 96       	adiw	r28, 0x1c	; 28
    3b76:	0f b6       	in	r0, 0x3f	; 63
    3b78:	f8 94       	cli
    3b7a:	de bf       	out	0x3e, r29	; 62
    3b7c:	0f be       	out	0x3f, r0	; 63
    3b7e:	cd bf       	out	0x3d, r28	; 61
    3b80:	cf 91       	pop	r28
    3b82:	df 91       	pop	r29
    3b84:	08 95       	ret

00003b86 <Car_Round>:



void Car_Round (Round_type Round)
{
    3b86:	df 93       	push	r29
    3b88:	cf 93       	push	r28
    3b8a:	0f 92       	push	r0
    3b8c:	cd b7       	in	r28, 0x3d	; 61
    3b8e:	de b7       	in	r29, 0x3e	; 62
    3b90:	89 83       	std	Y+1, r24	; 0x01
    flag3 = 0;
    3b92:	10 92 97 00 	sts	0x0097, r1
	Timer_Counter = 0;
    3b96:	10 92 91 00 	sts	0x0091, r1
    3b9a:	10 92 90 00 	sts	0x0090, r1
	if (Round == ROUND_RIGHT)
    3b9e:	89 81       	ldd	r24, Y+1	; 0x01
    3ba0:	88 23       	and	r24, r24
    3ba2:	61 f4       	brne	.+24     	; 0x3bbc <Car_Round+0x36>
    3ba4:	03 c0       	rjmp	.+6      	; 0x3bac <Car_Round+0x26>
	{
	    while(!flag3)
		{
			Car_direction(RIGHT);
    3ba6:	83 e0       	ldi	r24, 0x03	; 3
    3ba8:	0e 94 da 1b 	call	0x37b4	; 0x37b4 <Car_direction>
{
    flag3 = 0;
	Timer_Counter = 0;
	if (Round == ROUND_RIGHT)
	{
	    while(!flag3)
    3bac:	80 91 97 00 	lds	r24, 0x0097
    3bb0:	88 23       	and	r24, r24
    3bb2:	c9 f3       	breq	.-14     	; 0x3ba6 <Car_Round+0x20>
		{
			Car_direction(RIGHT);
		}
		Car_direction(STOP);
    3bb4:	80 e0       	ldi	r24, 0x00	; 0
    3bb6:	0e 94 da 1b 	call	0x37b4	; 0x37b4 <Car_direction>
    3bba:	0e c0       	rjmp	.+28     	; 0x3bd8 <Car_Round+0x52>
	}
	else if (Round == ROUND_LEFT)
    3bbc:	89 81       	ldd	r24, Y+1	; 0x01
    3bbe:	81 30       	cpi	r24, 0x01	; 1
    3bc0:	59 f4       	brne	.+22     	; 0x3bd8 <Car_Round+0x52>
    3bc2:	03 c0       	rjmp	.+6      	; 0x3bca <Car_Round+0x44>
	{
	    while(!flag3)
		{
			Car_direction(LEFT);
    3bc4:	84 e0       	ldi	r24, 0x04	; 4
    3bc6:	0e 94 da 1b 	call	0x37b4	; 0x37b4 <Car_direction>
		}
		Car_direction(STOP);
	}
	else if (Round == ROUND_LEFT)
	{
	    while(!flag3)
    3bca:	80 91 97 00 	lds	r24, 0x0097
    3bce:	88 23       	and	r24, r24
    3bd0:	c9 f3       	breq	.-14     	; 0x3bc4 <Car_Round+0x3e>
		{
			Car_direction(LEFT);
		}
		Car_direction(STOP);
    3bd2:	80 e0       	ldi	r24, 0x00	; 0
    3bd4:	0e 94 da 1b 	call	0x37b4	; 0x37b4 <Car_direction>
	}
}
    3bd8:	0f 90       	pop	r0
    3bda:	cf 91       	pop	r28
    3bdc:	df 91       	pop	r29
    3bde:	08 95       	ret

00003be0 <__mulsi3>:
    3be0:	62 9f       	mul	r22, r18
    3be2:	d0 01       	movw	r26, r0
    3be4:	73 9f       	mul	r23, r19
    3be6:	f0 01       	movw	r30, r0
    3be8:	82 9f       	mul	r24, r18
    3bea:	e0 0d       	add	r30, r0
    3bec:	f1 1d       	adc	r31, r1
    3bee:	64 9f       	mul	r22, r20
    3bf0:	e0 0d       	add	r30, r0
    3bf2:	f1 1d       	adc	r31, r1
    3bf4:	92 9f       	mul	r25, r18
    3bf6:	f0 0d       	add	r31, r0
    3bf8:	83 9f       	mul	r24, r19
    3bfa:	f0 0d       	add	r31, r0
    3bfc:	74 9f       	mul	r23, r20
    3bfe:	f0 0d       	add	r31, r0
    3c00:	65 9f       	mul	r22, r21
    3c02:	f0 0d       	add	r31, r0
    3c04:	99 27       	eor	r25, r25
    3c06:	72 9f       	mul	r23, r18
    3c08:	b0 0d       	add	r27, r0
    3c0a:	e1 1d       	adc	r30, r1
    3c0c:	f9 1f       	adc	r31, r25
    3c0e:	63 9f       	mul	r22, r19
    3c10:	b0 0d       	add	r27, r0
    3c12:	e1 1d       	adc	r30, r1
    3c14:	f9 1f       	adc	r31, r25
    3c16:	bd 01       	movw	r22, r26
    3c18:	cf 01       	movw	r24, r30
    3c1a:	11 24       	eor	r1, r1
    3c1c:	08 95       	ret

00003c1e <__udivmodsi4>:
    3c1e:	a1 e2       	ldi	r26, 0x21	; 33
    3c20:	1a 2e       	mov	r1, r26
    3c22:	aa 1b       	sub	r26, r26
    3c24:	bb 1b       	sub	r27, r27
    3c26:	fd 01       	movw	r30, r26
    3c28:	0d c0       	rjmp	.+26     	; 0x3c44 <__udivmodsi4_ep>

00003c2a <__udivmodsi4_loop>:
    3c2a:	aa 1f       	adc	r26, r26
    3c2c:	bb 1f       	adc	r27, r27
    3c2e:	ee 1f       	adc	r30, r30
    3c30:	ff 1f       	adc	r31, r31
    3c32:	a2 17       	cp	r26, r18
    3c34:	b3 07       	cpc	r27, r19
    3c36:	e4 07       	cpc	r30, r20
    3c38:	f5 07       	cpc	r31, r21
    3c3a:	20 f0       	brcs	.+8      	; 0x3c44 <__udivmodsi4_ep>
    3c3c:	a2 1b       	sub	r26, r18
    3c3e:	b3 0b       	sbc	r27, r19
    3c40:	e4 0b       	sbc	r30, r20
    3c42:	f5 0b       	sbc	r31, r21

00003c44 <__udivmodsi4_ep>:
    3c44:	66 1f       	adc	r22, r22
    3c46:	77 1f       	adc	r23, r23
    3c48:	88 1f       	adc	r24, r24
    3c4a:	99 1f       	adc	r25, r25
    3c4c:	1a 94       	dec	r1
    3c4e:	69 f7       	brne	.-38     	; 0x3c2a <__udivmodsi4_loop>
    3c50:	60 95       	com	r22
    3c52:	70 95       	com	r23
    3c54:	80 95       	com	r24
    3c56:	90 95       	com	r25
    3c58:	9b 01       	movw	r18, r22
    3c5a:	ac 01       	movw	r20, r24
    3c5c:	bd 01       	movw	r22, r26
    3c5e:	cf 01       	movw	r24, r30
    3c60:	08 95       	ret

00003c62 <__prologue_saves__>:
    3c62:	2f 92       	push	r2
    3c64:	3f 92       	push	r3
    3c66:	4f 92       	push	r4
    3c68:	5f 92       	push	r5
    3c6a:	6f 92       	push	r6
    3c6c:	7f 92       	push	r7
    3c6e:	8f 92       	push	r8
    3c70:	9f 92       	push	r9
    3c72:	af 92       	push	r10
    3c74:	bf 92       	push	r11
    3c76:	cf 92       	push	r12
    3c78:	df 92       	push	r13
    3c7a:	ef 92       	push	r14
    3c7c:	ff 92       	push	r15
    3c7e:	0f 93       	push	r16
    3c80:	1f 93       	push	r17
    3c82:	cf 93       	push	r28
    3c84:	df 93       	push	r29
    3c86:	cd b7       	in	r28, 0x3d	; 61
    3c88:	de b7       	in	r29, 0x3e	; 62
    3c8a:	ca 1b       	sub	r28, r26
    3c8c:	db 0b       	sbc	r29, r27
    3c8e:	0f b6       	in	r0, 0x3f	; 63
    3c90:	f8 94       	cli
    3c92:	de bf       	out	0x3e, r29	; 62
    3c94:	0f be       	out	0x3f, r0	; 63
    3c96:	cd bf       	out	0x3d, r28	; 61
    3c98:	09 94       	ijmp

00003c9a <__epilogue_restores__>:
    3c9a:	2a 88       	ldd	r2, Y+18	; 0x12
    3c9c:	39 88       	ldd	r3, Y+17	; 0x11
    3c9e:	48 88       	ldd	r4, Y+16	; 0x10
    3ca0:	5f 84       	ldd	r5, Y+15	; 0x0f
    3ca2:	6e 84       	ldd	r6, Y+14	; 0x0e
    3ca4:	7d 84       	ldd	r7, Y+13	; 0x0d
    3ca6:	8c 84       	ldd	r8, Y+12	; 0x0c
    3ca8:	9b 84       	ldd	r9, Y+11	; 0x0b
    3caa:	aa 84       	ldd	r10, Y+10	; 0x0a
    3cac:	b9 84       	ldd	r11, Y+9	; 0x09
    3cae:	c8 84       	ldd	r12, Y+8	; 0x08
    3cb0:	df 80       	ldd	r13, Y+7	; 0x07
    3cb2:	ee 80       	ldd	r14, Y+6	; 0x06
    3cb4:	fd 80       	ldd	r15, Y+5	; 0x05
    3cb6:	0c 81       	ldd	r16, Y+4	; 0x04
    3cb8:	1b 81       	ldd	r17, Y+3	; 0x03
    3cba:	aa 81       	ldd	r26, Y+2	; 0x02
    3cbc:	b9 81       	ldd	r27, Y+1	; 0x01
    3cbe:	ce 0f       	add	r28, r30
    3cc0:	d1 1d       	adc	r29, r1
    3cc2:	0f b6       	in	r0, 0x3f	; 63
    3cc4:	f8 94       	cli
    3cc6:	de bf       	out	0x3e, r29	; 62
    3cc8:	0f be       	out	0x3f, r0	; 63
    3cca:	cd bf       	out	0x3d, r28	; 61
    3ccc:	ed 01       	movw	r28, r26
    3cce:	08 95       	ret

00003cd0 <_exit>:
    3cd0:	f8 94       	cli

00003cd2 <__stop_program>:
    3cd2:	ff cf       	rjmp	.-2      	; 0x3cd2 <__stop_program>
